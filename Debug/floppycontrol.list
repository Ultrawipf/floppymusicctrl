
floppycontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb8  08004fb8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004fb8  08004fb8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fb8  08004fb8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000014  08004fd4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  08004fd4  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e2b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270b  00000000  00000000  00032e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000cc74  00000000  00000000  00035572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  000421e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd0  00000000  00000000  00042ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015606  00000000  00000000  00043dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167c0  00000000  00000000  000593c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086089  00000000  00000000  0006fb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f5c0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000264c  00000000  00000000  000f5c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004e08 	.word	0x08004e08

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08004e08 	.word	0x08004e08

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_cfrcmple>:
 8000218:	4684      	mov	ip, r0
 800021a:	0008      	movs	r0, r1
 800021c:	4661      	mov	r1, ip
 800021e:	e7ff      	b.n	8000220 <__aeabi_cfcmpeq>

08000220 <__aeabi_cfcmpeq>:
 8000220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000222:	f000 f9cf 	bl	80005c4 <__lesf2>
 8000226:	2800      	cmp	r0, #0
 8000228:	d401      	bmi.n	800022e <__aeabi_cfcmpeq+0xe>
 800022a:	2100      	movs	r1, #0
 800022c:	42c8      	cmn	r0, r1
 800022e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000230 <__aeabi_fcmpeq>:
 8000230:	b510      	push	{r4, lr}
 8000232:	f000 f95b 	bl	80004ec <__eqsf2>
 8000236:	4240      	negs	r0, r0
 8000238:	3001      	adds	r0, #1
 800023a:	bd10      	pop	{r4, pc}

0800023c <__aeabi_fcmplt>:
 800023c:	b510      	push	{r4, lr}
 800023e:	f000 f9c1 	bl	80005c4 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	db01      	blt.n	800024a <__aeabi_fcmplt+0xe>
 8000246:	2000      	movs	r0, #0
 8000248:	bd10      	pop	{r4, pc}
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_fcmple>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f9b7 	bl	80005c4 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	dd01      	ble.n	800025e <__aeabi_fcmple+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmpgt>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 f967 	bl	8000538 <__gesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dc01      	bgt.n	8000272 <__aeabi_fcmpgt+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpge>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f95d 	bl	8000538 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	da01      	bge.n	8000286 <__aeabi_fcmpge+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_f2uiz>:
 800028c:	219e      	movs	r1, #158	; 0x9e
 800028e:	b510      	push	{r4, lr}
 8000290:	05c9      	lsls	r1, r1, #23
 8000292:	1c04      	adds	r4, r0, #0
 8000294:	f7ff fff0 	bl	8000278 <__aeabi_fcmpge>
 8000298:	2800      	cmp	r0, #0
 800029a:	d103      	bne.n	80002a4 <__aeabi_f2uiz+0x18>
 800029c:	1c20      	adds	r0, r4, #0
 800029e:	f000 fb83 	bl	80009a8 <__aeabi_f2iz>
 80002a2:	bd10      	pop	{r4, pc}
 80002a4:	219e      	movs	r1, #158	; 0x9e
 80002a6:	1c20      	adds	r0, r4, #0
 80002a8:	05c9      	lsls	r1, r1, #23
 80002aa:	f000 f9cf 	bl	800064c <__aeabi_fsub>
 80002ae:	f000 fb7b 	bl	80009a8 <__aeabi_f2iz>
 80002b2:	2380      	movs	r3, #128	; 0x80
 80002b4:	061b      	lsls	r3, r3, #24
 80002b6:	469c      	mov	ip, r3
 80002b8:	4460      	add	r0, ip
 80002ba:	e7f2      	b.n	80002a2 <__aeabi_f2uiz+0x16>

080002bc <__aeabi_fdiv>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	464f      	mov	r7, r9
 80002c0:	4646      	mov	r6, r8
 80002c2:	46d6      	mov	lr, sl
 80002c4:	0245      	lsls	r5, r0, #9
 80002c6:	b5c0      	push	{r6, r7, lr}
 80002c8:	0047      	lsls	r7, r0, #1
 80002ca:	1c0c      	adds	r4, r1, #0
 80002cc:	0a6d      	lsrs	r5, r5, #9
 80002ce:	0e3f      	lsrs	r7, r7, #24
 80002d0:	0fc6      	lsrs	r6, r0, #31
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fdiv+0x1c>
 80002d6:	e070      	b.n	80003ba <__aeabi_fdiv+0xfe>
 80002d8:	2fff      	cmp	r7, #255	; 0xff
 80002da:	d100      	bne.n	80002de <__aeabi_fdiv+0x22>
 80002dc:	e075      	b.n	80003ca <__aeabi_fdiv+0x10e>
 80002de:	00eb      	lsls	r3, r5, #3
 80002e0:	2580      	movs	r5, #128	; 0x80
 80002e2:	04ed      	lsls	r5, r5, #19
 80002e4:	431d      	orrs	r5, r3
 80002e6:	2300      	movs	r3, #0
 80002e8:	4699      	mov	r9, r3
 80002ea:	469a      	mov	sl, r3
 80002ec:	3f7f      	subs	r7, #127	; 0x7f
 80002ee:	0260      	lsls	r0, r4, #9
 80002f0:	0a43      	lsrs	r3, r0, #9
 80002f2:	4698      	mov	r8, r3
 80002f4:	0063      	lsls	r3, r4, #1
 80002f6:	0e1b      	lsrs	r3, r3, #24
 80002f8:	0fe4      	lsrs	r4, r4, #31
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d04e      	beq.n	800039c <__aeabi_fdiv+0xe0>
 80002fe:	2bff      	cmp	r3, #255	; 0xff
 8000300:	d046      	beq.n	8000390 <__aeabi_fdiv+0xd4>
 8000302:	4642      	mov	r2, r8
 8000304:	00d0      	lsls	r0, r2, #3
 8000306:	2280      	movs	r2, #128	; 0x80
 8000308:	04d2      	lsls	r2, r2, #19
 800030a:	4302      	orrs	r2, r0
 800030c:	4690      	mov	r8, r2
 800030e:	2200      	movs	r2, #0
 8000310:	3b7f      	subs	r3, #127	; 0x7f
 8000312:	0031      	movs	r1, r6
 8000314:	1aff      	subs	r7, r7, r3
 8000316:	464b      	mov	r3, r9
 8000318:	4061      	eors	r1, r4
 800031a:	b2c9      	uxtb	r1, r1
 800031c:	4313      	orrs	r3, r2
 800031e:	2b0f      	cmp	r3, #15
 8000320:	d900      	bls.n	8000324 <__aeabi_fdiv+0x68>
 8000322:	e0b5      	b.n	8000490 <__aeabi_fdiv+0x1d4>
 8000324:	486e      	ldr	r0, [pc, #440]	; (80004e0 <__aeabi_fdiv+0x224>)
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	58c3      	ldr	r3, [r0, r3]
 800032a:	469f      	mov	pc, r3
 800032c:	2300      	movs	r3, #0
 800032e:	4698      	mov	r8, r3
 8000330:	0026      	movs	r6, r4
 8000332:	4645      	mov	r5, r8
 8000334:	4692      	mov	sl, r2
 8000336:	4653      	mov	r3, sl
 8000338:	2b02      	cmp	r3, #2
 800033a:	d100      	bne.n	800033e <__aeabi_fdiv+0x82>
 800033c:	e089      	b.n	8000452 <__aeabi_fdiv+0x196>
 800033e:	2b03      	cmp	r3, #3
 8000340:	d100      	bne.n	8000344 <__aeabi_fdiv+0x88>
 8000342:	e09e      	b.n	8000482 <__aeabi_fdiv+0x1c6>
 8000344:	2b01      	cmp	r3, #1
 8000346:	d018      	beq.n	800037a <__aeabi_fdiv+0xbe>
 8000348:	003b      	movs	r3, r7
 800034a:	337f      	adds	r3, #127	; 0x7f
 800034c:	2b00      	cmp	r3, #0
 800034e:	dd69      	ble.n	8000424 <__aeabi_fdiv+0x168>
 8000350:	076a      	lsls	r2, r5, #29
 8000352:	d004      	beq.n	800035e <__aeabi_fdiv+0xa2>
 8000354:	220f      	movs	r2, #15
 8000356:	402a      	ands	r2, r5
 8000358:	2a04      	cmp	r2, #4
 800035a:	d000      	beq.n	800035e <__aeabi_fdiv+0xa2>
 800035c:	3504      	adds	r5, #4
 800035e:	012a      	lsls	r2, r5, #4
 8000360:	d503      	bpl.n	800036a <__aeabi_fdiv+0xae>
 8000362:	4b60      	ldr	r3, [pc, #384]	; (80004e4 <__aeabi_fdiv+0x228>)
 8000364:	401d      	ands	r5, r3
 8000366:	003b      	movs	r3, r7
 8000368:	3380      	adds	r3, #128	; 0x80
 800036a:	2bfe      	cmp	r3, #254	; 0xfe
 800036c:	dd00      	ble.n	8000370 <__aeabi_fdiv+0xb4>
 800036e:	e070      	b.n	8000452 <__aeabi_fdiv+0x196>
 8000370:	01ad      	lsls	r5, r5, #6
 8000372:	0a6d      	lsrs	r5, r5, #9
 8000374:	b2d8      	uxtb	r0, r3
 8000376:	e002      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000378:	000e      	movs	r6, r1
 800037a:	2000      	movs	r0, #0
 800037c:	2500      	movs	r5, #0
 800037e:	05c0      	lsls	r0, r0, #23
 8000380:	4328      	orrs	r0, r5
 8000382:	07f6      	lsls	r6, r6, #31
 8000384:	4330      	orrs	r0, r6
 8000386:	bce0      	pop	{r5, r6, r7}
 8000388:	46ba      	mov	sl, r7
 800038a:	46b1      	mov	r9, r6
 800038c:	46a8      	mov	r8, r5
 800038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000390:	4643      	mov	r3, r8
 8000392:	2b00      	cmp	r3, #0
 8000394:	d13f      	bne.n	8000416 <__aeabi_fdiv+0x15a>
 8000396:	2202      	movs	r2, #2
 8000398:	3fff      	subs	r7, #255	; 0xff
 800039a:	e003      	b.n	80003a4 <__aeabi_fdiv+0xe8>
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d12d      	bne.n	80003fe <__aeabi_fdiv+0x142>
 80003a2:	2201      	movs	r2, #1
 80003a4:	0031      	movs	r1, r6
 80003a6:	464b      	mov	r3, r9
 80003a8:	4061      	eors	r1, r4
 80003aa:	b2c9      	uxtb	r1, r1
 80003ac:	4313      	orrs	r3, r2
 80003ae:	2b0f      	cmp	r3, #15
 80003b0:	d834      	bhi.n	800041c <__aeabi_fdiv+0x160>
 80003b2:	484d      	ldr	r0, [pc, #308]	; (80004e8 <__aeabi_fdiv+0x22c>)
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	58c3      	ldr	r3, [r0, r3]
 80003b8:	469f      	mov	pc, r3
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d113      	bne.n	80003e6 <__aeabi_fdiv+0x12a>
 80003be:	2304      	movs	r3, #4
 80003c0:	4699      	mov	r9, r3
 80003c2:	3b03      	subs	r3, #3
 80003c4:	2700      	movs	r7, #0
 80003c6:	469a      	mov	sl, r3
 80003c8:	e791      	b.n	80002ee <__aeabi_fdiv+0x32>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	d105      	bne.n	80003da <__aeabi_fdiv+0x11e>
 80003ce:	2308      	movs	r3, #8
 80003d0:	4699      	mov	r9, r3
 80003d2:	3b06      	subs	r3, #6
 80003d4:	27ff      	movs	r7, #255	; 0xff
 80003d6:	469a      	mov	sl, r3
 80003d8:	e789      	b.n	80002ee <__aeabi_fdiv+0x32>
 80003da:	230c      	movs	r3, #12
 80003dc:	4699      	mov	r9, r3
 80003de:	3b09      	subs	r3, #9
 80003e0:	27ff      	movs	r7, #255	; 0xff
 80003e2:	469a      	mov	sl, r3
 80003e4:	e783      	b.n	80002ee <__aeabi_fdiv+0x32>
 80003e6:	0028      	movs	r0, r5
 80003e8:	f000 fb40 	bl	8000a6c <__clzsi2>
 80003ec:	2776      	movs	r7, #118	; 0x76
 80003ee:	1f43      	subs	r3, r0, #5
 80003f0:	409d      	lsls	r5, r3
 80003f2:	2300      	movs	r3, #0
 80003f4:	427f      	negs	r7, r7
 80003f6:	4699      	mov	r9, r3
 80003f8:	469a      	mov	sl, r3
 80003fa:	1a3f      	subs	r7, r7, r0
 80003fc:	e777      	b.n	80002ee <__aeabi_fdiv+0x32>
 80003fe:	4640      	mov	r0, r8
 8000400:	f000 fb34 	bl	8000a6c <__clzsi2>
 8000404:	4642      	mov	r2, r8
 8000406:	1f43      	subs	r3, r0, #5
 8000408:	409a      	lsls	r2, r3
 800040a:	2376      	movs	r3, #118	; 0x76
 800040c:	425b      	negs	r3, r3
 800040e:	4690      	mov	r8, r2
 8000410:	1a1b      	subs	r3, r3, r0
 8000412:	2200      	movs	r2, #0
 8000414:	e77d      	b.n	8000312 <__aeabi_fdiv+0x56>
 8000416:	23ff      	movs	r3, #255	; 0xff
 8000418:	2203      	movs	r2, #3
 800041a:	e77a      	b.n	8000312 <__aeabi_fdiv+0x56>
 800041c:	000e      	movs	r6, r1
 800041e:	20ff      	movs	r0, #255	; 0xff
 8000420:	2500      	movs	r5, #0
 8000422:	e7ac      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000424:	2001      	movs	r0, #1
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	281b      	cmp	r0, #27
 800042a:	dca6      	bgt.n	800037a <__aeabi_fdiv+0xbe>
 800042c:	379e      	adds	r7, #158	; 0x9e
 800042e:	002a      	movs	r2, r5
 8000430:	40bd      	lsls	r5, r7
 8000432:	40c2      	lsrs	r2, r0
 8000434:	1e6b      	subs	r3, r5, #1
 8000436:	419d      	sbcs	r5, r3
 8000438:	4315      	orrs	r5, r2
 800043a:	076b      	lsls	r3, r5, #29
 800043c:	d004      	beq.n	8000448 <__aeabi_fdiv+0x18c>
 800043e:	230f      	movs	r3, #15
 8000440:	402b      	ands	r3, r5
 8000442:	2b04      	cmp	r3, #4
 8000444:	d000      	beq.n	8000448 <__aeabi_fdiv+0x18c>
 8000446:	3504      	adds	r5, #4
 8000448:	016b      	lsls	r3, r5, #5
 800044a:	d544      	bpl.n	80004d6 <__aeabi_fdiv+0x21a>
 800044c:	2001      	movs	r0, #1
 800044e:	2500      	movs	r5, #0
 8000450:	e795      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000452:	20ff      	movs	r0, #255	; 0xff
 8000454:	2500      	movs	r5, #0
 8000456:	e792      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000458:	2580      	movs	r5, #128	; 0x80
 800045a:	2600      	movs	r6, #0
 800045c:	20ff      	movs	r0, #255	; 0xff
 800045e:	03ed      	lsls	r5, r5, #15
 8000460:	e78d      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000462:	2300      	movs	r3, #0
 8000464:	4698      	mov	r8, r3
 8000466:	2080      	movs	r0, #128	; 0x80
 8000468:	03c0      	lsls	r0, r0, #15
 800046a:	4205      	tst	r5, r0
 800046c:	d009      	beq.n	8000482 <__aeabi_fdiv+0x1c6>
 800046e:	4643      	mov	r3, r8
 8000470:	4203      	tst	r3, r0
 8000472:	d106      	bne.n	8000482 <__aeabi_fdiv+0x1c6>
 8000474:	4645      	mov	r5, r8
 8000476:	4305      	orrs	r5, r0
 8000478:	026d      	lsls	r5, r5, #9
 800047a:	0026      	movs	r6, r4
 800047c:	20ff      	movs	r0, #255	; 0xff
 800047e:	0a6d      	lsrs	r5, r5, #9
 8000480:	e77d      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000482:	2080      	movs	r0, #128	; 0x80
 8000484:	03c0      	lsls	r0, r0, #15
 8000486:	4305      	orrs	r5, r0
 8000488:	026d      	lsls	r5, r5, #9
 800048a:	20ff      	movs	r0, #255	; 0xff
 800048c:	0a6d      	lsrs	r5, r5, #9
 800048e:	e776      	b.n	800037e <__aeabi_fdiv+0xc2>
 8000490:	4642      	mov	r2, r8
 8000492:	016b      	lsls	r3, r5, #5
 8000494:	0150      	lsls	r0, r2, #5
 8000496:	4283      	cmp	r3, r0
 8000498:	d219      	bcs.n	80004ce <__aeabi_fdiv+0x212>
 800049a:	221b      	movs	r2, #27
 800049c:	2500      	movs	r5, #0
 800049e:	3f01      	subs	r7, #1
 80004a0:	2601      	movs	r6, #1
 80004a2:	001c      	movs	r4, r3
 80004a4:	006d      	lsls	r5, r5, #1
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	2c00      	cmp	r4, #0
 80004aa:	db01      	blt.n	80004b0 <__aeabi_fdiv+0x1f4>
 80004ac:	4298      	cmp	r0, r3
 80004ae:	d801      	bhi.n	80004b4 <__aeabi_fdiv+0x1f8>
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	4335      	orrs	r5, r6
 80004b4:	3a01      	subs	r2, #1
 80004b6:	2a00      	cmp	r2, #0
 80004b8:	d1f3      	bne.n	80004a2 <__aeabi_fdiv+0x1e6>
 80004ba:	1e5a      	subs	r2, r3, #1
 80004bc:	4193      	sbcs	r3, r2
 80004be:	431d      	orrs	r5, r3
 80004c0:	003b      	movs	r3, r7
 80004c2:	337f      	adds	r3, #127	; 0x7f
 80004c4:	000e      	movs	r6, r1
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dd00      	ble.n	80004cc <__aeabi_fdiv+0x210>
 80004ca:	e741      	b.n	8000350 <__aeabi_fdiv+0x94>
 80004cc:	e7aa      	b.n	8000424 <__aeabi_fdiv+0x168>
 80004ce:	221a      	movs	r2, #26
 80004d0:	2501      	movs	r5, #1
 80004d2:	1a1b      	subs	r3, r3, r0
 80004d4:	e7e4      	b.n	80004a0 <__aeabi_fdiv+0x1e4>
 80004d6:	01ad      	lsls	r5, r5, #6
 80004d8:	2000      	movs	r0, #0
 80004da:	0a6d      	lsrs	r5, r5, #9
 80004dc:	e74f      	b.n	800037e <__aeabi_fdiv+0xc2>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	08004e20 	.word	0x08004e20
 80004e4:	f7ffffff 	.word	0xf7ffffff
 80004e8:	08004e60 	.word	0x08004e60

080004ec <__eqsf2>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	0042      	lsls	r2, r0, #1
 80004f0:	0245      	lsls	r5, r0, #9
 80004f2:	024e      	lsls	r6, r1, #9
 80004f4:	004c      	lsls	r4, r1, #1
 80004f6:	0fc3      	lsrs	r3, r0, #31
 80004f8:	0a6d      	lsrs	r5, r5, #9
 80004fa:	2001      	movs	r0, #1
 80004fc:	0e12      	lsrs	r2, r2, #24
 80004fe:	0a76      	lsrs	r6, r6, #9
 8000500:	0e24      	lsrs	r4, r4, #24
 8000502:	0fc9      	lsrs	r1, r1, #31
 8000504:	2aff      	cmp	r2, #255	; 0xff
 8000506:	d006      	beq.n	8000516 <__eqsf2+0x2a>
 8000508:	2cff      	cmp	r4, #255	; 0xff
 800050a:	d003      	beq.n	8000514 <__eqsf2+0x28>
 800050c:	42a2      	cmp	r2, r4
 800050e:	d101      	bne.n	8000514 <__eqsf2+0x28>
 8000510:	42b5      	cmp	r5, r6
 8000512:	d006      	beq.n	8000522 <__eqsf2+0x36>
 8000514:	bd70      	pop	{r4, r5, r6, pc}
 8000516:	2d00      	cmp	r5, #0
 8000518:	d1fc      	bne.n	8000514 <__eqsf2+0x28>
 800051a:	2cff      	cmp	r4, #255	; 0xff
 800051c:	d1fa      	bne.n	8000514 <__eqsf2+0x28>
 800051e:	2e00      	cmp	r6, #0
 8000520:	d1f8      	bne.n	8000514 <__eqsf2+0x28>
 8000522:	428b      	cmp	r3, r1
 8000524:	d006      	beq.n	8000534 <__eqsf2+0x48>
 8000526:	2001      	movs	r0, #1
 8000528:	2a00      	cmp	r2, #0
 800052a:	d1f3      	bne.n	8000514 <__eqsf2+0x28>
 800052c:	0028      	movs	r0, r5
 800052e:	1e43      	subs	r3, r0, #1
 8000530:	4198      	sbcs	r0, r3
 8000532:	e7ef      	b.n	8000514 <__eqsf2+0x28>
 8000534:	2000      	movs	r0, #0
 8000536:	e7ed      	b.n	8000514 <__eqsf2+0x28>

08000538 <__gesf2>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	0042      	lsls	r2, r0, #1
 800053c:	0245      	lsls	r5, r0, #9
 800053e:	024e      	lsls	r6, r1, #9
 8000540:	004c      	lsls	r4, r1, #1
 8000542:	0fc3      	lsrs	r3, r0, #31
 8000544:	0a6d      	lsrs	r5, r5, #9
 8000546:	0e12      	lsrs	r2, r2, #24
 8000548:	0a76      	lsrs	r6, r6, #9
 800054a:	0e24      	lsrs	r4, r4, #24
 800054c:	0fc8      	lsrs	r0, r1, #31
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d01b      	beq.n	800058a <__gesf2+0x52>
 8000552:	2cff      	cmp	r4, #255	; 0xff
 8000554:	d00e      	beq.n	8000574 <__gesf2+0x3c>
 8000556:	2a00      	cmp	r2, #0
 8000558:	d11b      	bne.n	8000592 <__gesf2+0x5a>
 800055a:	2c00      	cmp	r4, #0
 800055c:	d101      	bne.n	8000562 <__gesf2+0x2a>
 800055e:	2e00      	cmp	r6, #0
 8000560:	d01c      	beq.n	800059c <__gesf2+0x64>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d00c      	beq.n	8000580 <__gesf2+0x48>
 8000566:	4283      	cmp	r3, r0
 8000568:	d01c      	beq.n	80005a4 <__gesf2+0x6c>
 800056a:	2102      	movs	r1, #2
 800056c:	1e58      	subs	r0, r3, #1
 800056e:	4008      	ands	r0, r1
 8000570:	3801      	subs	r0, #1
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	2e00      	cmp	r6, #0
 8000576:	d122      	bne.n	80005be <__gesf2+0x86>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d1f4      	bne.n	8000566 <__gesf2+0x2e>
 800057c:	2d00      	cmp	r5, #0
 800057e:	d1f2      	bne.n	8000566 <__gesf2+0x2e>
 8000580:	2800      	cmp	r0, #0
 8000582:	d1f6      	bne.n	8000572 <__gesf2+0x3a>
 8000584:	2001      	movs	r0, #1
 8000586:	4240      	negs	r0, r0
 8000588:	e7f3      	b.n	8000572 <__gesf2+0x3a>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d117      	bne.n	80005be <__gesf2+0x86>
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d0f0      	beq.n	8000574 <__gesf2+0x3c>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d1e7      	bne.n	8000566 <__gesf2+0x2e>
 8000596:	2e00      	cmp	r6, #0
 8000598:	d1e5      	bne.n	8000566 <__gesf2+0x2e>
 800059a:	e7e6      	b.n	800056a <__gesf2+0x32>
 800059c:	2000      	movs	r0, #0
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d0e7      	beq.n	8000572 <__gesf2+0x3a>
 80005a2:	e7e2      	b.n	800056a <__gesf2+0x32>
 80005a4:	42a2      	cmp	r2, r4
 80005a6:	dc05      	bgt.n	80005b4 <__gesf2+0x7c>
 80005a8:	dbea      	blt.n	8000580 <__gesf2+0x48>
 80005aa:	42b5      	cmp	r5, r6
 80005ac:	d802      	bhi.n	80005b4 <__gesf2+0x7c>
 80005ae:	d3e7      	bcc.n	8000580 <__gesf2+0x48>
 80005b0:	2000      	movs	r0, #0
 80005b2:	e7de      	b.n	8000572 <__gesf2+0x3a>
 80005b4:	4243      	negs	r3, r0
 80005b6:	4158      	adcs	r0, r3
 80005b8:	0040      	lsls	r0, r0, #1
 80005ba:	3801      	subs	r0, #1
 80005bc:	e7d9      	b.n	8000572 <__gesf2+0x3a>
 80005be:	2002      	movs	r0, #2
 80005c0:	4240      	negs	r0, r0
 80005c2:	e7d6      	b.n	8000572 <__gesf2+0x3a>

080005c4 <__lesf2>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	0042      	lsls	r2, r0, #1
 80005c8:	0245      	lsls	r5, r0, #9
 80005ca:	024e      	lsls	r6, r1, #9
 80005cc:	004c      	lsls	r4, r1, #1
 80005ce:	0fc3      	lsrs	r3, r0, #31
 80005d0:	0a6d      	lsrs	r5, r5, #9
 80005d2:	0e12      	lsrs	r2, r2, #24
 80005d4:	0a76      	lsrs	r6, r6, #9
 80005d6:	0e24      	lsrs	r4, r4, #24
 80005d8:	0fc8      	lsrs	r0, r1, #31
 80005da:	2aff      	cmp	r2, #255	; 0xff
 80005dc:	d00b      	beq.n	80005f6 <__lesf2+0x32>
 80005de:	2cff      	cmp	r4, #255	; 0xff
 80005e0:	d00d      	beq.n	80005fe <__lesf2+0x3a>
 80005e2:	2a00      	cmp	r2, #0
 80005e4:	d11f      	bne.n	8000626 <__lesf2+0x62>
 80005e6:	2c00      	cmp	r4, #0
 80005e8:	d116      	bne.n	8000618 <__lesf2+0x54>
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d114      	bne.n	8000618 <__lesf2+0x54>
 80005ee:	2000      	movs	r0, #0
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d010      	beq.n	8000616 <__lesf2+0x52>
 80005f4:	e009      	b.n	800060a <__lesf2+0x46>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	d10c      	bne.n	8000614 <__lesf2+0x50>
 80005fa:	2cff      	cmp	r4, #255	; 0xff
 80005fc:	d113      	bne.n	8000626 <__lesf2+0x62>
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d108      	bne.n	8000614 <__lesf2+0x50>
 8000602:	2a00      	cmp	r2, #0
 8000604:	d008      	beq.n	8000618 <__lesf2+0x54>
 8000606:	4283      	cmp	r3, r0
 8000608:	d012      	beq.n	8000630 <__lesf2+0x6c>
 800060a:	2102      	movs	r1, #2
 800060c:	1e58      	subs	r0, r3, #1
 800060e:	4008      	ands	r0, r1
 8000610:	3801      	subs	r0, #1
 8000612:	e000      	b.n	8000616 <__lesf2+0x52>
 8000614:	2002      	movs	r0, #2
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2d00      	cmp	r5, #0
 800061a:	d1f4      	bne.n	8000606 <__lesf2+0x42>
 800061c:	2800      	cmp	r0, #0
 800061e:	d1fa      	bne.n	8000616 <__lesf2+0x52>
 8000620:	2001      	movs	r0, #1
 8000622:	4240      	negs	r0, r0
 8000624:	e7f7      	b.n	8000616 <__lesf2+0x52>
 8000626:	2c00      	cmp	r4, #0
 8000628:	d1ed      	bne.n	8000606 <__lesf2+0x42>
 800062a:	2e00      	cmp	r6, #0
 800062c:	d1eb      	bne.n	8000606 <__lesf2+0x42>
 800062e:	e7ec      	b.n	800060a <__lesf2+0x46>
 8000630:	42a2      	cmp	r2, r4
 8000632:	dc05      	bgt.n	8000640 <__lesf2+0x7c>
 8000634:	dbf2      	blt.n	800061c <__lesf2+0x58>
 8000636:	42b5      	cmp	r5, r6
 8000638:	d802      	bhi.n	8000640 <__lesf2+0x7c>
 800063a:	d3ef      	bcc.n	800061c <__lesf2+0x58>
 800063c:	2000      	movs	r0, #0
 800063e:	e7ea      	b.n	8000616 <__lesf2+0x52>
 8000640:	4243      	negs	r3, r0
 8000642:	4158      	adcs	r0, r3
 8000644:	0040      	lsls	r0, r0, #1
 8000646:	3801      	subs	r0, #1
 8000648:	e7e5      	b.n	8000616 <__lesf2+0x52>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__aeabi_fsub>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	46ce      	mov	lr, r9
 8000650:	4647      	mov	r7, r8
 8000652:	0243      	lsls	r3, r0, #9
 8000654:	0a5b      	lsrs	r3, r3, #9
 8000656:	024e      	lsls	r6, r1, #9
 8000658:	00da      	lsls	r2, r3, #3
 800065a:	4694      	mov	ip, r2
 800065c:	0a72      	lsrs	r2, r6, #9
 800065e:	4691      	mov	r9, r2
 8000660:	0045      	lsls	r5, r0, #1
 8000662:	004a      	lsls	r2, r1, #1
 8000664:	b580      	push	{r7, lr}
 8000666:	0e2d      	lsrs	r5, r5, #24
 8000668:	001f      	movs	r7, r3
 800066a:	0fc4      	lsrs	r4, r0, #31
 800066c:	0e12      	lsrs	r2, r2, #24
 800066e:	0fc9      	lsrs	r1, r1, #31
 8000670:	09b6      	lsrs	r6, r6, #6
 8000672:	2aff      	cmp	r2, #255	; 0xff
 8000674:	d05b      	beq.n	800072e <__aeabi_fsub+0xe2>
 8000676:	2001      	movs	r0, #1
 8000678:	4041      	eors	r1, r0
 800067a:	428c      	cmp	r4, r1
 800067c:	d039      	beq.n	80006f2 <__aeabi_fsub+0xa6>
 800067e:	1aa8      	subs	r0, r5, r2
 8000680:	2800      	cmp	r0, #0
 8000682:	dd5a      	ble.n	800073a <__aeabi_fsub+0xee>
 8000684:	2a00      	cmp	r2, #0
 8000686:	d06a      	beq.n	800075e <__aeabi_fsub+0x112>
 8000688:	2dff      	cmp	r5, #255	; 0xff
 800068a:	d100      	bne.n	800068e <__aeabi_fsub+0x42>
 800068c:	e0d9      	b.n	8000842 <__aeabi_fsub+0x1f6>
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	04d2      	lsls	r2, r2, #19
 8000692:	4316      	orrs	r6, r2
 8000694:	281b      	cmp	r0, #27
 8000696:	dc00      	bgt.n	800069a <__aeabi_fsub+0x4e>
 8000698:	e0e9      	b.n	800086e <__aeabi_fsub+0x222>
 800069a:	2001      	movs	r0, #1
 800069c:	4663      	mov	r3, ip
 800069e:	1a18      	subs	r0, r3, r0
 80006a0:	0143      	lsls	r3, r0, #5
 80006a2:	d400      	bmi.n	80006a6 <__aeabi_fsub+0x5a>
 80006a4:	e0b4      	b.n	8000810 <__aeabi_fsub+0x1c4>
 80006a6:	0180      	lsls	r0, r0, #6
 80006a8:	0987      	lsrs	r7, r0, #6
 80006aa:	0038      	movs	r0, r7
 80006ac:	f000 f9de 	bl	8000a6c <__clzsi2>
 80006b0:	3805      	subs	r0, #5
 80006b2:	4087      	lsls	r7, r0
 80006b4:	4285      	cmp	r5, r0
 80006b6:	dc00      	bgt.n	80006ba <__aeabi_fsub+0x6e>
 80006b8:	e0cc      	b.n	8000854 <__aeabi_fsub+0x208>
 80006ba:	1a2d      	subs	r5, r5, r0
 80006bc:	48b5      	ldr	r0, [pc, #724]	; (8000994 <__aeabi_fsub+0x348>)
 80006be:	4038      	ands	r0, r7
 80006c0:	0743      	lsls	r3, r0, #29
 80006c2:	d004      	beq.n	80006ce <__aeabi_fsub+0x82>
 80006c4:	230f      	movs	r3, #15
 80006c6:	4003      	ands	r3, r0
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fsub+0x82>
 80006cc:	3004      	adds	r0, #4
 80006ce:	0143      	lsls	r3, r0, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0x88>
 80006d2:	e0a0      	b.n	8000816 <__aeabi_fsub+0x1ca>
 80006d4:	1c6a      	adds	r2, r5, #1
 80006d6:	2dfe      	cmp	r5, #254	; 0xfe
 80006d8:	d100      	bne.n	80006dc <__aeabi_fsub+0x90>
 80006da:	e08d      	b.n	80007f8 <__aeabi_fsub+0x1ac>
 80006dc:	0180      	lsls	r0, r0, #6
 80006de:	0a47      	lsrs	r7, r0, #9
 80006e0:	b2d2      	uxtb	r2, r2
 80006e2:	05d0      	lsls	r0, r2, #23
 80006e4:	4338      	orrs	r0, r7
 80006e6:	07e4      	lsls	r4, r4, #31
 80006e8:	4320      	orrs	r0, r4
 80006ea:	bcc0      	pop	{r6, r7}
 80006ec:	46b9      	mov	r9, r7
 80006ee:	46b0      	mov	r8, r6
 80006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006f2:	1aa8      	subs	r0, r5, r2
 80006f4:	4680      	mov	r8, r0
 80006f6:	2800      	cmp	r0, #0
 80006f8:	dd45      	ble.n	8000786 <__aeabi_fsub+0x13a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d070      	beq.n	80007e0 <__aeabi_fsub+0x194>
 80006fe:	2dff      	cmp	r5, #255	; 0xff
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0xb8>
 8000702:	e09e      	b.n	8000842 <__aeabi_fsub+0x1f6>
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	04db      	lsls	r3, r3, #19
 8000708:	431e      	orrs	r6, r3
 800070a:	4643      	mov	r3, r8
 800070c:	2b1b      	cmp	r3, #27
 800070e:	dc00      	bgt.n	8000712 <__aeabi_fsub+0xc6>
 8000710:	e0d2      	b.n	80008b8 <__aeabi_fsub+0x26c>
 8000712:	2001      	movs	r0, #1
 8000714:	4460      	add	r0, ip
 8000716:	0143      	lsls	r3, r0, #5
 8000718:	d57a      	bpl.n	8000810 <__aeabi_fsub+0x1c4>
 800071a:	3501      	adds	r5, #1
 800071c:	2dff      	cmp	r5, #255	; 0xff
 800071e:	d06b      	beq.n	80007f8 <__aeabi_fsub+0x1ac>
 8000720:	2301      	movs	r3, #1
 8000722:	4a9d      	ldr	r2, [pc, #628]	; (8000998 <__aeabi_fsub+0x34c>)
 8000724:	4003      	ands	r3, r0
 8000726:	0840      	lsrs	r0, r0, #1
 8000728:	4010      	ands	r0, r2
 800072a:	4318      	orrs	r0, r3
 800072c:	e7c8      	b.n	80006c0 <__aeabi_fsub+0x74>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d020      	beq.n	8000774 <__aeabi_fsub+0x128>
 8000732:	428c      	cmp	r4, r1
 8000734:	d023      	beq.n	800077e <__aeabi_fsub+0x132>
 8000736:	0028      	movs	r0, r5
 8000738:	38ff      	subs	r0, #255	; 0xff
 800073a:	2800      	cmp	r0, #0
 800073c:	d039      	beq.n	80007b2 <__aeabi_fsub+0x166>
 800073e:	1b57      	subs	r7, r2, r5
 8000740:	2d00      	cmp	r5, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_fsub+0xfa>
 8000744:	e09d      	b.n	8000882 <__aeabi_fsub+0x236>
 8000746:	4663      	mov	r3, ip
 8000748:	2b00      	cmp	r3, #0
 800074a:	d100      	bne.n	800074e <__aeabi_fsub+0x102>
 800074c:	e0db      	b.n	8000906 <__aeabi_fsub+0x2ba>
 800074e:	1e7b      	subs	r3, r7, #1
 8000750:	2f01      	cmp	r7, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_fsub+0x10a>
 8000754:	e10d      	b.n	8000972 <__aeabi_fsub+0x326>
 8000756:	2fff      	cmp	r7, #255	; 0xff
 8000758:	d071      	beq.n	800083e <__aeabi_fsub+0x1f2>
 800075a:	001f      	movs	r7, r3
 800075c:	e098      	b.n	8000890 <__aeabi_fsub+0x244>
 800075e:	2e00      	cmp	r6, #0
 8000760:	d100      	bne.n	8000764 <__aeabi_fsub+0x118>
 8000762:	e0a7      	b.n	80008b4 <__aeabi_fsub+0x268>
 8000764:	1e42      	subs	r2, r0, #1
 8000766:	2801      	cmp	r0, #1
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x120>
 800076a:	e0e6      	b.n	800093a <__aeabi_fsub+0x2ee>
 800076c:	28ff      	cmp	r0, #255	; 0xff
 800076e:	d068      	beq.n	8000842 <__aeabi_fsub+0x1f6>
 8000770:	0010      	movs	r0, r2
 8000772:	e78f      	b.n	8000694 <__aeabi_fsub+0x48>
 8000774:	2001      	movs	r0, #1
 8000776:	4041      	eors	r1, r0
 8000778:	42a1      	cmp	r1, r4
 800077a:	d000      	beq.n	800077e <__aeabi_fsub+0x132>
 800077c:	e77f      	b.n	800067e <__aeabi_fsub+0x32>
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	4240      	negs	r0, r0
 8000782:	4680      	mov	r8, r0
 8000784:	44a8      	add	r8, r5
 8000786:	4640      	mov	r0, r8
 8000788:	2800      	cmp	r0, #0
 800078a:	d038      	beq.n	80007fe <__aeabi_fsub+0x1b2>
 800078c:	1b51      	subs	r1, r2, r5
 800078e:	2d00      	cmp	r5, #0
 8000790:	d100      	bne.n	8000794 <__aeabi_fsub+0x148>
 8000792:	e0ae      	b.n	80008f2 <__aeabi_fsub+0x2a6>
 8000794:	2aff      	cmp	r2, #255	; 0xff
 8000796:	d100      	bne.n	800079a <__aeabi_fsub+0x14e>
 8000798:	e0df      	b.n	800095a <__aeabi_fsub+0x30e>
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	4660      	mov	r0, ip
 800079e:	04db      	lsls	r3, r3, #19
 80007a0:	4318      	orrs	r0, r3
 80007a2:	4684      	mov	ip, r0
 80007a4:	291b      	cmp	r1, #27
 80007a6:	dc00      	bgt.n	80007aa <__aeabi_fsub+0x15e>
 80007a8:	e0d9      	b.n	800095e <__aeabi_fsub+0x312>
 80007aa:	2001      	movs	r0, #1
 80007ac:	0015      	movs	r5, r2
 80007ae:	1980      	adds	r0, r0, r6
 80007b0:	e7b1      	b.n	8000716 <__aeabi_fsub+0xca>
 80007b2:	20fe      	movs	r0, #254	; 0xfe
 80007b4:	1c6a      	adds	r2, r5, #1
 80007b6:	4210      	tst	r0, r2
 80007b8:	d171      	bne.n	800089e <__aeabi_fsub+0x252>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d000      	beq.n	80007c0 <__aeabi_fsub+0x174>
 80007be:	e0a6      	b.n	800090e <__aeabi_fsub+0x2c2>
 80007c0:	4663      	mov	r3, ip
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fsub+0x17c>
 80007c6:	e0d9      	b.n	800097c <__aeabi_fsub+0x330>
 80007c8:	2200      	movs	r2, #0
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fsub+0x184>
 80007ce:	e788      	b.n	80006e2 <__aeabi_fsub+0x96>
 80007d0:	1b98      	subs	r0, r3, r6
 80007d2:	0143      	lsls	r3, r0, #5
 80007d4:	d400      	bmi.n	80007d8 <__aeabi_fsub+0x18c>
 80007d6:	e0e1      	b.n	800099c <__aeabi_fsub+0x350>
 80007d8:	4663      	mov	r3, ip
 80007da:	000c      	movs	r4, r1
 80007dc:	1af0      	subs	r0, r6, r3
 80007de:	e76f      	b.n	80006c0 <__aeabi_fsub+0x74>
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fsub+0x19a>
 80007e4:	e0b7      	b.n	8000956 <__aeabi_fsub+0x30a>
 80007e6:	0002      	movs	r2, r0
 80007e8:	3a01      	subs	r2, #1
 80007ea:	2801      	cmp	r0, #1
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fsub+0x1a4>
 80007ee:	e09c      	b.n	800092a <__aeabi_fsub+0x2de>
 80007f0:	28ff      	cmp	r0, #255	; 0xff
 80007f2:	d026      	beq.n	8000842 <__aeabi_fsub+0x1f6>
 80007f4:	4690      	mov	r8, r2
 80007f6:	e788      	b.n	800070a <__aeabi_fsub+0xbe>
 80007f8:	22ff      	movs	r2, #255	; 0xff
 80007fa:	2700      	movs	r7, #0
 80007fc:	e771      	b.n	80006e2 <__aeabi_fsub+0x96>
 80007fe:	20fe      	movs	r0, #254	; 0xfe
 8000800:	1c6a      	adds	r2, r5, #1
 8000802:	4210      	tst	r0, r2
 8000804:	d064      	beq.n	80008d0 <__aeabi_fsub+0x284>
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d0f6      	beq.n	80007f8 <__aeabi_fsub+0x1ac>
 800080a:	0015      	movs	r5, r2
 800080c:	4466      	add	r6, ip
 800080e:	0870      	lsrs	r0, r6, #1
 8000810:	0743      	lsls	r3, r0, #29
 8000812:	d000      	beq.n	8000816 <__aeabi_fsub+0x1ca>
 8000814:	e756      	b.n	80006c4 <__aeabi_fsub+0x78>
 8000816:	08c3      	lsrs	r3, r0, #3
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d012      	beq.n	8000842 <__aeabi_fsub+0x1f6>
 800081c:	025b      	lsls	r3, r3, #9
 800081e:	0a5f      	lsrs	r7, r3, #9
 8000820:	b2ea      	uxtb	r2, r5
 8000822:	e75e      	b.n	80006e2 <__aeabi_fsub+0x96>
 8000824:	4662      	mov	r2, ip
 8000826:	2a00      	cmp	r2, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fsub+0x1e0>
 800082a:	e096      	b.n	800095a <__aeabi_fsub+0x30e>
 800082c:	2e00      	cmp	r6, #0
 800082e:	d008      	beq.n	8000842 <__aeabi_fsub+0x1f6>
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	03d2      	lsls	r2, r2, #15
 8000834:	4213      	tst	r3, r2
 8000836:	d004      	beq.n	8000842 <__aeabi_fsub+0x1f6>
 8000838:	4648      	mov	r0, r9
 800083a:	4210      	tst	r0, r2
 800083c:	d101      	bne.n	8000842 <__aeabi_fsub+0x1f6>
 800083e:	000c      	movs	r4, r1
 8000840:	464b      	mov	r3, r9
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0d8      	beq.n	80007f8 <__aeabi_fsub+0x1ac>
 8000846:	2780      	movs	r7, #128	; 0x80
 8000848:	03ff      	lsls	r7, r7, #15
 800084a:	431f      	orrs	r7, r3
 800084c:	027f      	lsls	r7, r7, #9
 800084e:	22ff      	movs	r2, #255	; 0xff
 8000850:	0a7f      	lsrs	r7, r7, #9
 8000852:	e746      	b.n	80006e2 <__aeabi_fsub+0x96>
 8000854:	2320      	movs	r3, #32
 8000856:	003a      	movs	r2, r7
 8000858:	1b45      	subs	r5, r0, r5
 800085a:	0038      	movs	r0, r7
 800085c:	3501      	adds	r5, #1
 800085e:	40ea      	lsrs	r2, r5
 8000860:	1b5d      	subs	r5, r3, r5
 8000862:	40a8      	lsls	r0, r5
 8000864:	1e43      	subs	r3, r0, #1
 8000866:	4198      	sbcs	r0, r3
 8000868:	2500      	movs	r5, #0
 800086a:	4310      	orrs	r0, r2
 800086c:	e728      	b.n	80006c0 <__aeabi_fsub+0x74>
 800086e:	2320      	movs	r3, #32
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	0032      	movs	r2, r6
 8000874:	409e      	lsls	r6, r3
 8000876:	40c2      	lsrs	r2, r0
 8000878:	0030      	movs	r0, r6
 800087a:	1e43      	subs	r3, r0, #1
 800087c:	4198      	sbcs	r0, r3
 800087e:	4310      	orrs	r0, r2
 8000880:	e70c      	b.n	800069c <__aeabi_fsub+0x50>
 8000882:	2aff      	cmp	r2, #255	; 0xff
 8000884:	d0db      	beq.n	800083e <__aeabi_fsub+0x1f2>
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	4660      	mov	r0, ip
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	4318      	orrs	r0, r3
 800088e:	4684      	mov	ip, r0
 8000890:	2f1b      	cmp	r7, #27
 8000892:	dd56      	ble.n	8000942 <__aeabi_fsub+0x2f6>
 8000894:	2001      	movs	r0, #1
 8000896:	000c      	movs	r4, r1
 8000898:	0015      	movs	r5, r2
 800089a:	1a30      	subs	r0, r6, r0
 800089c:	e700      	b.n	80006a0 <__aeabi_fsub+0x54>
 800089e:	4663      	mov	r3, ip
 80008a0:	1b9f      	subs	r7, r3, r6
 80008a2:	017b      	lsls	r3, r7, #5
 80008a4:	d43d      	bmi.n	8000922 <__aeabi_fsub+0x2d6>
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fsub+0x260>
 80008aa:	e6fe      	b.n	80006aa <__aeabi_fsub+0x5e>
 80008ac:	2400      	movs	r4, #0
 80008ae:	2200      	movs	r2, #0
 80008b0:	2700      	movs	r7, #0
 80008b2:	e716      	b.n	80006e2 <__aeabi_fsub+0x96>
 80008b4:	0005      	movs	r5, r0
 80008b6:	e7af      	b.n	8000818 <__aeabi_fsub+0x1cc>
 80008b8:	0032      	movs	r2, r6
 80008ba:	4643      	mov	r3, r8
 80008bc:	4641      	mov	r1, r8
 80008be:	40da      	lsrs	r2, r3
 80008c0:	2320      	movs	r3, #32
 80008c2:	1a5b      	subs	r3, r3, r1
 80008c4:	409e      	lsls	r6, r3
 80008c6:	0030      	movs	r0, r6
 80008c8:	1e43      	subs	r3, r0, #1
 80008ca:	4198      	sbcs	r0, r3
 80008cc:	4310      	orrs	r0, r2
 80008ce:	e721      	b.n	8000714 <__aeabi_fsub+0xc8>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d1a7      	bne.n	8000824 <__aeabi_fsub+0x1d8>
 80008d4:	4663      	mov	r3, ip
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d059      	beq.n	800098e <__aeabi_fsub+0x342>
 80008da:	2200      	movs	r2, #0
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_fsub+0x296>
 80008e0:	e6ff      	b.n	80006e2 <__aeabi_fsub+0x96>
 80008e2:	0030      	movs	r0, r6
 80008e4:	4460      	add	r0, ip
 80008e6:	0143      	lsls	r3, r0, #5
 80008e8:	d592      	bpl.n	8000810 <__aeabi_fsub+0x1c4>
 80008ea:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <__aeabi_fsub+0x348>)
 80008ec:	3501      	adds	r5, #1
 80008ee:	4018      	ands	r0, r3
 80008f0:	e78e      	b.n	8000810 <__aeabi_fsub+0x1c4>
 80008f2:	4663      	mov	r3, ip
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d047      	beq.n	8000988 <__aeabi_fsub+0x33c>
 80008f8:	1e4b      	subs	r3, r1, #1
 80008fa:	2901      	cmp	r1, #1
 80008fc:	d015      	beq.n	800092a <__aeabi_fsub+0x2de>
 80008fe:	29ff      	cmp	r1, #255	; 0xff
 8000900:	d02b      	beq.n	800095a <__aeabi_fsub+0x30e>
 8000902:	0019      	movs	r1, r3
 8000904:	e74e      	b.n	80007a4 <__aeabi_fsub+0x158>
 8000906:	000c      	movs	r4, r1
 8000908:	464b      	mov	r3, r9
 800090a:	003d      	movs	r5, r7
 800090c:	e784      	b.n	8000818 <__aeabi_fsub+0x1cc>
 800090e:	4662      	mov	r2, ip
 8000910:	2a00      	cmp	r2, #0
 8000912:	d18b      	bne.n	800082c <__aeabi_fsub+0x1e0>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d192      	bne.n	800083e <__aeabi_fsub+0x1f2>
 8000918:	2780      	movs	r7, #128	; 0x80
 800091a:	2400      	movs	r4, #0
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	03ff      	lsls	r7, r7, #15
 8000920:	e6df      	b.n	80006e2 <__aeabi_fsub+0x96>
 8000922:	4663      	mov	r3, ip
 8000924:	000c      	movs	r4, r1
 8000926:	1af7      	subs	r7, r6, r3
 8000928:	e6bf      	b.n	80006aa <__aeabi_fsub+0x5e>
 800092a:	0030      	movs	r0, r6
 800092c:	4460      	add	r0, ip
 800092e:	2501      	movs	r5, #1
 8000930:	0143      	lsls	r3, r0, #5
 8000932:	d400      	bmi.n	8000936 <__aeabi_fsub+0x2ea>
 8000934:	e76c      	b.n	8000810 <__aeabi_fsub+0x1c4>
 8000936:	2502      	movs	r5, #2
 8000938:	e6f2      	b.n	8000720 <__aeabi_fsub+0xd4>
 800093a:	4663      	mov	r3, ip
 800093c:	2501      	movs	r5, #1
 800093e:	1b98      	subs	r0, r3, r6
 8000940:	e6ae      	b.n	80006a0 <__aeabi_fsub+0x54>
 8000942:	2320      	movs	r3, #32
 8000944:	4664      	mov	r4, ip
 8000946:	4660      	mov	r0, ip
 8000948:	40fc      	lsrs	r4, r7
 800094a:	1bdf      	subs	r7, r3, r7
 800094c:	40b8      	lsls	r0, r7
 800094e:	1e43      	subs	r3, r0, #1
 8000950:	4198      	sbcs	r0, r3
 8000952:	4320      	orrs	r0, r4
 8000954:	e79f      	b.n	8000896 <__aeabi_fsub+0x24a>
 8000956:	0005      	movs	r5, r0
 8000958:	e75e      	b.n	8000818 <__aeabi_fsub+0x1cc>
 800095a:	464b      	mov	r3, r9
 800095c:	e771      	b.n	8000842 <__aeabi_fsub+0x1f6>
 800095e:	2320      	movs	r3, #32
 8000960:	4665      	mov	r5, ip
 8000962:	4660      	mov	r0, ip
 8000964:	40cd      	lsrs	r5, r1
 8000966:	1a59      	subs	r1, r3, r1
 8000968:	4088      	lsls	r0, r1
 800096a:	1e43      	subs	r3, r0, #1
 800096c:	4198      	sbcs	r0, r3
 800096e:	4328      	orrs	r0, r5
 8000970:	e71c      	b.n	80007ac <__aeabi_fsub+0x160>
 8000972:	4663      	mov	r3, ip
 8000974:	000c      	movs	r4, r1
 8000976:	2501      	movs	r5, #1
 8000978:	1af0      	subs	r0, r6, r3
 800097a:	e691      	b.n	80006a0 <__aeabi_fsub+0x54>
 800097c:	2e00      	cmp	r6, #0
 800097e:	d095      	beq.n	80008ac <__aeabi_fsub+0x260>
 8000980:	000c      	movs	r4, r1
 8000982:	464f      	mov	r7, r9
 8000984:	2200      	movs	r2, #0
 8000986:	e6ac      	b.n	80006e2 <__aeabi_fsub+0x96>
 8000988:	464b      	mov	r3, r9
 800098a:	000d      	movs	r5, r1
 800098c:	e744      	b.n	8000818 <__aeabi_fsub+0x1cc>
 800098e:	464f      	mov	r7, r9
 8000990:	2200      	movs	r2, #0
 8000992:	e6a6      	b.n	80006e2 <__aeabi_fsub+0x96>
 8000994:	fbffffff 	.word	0xfbffffff
 8000998:	7dffffff 	.word	0x7dffffff
 800099c:	2800      	cmp	r0, #0
 800099e:	d000      	beq.n	80009a2 <__aeabi_fsub+0x356>
 80009a0:	e736      	b.n	8000810 <__aeabi_fsub+0x1c4>
 80009a2:	2400      	movs	r4, #0
 80009a4:	2700      	movs	r7, #0
 80009a6:	e69c      	b.n	80006e2 <__aeabi_fsub+0x96>

080009a8 <__aeabi_f2iz>:
 80009a8:	0241      	lsls	r1, r0, #9
 80009aa:	0042      	lsls	r2, r0, #1
 80009ac:	0fc3      	lsrs	r3, r0, #31
 80009ae:	0a49      	lsrs	r1, r1, #9
 80009b0:	2000      	movs	r0, #0
 80009b2:	0e12      	lsrs	r2, r2, #24
 80009b4:	2a7e      	cmp	r2, #126	; 0x7e
 80009b6:	dd03      	ble.n	80009c0 <__aeabi_f2iz+0x18>
 80009b8:	2a9d      	cmp	r2, #157	; 0x9d
 80009ba:	dd02      	ble.n	80009c2 <__aeabi_f2iz+0x1a>
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <__aeabi_f2iz+0x3c>)
 80009be:	1898      	adds	r0, r3, r2
 80009c0:	4770      	bx	lr
 80009c2:	2080      	movs	r0, #128	; 0x80
 80009c4:	0400      	lsls	r0, r0, #16
 80009c6:	4301      	orrs	r1, r0
 80009c8:	2a95      	cmp	r2, #149	; 0x95
 80009ca:	dc07      	bgt.n	80009dc <__aeabi_f2iz+0x34>
 80009cc:	2096      	movs	r0, #150	; 0x96
 80009ce:	1a82      	subs	r2, r0, r2
 80009d0:	40d1      	lsrs	r1, r2
 80009d2:	4248      	negs	r0, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f3      	bne.n	80009c0 <__aeabi_f2iz+0x18>
 80009d8:	0008      	movs	r0, r1
 80009da:	e7f1      	b.n	80009c0 <__aeabi_f2iz+0x18>
 80009dc:	3a96      	subs	r2, #150	; 0x96
 80009de:	4091      	lsls	r1, r2
 80009e0:	e7f7      	b.n	80009d2 <__aeabi_f2iz+0x2a>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	7fffffff 	.word	0x7fffffff

080009e8 <__aeabi_ui2f>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	1e05      	subs	r5, r0, #0
 80009ec:	d00e      	beq.n	8000a0c <__aeabi_ui2f+0x24>
 80009ee:	f000 f83d 	bl	8000a6c <__clzsi2>
 80009f2:	239e      	movs	r3, #158	; 0x9e
 80009f4:	0004      	movs	r4, r0
 80009f6:	1a1b      	subs	r3, r3, r0
 80009f8:	2b96      	cmp	r3, #150	; 0x96
 80009fa:	dc0c      	bgt.n	8000a16 <__aeabi_ui2f+0x2e>
 80009fc:	2808      	cmp	r0, #8
 80009fe:	dd01      	ble.n	8000a04 <__aeabi_ui2f+0x1c>
 8000a00:	3c08      	subs	r4, #8
 8000a02:	40a5      	lsls	r5, r4
 8000a04:	026d      	lsls	r5, r5, #9
 8000a06:	0a6d      	lsrs	r5, r5, #9
 8000a08:	b2d8      	uxtb	r0, r3
 8000a0a:	e001      	b.n	8000a10 <__aeabi_ui2f+0x28>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	2500      	movs	r5, #0
 8000a10:	05c0      	lsls	r0, r0, #23
 8000a12:	4328      	orrs	r0, r5
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	2b99      	cmp	r3, #153	; 0x99
 8000a18:	dd09      	ble.n	8000a2e <__aeabi_ui2f+0x46>
 8000a1a:	0002      	movs	r2, r0
 8000a1c:	0029      	movs	r1, r5
 8000a1e:	321b      	adds	r2, #27
 8000a20:	4091      	lsls	r1, r2
 8000a22:	1e4a      	subs	r2, r1, #1
 8000a24:	4191      	sbcs	r1, r2
 8000a26:	2205      	movs	r2, #5
 8000a28:	1a12      	subs	r2, r2, r0
 8000a2a:	40d5      	lsrs	r5, r2
 8000a2c:	430d      	orrs	r5, r1
 8000a2e:	2c05      	cmp	r4, #5
 8000a30:	dc12      	bgt.n	8000a58 <__aeabi_ui2f+0x70>
 8000a32:	0029      	movs	r1, r5
 8000a34:	4e0c      	ldr	r6, [pc, #48]	; (8000a68 <__aeabi_ui2f+0x80>)
 8000a36:	4031      	ands	r1, r6
 8000a38:	076a      	lsls	r2, r5, #29
 8000a3a:	d009      	beq.n	8000a50 <__aeabi_ui2f+0x68>
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	4028      	ands	r0, r5
 8000a40:	2804      	cmp	r0, #4
 8000a42:	d005      	beq.n	8000a50 <__aeabi_ui2f+0x68>
 8000a44:	3104      	adds	r1, #4
 8000a46:	014a      	lsls	r2, r1, #5
 8000a48:	d502      	bpl.n	8000a50 <__aeabi_ui2f+0x68>
 8000a4a:	239f      	movs	r3, #159	; 0x9f
 8000a4c:	4031      	ands	r1, r6
 8000a4e:	1b1b      	subs	r3, r3, r4
 8000a50:	0189      	lsls	r1, r1, #6
 8000a52:	0a4d      	lsrs	r5, r1, #9
 8000a54:	b2d8      	uxtb	r0, r3
 8000a56:	e7db      	b.n	8000a10 <__aeabi_ui2f+0x28>
 8000a58:	1f62      	subs	r2, r4, #5
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	0029      	movs	r1, r5
 8000a5e:	4e02      	ldr	r6, [pc, #8]	; (8000a68 <__aeabi_ui2f+0x80>)
 8000a60:	4031      	ands	r1, r6
 8000a62:	076a      	lsls	r2, r5, #29
 8000a64:	d0f4      	beq.n	8000a50 <__aeabi_ui2f+0x68>
 8000a66:	e7e9      	b.n	8000a3c <__aeabi_ui2f+0x54>
 8000a68:	fbffffff 	.word	0xfbffffff

08000a6c <__clzsi2>:
 8000a6c:	211c      	movs	r1, #28
 8000a6e:	2301      	movs	r3, #1
 8000a70:	041b      	lsls	r3, r3, #16
 8000a72:	4298      	cmp	r0, r3
 8000a74:	d301      	bcc.n	8000a7a <__clzsi2+0xe>
 8000a76:	0c00      	lsrs	r0, r0, #16
 8000a78:	3910      	subs	r1, #16
 8000a7a:	0a1b      	lsrs	r3, r3, #8
 8000a7c:	4298      	cmp	r0, r3
 8000a7e:	d301      	bcc.n	8000a84 <__clzsi2+0x18>
 8000a80:	0a00      	lsrs	r0, r0, #8
 8000a82:	3908      	subs	r1, #8
 8000a84:	091b      	lsrs	r3, r3, #4
 8000a86:	4298      	cmp	r0, r3
 8000a88:	d301      	bcc.n	8000a8e <__clzsi2+0x22>
 8000a8a:	0900      	lsrs	r0, r0, #4
 8000a8c:	3904      	subs	r1, #4
 8000a8e:	a202      	add	r2, pc, #8	; (adr r2, 8000a98 <__clzsi2+0x2c>)
 8000a90:	5c10      	ldrb	r0, [r2, r0]
 8000a92:	1840      	adds	r0, r0, r1
 8000a94:	4770      	bx	lr
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	02020304 	.word	0x02020304
 8000a9c:	01010101 	.word	0x01010101
	...

08000aa8 <sendSectorSpi>:
	}
	setTrack(track);
	setEnabled(0);
}

void sendSectorSpi(uint16_t length){
 8000aa8:	b510      	push	{r4, lr}
 8000aaa:	0003      	movs	r3, r0
	readStatus &= ~READSTATUS_DONE; // Reset status
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <sendSectorSpi+0x3c>)
 8000aae:	7802      	ldrb	r2, [r0, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	7002      	strb	r2, [r0, #0]
	writingData = 1;
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	; (8000ae8 <sendSectorSpi+0x40>)
 8000ab8:	7011      	strb	r1, [r2, #0]
	currentSectorBit = 0; // Reset
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <sendSectorSpi+0x44>)
 8000abc:	2100      	movs	r1, #0
 8000abe:	6011      	str	r1, [r2, #0]
	//uint32_t offset = decodeBufferOffset;
	uint32_t offset = (decodeBufferOffset + MFM_TRANSFERBUFFER) % (MFM_TRANSFERBUFFER*2); // The unused portion of the buffer
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <sendSectorSpi+0x48>)
 8000ac2:	6810      	ldr	r0, [r2, #0]
 8000ac4:	2280      	movs	r2, #128	; 0x80
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	4694      	mov	ip, r2
 8000aca:	4460      	add	r0, ip
 8000acc:	0580      	lsls	r0, r0, #22
 8000ace:	0d80      	lsrs	r0, r0, #22
	spiBeginTransmit((uint8_t*)&fddDecodedSector+offset,length < MFM_TRANSFERBUFFER ? length : MFM_TRANSFERBUFFER);
 8000ad0:	1c19      	adds	r1, r3, #0
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d900      	bls.n	8000ad8 <sendSectorSpi+0x30>
 8000ad6:	1c11      	adds	r1, r2, #0
 8000ad8:	b289      	uxth	r1, r1
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <sendSectorSpi+0x4c>)
 8000adc:	18c0      	adds	r0, r0, r3
 8000ade:	f000 f9df 	bl	8000ea0 <spiBeginTransmit>
}
 8000ae2:	bd10      	pop	{r4, pc}
 8000ae4:	20000552 	.word	0x20000552
 8000ae8:	20000553 	.word	0x20000553
 8000aec:	20000034 	.word	0x20000034
 8000af0:	20000038 	.word	0x20000038
 8000af4:	20000140 	.word	0x20000140

08000af8 <sendSpiData_done>:

void sendSpiData_done(){
	if(writingData){
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <sendSpiData_done+0x24>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00b      	beq.n	8000b18 <sendSpiData_done+0x20>
		writingData = 0;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <sendSpiData_done+0x24>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		decodeBufferOffset = (decodeBufferOffset + MFM_TRANSFERBUFFER) % (MFM_TRANSFERBUFFER*2); // The unused portion of the buffer
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <sendSpiData_done+0x28>)
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	0089      	lsls	r1, r1, #2
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4463      	add	r3, ip
 8000b12:	059b      	lsls	r3, r3, #22
 8000b14:	0d9b      	lsrs	r3, r3, #22
 8000b16:	6013      	str	r3, [r2, #0]
		//memset((uint8_t*)&fddDecodedSector+decodeBufferOffset,0,MFM_TRANSFERBUFFER);
	}
}
 8000b18:	4770      	bx	lr
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000553 	.word	0x20000553
 8000b20:	20000038 	.word	0x20000038

08000b24 <sendDataStatus>:

void sendDataStatus(){
 8000b24:	b500      	push	{lr}
 8000b26:	b083      	sub	sp, #12
	spi_cmd replycmd;
	replycmd.adr = getAddress();
 8000b28:	f000 f9a8 	bl	8000e7c <getAddress>
 8000b2c:	466b      	mov	r3, sp
 8000b2e:	7018      	strb	r0, [r3, #0]
	replycmd.cmd = CMD_DATASTATUSREPLY;
 8000b30:	2351      	movs	r3, #81	; 0x51
 8000b32:	466a      	mov	r2, sp
 8000b34:	7053      	strb	r3, [r2, #1]
	replycmd.val1 = readStatus;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <sendDataStatus+0x30>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	7093      	strb	r3, [r2, #2]
	replycmd.val2 = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	70d3      	strb	r3, [r2, #3]
	replycmd.val2_16 = MFM_TRANSFERBUFFER;// available buffer size
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	8093      	strh	r3, [r2, #4]
	spiBeginTransmit((uint8_t*)&replycmd,sizeof(replycmd));
 8000b46:	2106      	movs	r1, #6
 8000b48:	4668      	mov	r0, sp
 8000b4a:	f000 f9a9 	bl	8000ea0 <spiBeginTransmit>
}
 8000b4e:	b003      	add	sp, #12
 8000b50:	bd00      	pop	{pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000552 	.word	0x20000552

08000b58 <stopReadData>:
	DATATIM.Instance->CNT = 0;
	HAL_TIM_IC_Start_DMA(&DATATIM, TIM_CHANNEL_1,fddDataReadBuffer,MFM_BUFFER);
	fddDataState = fdddatastate_reading_data;
}

void stopReadData(){
 8000b58:	b510      	push	{r4, lr}
	indexcount = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <stopReadData+0x28>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
	fddDataState = fdddatastate_active;
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <stopReadData+0x2c>)
 8000b62:	3201      	adds	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop(&DATATIM);
 8000b66:	4c08      	ldr	r4, [pc, #32]	; (8000b88 <stopReadData+0x30>)
 8000b68:	0020      	movs	r0, r4
 8000b6a:	f003 f8c7 	bl	8003cfc <HAL_TIM_Base_Stop>
	HAL_TIM_IC_Stop_DMA(&DATATIM, TIM_CHANNEL_1);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	0020      	movs	r0, r4
 8000b72:	f003 ffef 	bl	8004b54 <HAL_TIM_IC_Stop_DMA>
	//setMotor(0);
	setEnabled(0);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f967 	bl	8000e4a <setEnabled>
}
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000548 	.word	0x20000548
 8000b84:	2000013c 	.word	0x2000013c
 8000b88:	200007e8 	.word	0x200007e8

08000b8c <handleData>:
void handleData(uint8_t complete){
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(fddDataState != fdddatastate_reading_data){
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <handleData+0xe0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d160      	bne.n	8000c58 <handleData+0xcc>
	uint32_t dataOffset = (DATATIM_DMA.Instance->CNDTR - MFM_BUFFER/2) % MFM_BUFFER; // Start position of half buffer
 8000b96:	4b36      	ldr	r3, [pc, #216]	; (8000c70 <handleData+0xe4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	3b40      	subs	r3, #64	; 0x40
 8000b9e:	207f      	movs	r0, #127	; 0x7f
 8000ba0:	4018      	ands	r0, r3
	for(uint32_t i = 0;i<MFM_BUFFER/2;i++){
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	e016      	b.n	8000bd4 <handleData+0x48>
		if(indexcount >= 2){ // Done. Should be done if index was hit 2 times
 8000ba6:	4933      	ldr	r1, [pc, #204]	; (8000c74 <handleData+0xe8>)
 8000ba8:	6809      	ldr	r1, [r1, #0]
 8000baa:	2901      	cmp	r1, #1
 8000bac:	d83e      	bhi.n	8000c2c <handleData+0xa0>
		}if(currentSectorBit >= MFM_TRANSFERBUFFER){
 8000bae:	4932      	ldr	r1, [pc, #200]	; (8000c78 <handleData+0xec>)
 8000bb0:	680d      	ldr	r5, [r1, #0]
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	0089      	lsls	r1, r1, #2
 8000bb6:	428d      	cmp	r5, r1
 8000bb8:	d24f      	bcs.n	8000c5a <handleData+0xce>
		fddDecodedSector[currentSectorBit++ + decodeBufferOffset] = *dataptr - *prevdataptr; // Save differences
 8000bba:	8812      	ldrh	r2, [r2, #0]
 8000bbc:	881d      	ldrh	r5, [r3, #0]
 8000bbe:	492e      	ldr	r1, [pc, #184]	; (8000c78 <handleData+0xec>)
 8000bc0:	680b      	ldr	r3, [r1, #0]
 8000bc2:	1c5e      	adds	r6, r3, #1
 8000bc4:	600e      	str	r6, [r1, #0]
 8000bc6:	492d      	ldr	r1, [pc, #180]	; (8000c7c <handleData+0xf0>)
 8000bc8:	6809      	ldr	r1, [r1, #0]
 8000bca:	185b      	adds	r3, r3, r1
 8000bcc:	1b52      	subs	r2, r2, r5
 8000bce:	492c      	ldr	r1, [pc, #176]	; (8000c80 <handleData+0xf4>)
 8000bd0:	54ca      	strb	r2, [r1, r3]
	for(uint32_t i = 0;i<MFM_BUFFER/2;i++){
 8000bd2:	3401      	adds	r4, #1
 8000bd4:	2c3f      	cmp	r4, #63	; 0x3f
 8000bd6:	d83f      	bhi.n	8000c58 <handleData+0xcc>
		uint16_t* dataptr = (uint16_t*)(fddDataReadBuffer+((dataOffset + i) % MFM_BUFFER));
 8000bd8:	1821      	adds	r1, r4, r0
 8000bda:	237f      	movs	r3, #127	; 0x7f
 8000bdc:	001a      	movs	r2, r3
 8000bde:	400a      	ands	r2, r1
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	4d28      	ldr	r5, [pc, #160]	; (8000c84 <handleData+0xf8>)
 8000be4:	1952      	adds	r2, r2, r5
		uint16_t* prevdataptr = (uint16_t*)(fddDataReadBuffer+((dataOffset + i -1) % MFM_BUFFER));
 8000be6:	3901      	subs	r1, #1
 8000be8:	400b      	ands	r3, r1
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	195b      	adds	r3, r3, r5
		if(indexHit && lastIndexTime >= *prevdataptr && lastIndexTime <= *dataptr){
 8000bee:	4926      	ldr	r1, [pc, #152]	; (8000c88 <handleData+0xfc>)
 8000bf0:	7809      	ldrb	r1, [r1, #0]
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d0d7      	beq.n	8000ba6 <handleData+0x1a>
 8000bf6:	881d      	ldrh	r5, [r3, #0]
 8000bf8:	4924      	ldr	r1, [pc, #144]	; (8000c8c <handleData+0x100>)
 8000bfa:	8809      	ldrh	r1, [r1, #0]
 8000bfc:	b289      	uxth	r1, r1
 8000bfe:	428d      	cmp	r5, r1
 8000c00:	d8d1      	bhi.n	8000ba6 <handleData+0x1a>
 8000c02:	8815      	ldrh	r5, [r2, #0]
 8000c04:	4921      	ldr	r1, [pc, #132]	; (8000c8c <handleData+0x100>)
 8000c06:	8809      	ldrh	r1, [r1, #0]
 8000c08:	b289      	uxth	r1, r1
 8000c0a:	428d      	cmp	r5, r1
 8000c0c:	d3cb      	bcc.n	8000ba6 <handleData+0x1a>
			indexHit = 0;
 8000c0e:	491e      	ldr	r1, [pc, #120]	; (8000c88 <handleData+0xfc>)
 8000c10:	2500      	movs	r5, #0
 8000c12:	700d      	strb	r5, [r1, #0]
			fddDecodedSector[currentSectorBit+decodeBufferOffset] = MFM_INDEX_MARKER; //insert index marker
 8000c14:	4918      	ldr	r1, [pc, #96]	; (8000c78 <handleData+0xec>)
 8000c16:	680d      	ldr	r5, [r1, #0]
 8000c18:	4e18      	ldr	r6, [pc, #96]	; (8000c7c <handleData+0xf0>)
 8000c1a:	6836      	ldr	r6, [r6, #0]
 8000c1c:	19ad      	adds	r5, r5, r6
 8000c1e:	4e18      	ldr	r6, [pc, #96]	; (8000c80 <handleData+0xf4>)
 8000c20:	27ff      	movs	r7, #255	; 0xff
 8000c22:	5577      	strb	r7, [r6, r5]
			currentSectorBit++;
 8000c24:	680d      	ldr	r5, [r1, #0]
 8000c26:	3501      	adds	r5, #1
 8000c28:	600d      	str	r5, [r1, #0]
 8000c2a:	e7bc      	b.n	8000ba6 <handleData+0x1a>
			stopReadData();
 8000c2c:	f7ff ff94 	bl	8000b58 <stopReadData>
			readStatus |= READSTATUS_TRACKDONE;
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <handleData+0x104>)
 8000c32:	7813      	ldrb	r3, [r2, #0]
 8000c34:	2102      	movs	r1, #2
 8000c36:	430b      	orrs	r3, r1
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	7013      	strb	r3, [r2, #0]
			for(;i<MFM_BUFFER/2;i++){
 8000c3c:	e00a      	b.n	8000c54 <handleData+0xc8>
				fddDecodedSector[currentSectorBit++ + decodeBufferOffset] = 0;
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <handleData+0xec>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	1c59      	adds	r1, r3, #1
 8000c44:	6011      	str	r1, [r2, #0]
 8000c46:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <handleData+0xf0>)
 8000c48:	6812      	ldr	r2, [r2, #0]
 8000c4a:	189b      	adds	r3, r3, r2
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <handleData+0xf4>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	54d1      	strb	r1, [r2, r3]
			for(;i<MFM_BUFFER/2;i++){
 8000c52:	3401      	adds	r4, #1
 8000c54:	2c3f      	cmp	r4, #63	; 0x3f
 8000c56:	d9f2      	bls.n	8000c3e <handleData+0xb2>
}
 8000c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(readStatus & READSTATUS_DONE){ // We are done and no transmission was finished
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <handleData+0x104>)
 8000c5c:	7813      	ldrb	r3, [r2, #0]
			readStatus |= READSTATUS_DONE;
 8000c5e:	7813      	ldrb	r3, [r2, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	430b      	orrs	r3, r1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	7013      	strb	r3, [r2, #0]
			break;
 8000c68:	e7f6      	b.n	8000c58 <handleData+0xcc>
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	2000013c 	.word	0x2000013c
 8000c70:	20000690 	.word	0x20000690
 8000c74:	20000548 	.word	0x20000548
 8000c78:	20000034 	.word	0x20000034
 8000c7c:	20000038 	.word	0x20000038
 8000c80:	20000140 	.word	0x20000140
 8000c84:	2000003c 	.word	0x2000003c
 8000c88:	20000542 	.word	0x20000542
 8000c8c:	20000550 	.word	0x20000550
 8000c90:	20000552 	.word	0x20000552

08000c94 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 8000c94:	b510      	push	{r4, lr}
	if(htim == &DATATIM && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_TIM_IC_CaptureCallback+0x18>)
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d000      	beq.n	8000c9e <HAL_TIM_IC_CaptureCallback+0xa>
}
 8000c9c:	bd10      	pop	{r4, pc}
	if(htim == &DATATIM && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c9e:	7f03      	ldrb	r3, [r0, #28]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d1fb      	bne.n	8000c9c <HAL_TIM_IC_CaptureCallback+0x8>
		handleData(0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ff71 	bl	8000b8c <handleData>
}
 8000caa:	e7f7      	b.n	8000c9c <HAL_TIM_IC_CaptureCallback+0x8>
 8000cac:	200007e8 	.word	0x200007e8

08000cb0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef* htim){
 8000cb0:	b510      	push	{r4, lr}
	if(htim == &DATATIM && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000cb2:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x18>)
 8000cb4:	4298      	cmp	r0, r3
 8000cb6:	d000      	beq.n	8000cba <HAL_TIM_IC_CaptureHalfCpltCallback+0xa>
}
 8000cb8:	bd10      	pop	{r4, pc}
	if(htim == &DATATIM && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000cba:	7f03      	ldrb	r3, [r0, #28]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d1fb      	bne.n	8000cb8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x8>
		handleData(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff ff63 	bl	8000b8c <handleData>
}
 8000cc6:	e7f7      	b.n	8000cb8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x8>
 8000cc8:	200007e8 	.word	0x200007e8

08000ccc <handleIndex>:
void handleIndex(){
 8000ccc:	b510      	push	{r4, lr}
	currentSector = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <handleIndex+0x48>)
 8000cd2:	7013      	strb	r3, [r2, #0]
	currentSectorBit = 0;
 8000cd4:	4a10      	ldr	r2, [pc, #64]	; (8000d18 <handleIndex+0x4c>)
 8000cd6:	6013      	str	r3, [r2, #0]
	indexPeriod = (DATATIM.Instance->CNT - lastIndexTime) / (MFM_TIM_CNTPERUS);
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <handleIndex+0x50>)
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <handleIndex+0x54>)
 8000ce0:	8810      	ldrh	r0, [r2, #0]
 8000ce2:	1a1b      	subs	r3, r3, r0
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	480f      	ldr	r0, [pc, #60]	; (8000d24 <handleIndex+0x58>)
 8000ce8:	6003      	str	r3, [r0, #0]
	lastIndexTime = DATATIM.Instance->CNT;
 8000cea:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	8013      	strh	r3, [r2, #0]
	indexHit = 1;
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <handleIndex+0x5c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
	if(fddDataState == fdddatastate_reading_data){
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <handleIndex+0x60>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d000      	beq.n	8000d00 <handleIndex+0x34>
}
 8000cfe:	bd10      	pop	{r4, pc}
		if(indexcount++ > 5){
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <handleIndex+0x64>)
 8000d02:	6813      	ldr	r3, [r2, #0]
 8000d04:	1c59      	adds	r1, r3, #1
 8000d06:	6011      	str	r1, [r2, #0]
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d9f8      	bls.n	8000cfe <handleIndex+0x32>
			stopReadData();
 8000d0c:	f7ff ff24 	bl	8000b58 <stopReadData>
}
 8000d10:	e7f5      	b.n	8000cfe <handleIndex+0x32>
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000030 	.word	0x20000030
 8000d18:	20000034 	.word	0x20000034
 8000d1c:	200007e8 	.word	0x200007e8
 8000d20:	20000550 	.word	0x20000550
 8000d24:	20000544 	.word	0x20000544
 8000d28:	20000542 	.word	0x20000542
 8000d2c:	2000013c 	.word	0x2000013c
 8000d30:	20000548 	.word	0x20000548

08000d34 <setMotor>:

/**
 * Starts or stops the spindle motor
 */
void setMotor(uint8_t state){
 8000d34:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(FDD_MOT_GPIO_Port, FDD_MOT_Pin, state ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d36:	4243      	negs	r3, r0
 8000d38:	4158      	adcs	r0, r3
 8000d3a:	b2c2      	uxtb	r2, r0
 8000d3c:	20a0      	movs	r0, #160	; 0xa0
 8000d3e:	2104      	movs	r1, #4
 8000d40:	05c0      	lsls	r0, r0, #23
 8000d42:	f001 fb9a 	bl	800247a <HAL_GPIO_WritePin>
}
 8000d46:	bd10      	pop	{r4, pc}

08000d48 <beginReadData>:
void beginReadData(){
 8000d48:	b510      	push	{r4, lr}
	indexHit = 0;
 8000d4a:	2400      	movs	r4, #0
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <beginReadData+0x44>)
 8000d4e:	701c      	strb	r4, [r3, #0]
	lastIndexTime = 0;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <beginReadData+0x48>)
 8000d52:	801c      	strh	r4, [r3, #0]
	indexcount = 0;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <beginReadData+0x4c>)
 8000d56:	601c      	str	r4, [r3, #0]
	currentSectorBit = 0;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <beginReadData+0x50>)
 8000d5a:	601c      	str	r4, [r3, #0]
	lastDataTime = 0;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <beginReadData+0x54>)
 8000d5e:	601c      	str	r4, [r3, #0]
	readStatus = 0; // Reset status
 8000d60:	2200      	movs	r2, #0
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <beginReadData+0x58>)
 8000d64:	701a      	strb	r2, [r3, #0]
	setEnabled(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 f86f 	bl	8000e4a <setEnabled>
	setMotor(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f7ff ffe1 	bl	8000d34 <setMotor>
	DATATIM.Instance->CNT = 0;
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <beginReadData+0x5c>)
 8000d74:	6803      	ldr	r3, [r0, #0]
 8000d76:	625c      	str	r4, [r3, #36]	; 0x24
	HAL_TIM_IC_Start_DMA(&DATATIM, TIM_CHANNEL_1,fddDataReadBuffer,MFM_BUFFER);
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <beginReadData+0x60>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f003 fdb5 	bl	80048ec <HAL_TIM_IC_Start_DMA>
	fddDataState = fdddatastate_reading_data;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <beginReadData+0x64>)
 8000d84:	2202      	movs	r2, #2
 8000d86:	701a      	strb	r2, [r3, #0]
}
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000542 	.word	0x20000542
 8000d90:	20000550 	.word	0x20000550
 8000d94:	20000548 	.word	0x20000548
 8000d98:	20000034 	.word	0x20000034
 8000d9c:	2000054c 	.word	0x2000054c
 8000da0:	20000552 	.word	0x20000552
 8000da4:	200007e8 	.word	0x200007e8
 8000da8:	2000003c 	.word	0x2000003c
 8000dac:	2000013c 	.word	0x2000013c

08000db0 <enableDataMode>:

void enableDataMode(uint8_t enable){
 8000db0:	b510      	push	{r4, lr}
	if(enable && fddDataState == fdddatastate_none){
 8000db2:	2800      	cmp	r0, #0
 8000db4:	d003      	beq.n	8000dbe <enableDataMode+0xe>
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <enableDataMode+0x28>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d000      	beq.n	8000dc0 <enableDataMode+0x10>
		HAL_TIM_Base_Start_IT(&DATATIM);
//		HAL_TIM_IC_Start_IT(&DATATIM, TIM_CHANNEL_1);
		fddDataState = fdddatastate_active;
		gpioStepPin();
	}
}
 8000dbe:	bd10      	pop	{r4, pc}
		homeHeads();
 8000dc0:	f000 fa02 	bl	80011c8 <homeHeads>
		HAL_TIM_Base_Start_IT(&DATATIM);
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <enableDataMode+0x2c>)
 8000dc6:	f002 ffaf 	bl	8003d28 <HAL_TIM_Base_Start_IT>
		fddDataState = fdddatastate_active;
 8000dca:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <enableDataMode+0x28>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
		gpioStepPin();
 8000dd0:	f000 f8f6 	bl	8000fc0 <gpioStepPin>
}
 8000dd4:	e7f3      	b.n	8000dbe <enableDataMode+0xe>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	2000013c 	.word	0x2000013c
 8000ddc:	200007e8 	.word	0x200007e8

08000de0 <setTrack>:
	return track;
}

void setTrack(uint16_t track){

	DIRTIM.Instance->CNT = track;
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <setTrack+0x8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6258      	str	r0, [r3, #36]	; 0x24
}
 8000de6:	4770      	bx	lr
 8000de8:	20000834 	.word	0x20000834

08000dec <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
//	if(GPIO_Pin == NSS_Pin){
//		setSSI(HAL_GPIO_ReadPin(NSS_GPIO_Port, NSS_Pin),&hspi1);
//	}
	if(GPIO_Pin == ADR_IN_Pin){
 8000dec:	2880      	cmp	r0, #128	; 0x80
 8000dee:	d000      	beq.n	8000df2 <HAL_GPIO_EXTI_Rising_Callback+0x6>
		if(state == state_findaddress)
			address++;
	}
}
 8000df0:	4770      	bx	lr
		if(state == state_findaddress)
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_GPIO_EXTI_Rising_Callback+0x1c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d1fa      	bne.n	8000df0 <HAL_GPIO_EXTI_Rising_Callback+0x4>
			address++;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8000dfc:	7813      	ldrb	r3, [r2, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	7013      	strb	r3, [r2, #0]
}
 8000e04:	e7f4      	b.n	8000df0 <HAL_GPIO_EXTI_Rising_Callback+0x4>
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000554 	.word	0x20000554

08000e10 <HAL_GPIO_EXTI_Falling_Callback>:
// React to address id pin
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000e10:	b510      	push	{r4, lr}
//	if(GPIO_Pin == NSS_Pin){
//		setSSI(HAL_GPIO_ReadPin(NSS_GPIO_Port, NSS_Pin),&hspi1);
//	}
	if(GPIO_Pin == FDD_TRK0_Pin && resetCountOnTrk0){
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d004      	beq.n	8000e24 <HAL_GPIO_EXTI_Falling_Callback+0x14>
		track0_fired  = 1;
		// Reset timer
		setTrack(0);
	}else if(GPIO_Pin == IDXPIN){
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d00b      	beq.n	8000e3a <HAL_GPIO_EXTI_Falling_Callback+0x2a>
		handleIndex();
	}


}
 8000e22:	bd10      	pop	{r4, pc}
	if(GPIO_Pin == FDD_TRK0_Pin && resetCountOnTrk0){
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f6      	beq.n	8000e1a <HAL_GPIO_EXTI_Falling_Callback+0xa>
		track0_fired  = 1;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_GPIO_EXTI_Falling_Callback+0x34>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
		setTrack(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ffd4 	bl	8000de0 <setTrack>
 8000e38:	e7f3      	b.n	8000e22 <HAL_GPIO_EXTI_Falling_Callback+0x12>
		handleIndex();
 8000e3a:	f7ff ff47 	bl	8000ccc <handleIndex>
}
 8000e3e:	e7f0      	b.n	8000e22 <HAL_GPIO_EXTI_Falling_Callback+0x12>
 8000e40:	2000056a 	.word	0x2000056a
 8000e44:	20000579 	.word	0x20000579

08000e48 <HAL_TIM_PeriodElapsedCallback>:
	state = state_normal;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){

}
 8000e48:	4770      	bx	lr

08000e4a <setEnabled>:
		hspi1.Instance->CR1 |= SPI_CR1_SSI;
	else
		hspi1.Instance->CR1 &= ~SPI_CR1_SSI;
}

void setEnabled(uint8_t enabled){
 8000e4a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, enabled ? GPIO_PIN_RESET : GPIO_PIN_SET); // Enable drive
 8000e4c:	4243      	negs	r3, r0
 8000e4e:	4158      	adcs	r0, r3
 8000e50:	b2c2      	uxtb	r2, r0
 8000e52:	20a0      	movs	r0, #160	; 0xa0
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	05c0      	lsls	r0, r0, #23
 8000e58:	f001 fb0f 	bl	800247a <HAL_GPIO_WritePin>
}
 8000e5c:	bd10      	pop	{r4, pc}
	...

08000e60 <setSteps>:
	reinitTimerStepPin();
	resetCountOnTrk0 = 0;
}

void setSteps(uint32_t steps){
	stepnum = steps;
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <setSteps+0x14>)
 8000e62:	6018      	str	r0, [r3, #0]
	DIRTIM.Instance->CCR1 = steps;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <setSteps+0x18>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6358      	str	r0, [r3, #52]	; 0x34
	DIRTIM.Instance->ARR = (steps*2)-1;
 8000e6a:	0040      	lsls	r0, r0, #1
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8000e70:	4770      	bx	lr
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	20000004 	.word	0x20000004
 8000e78:	20000834 	.word	0x20000834

08000e7c <getAddress>:

uint8_t getAddress(){
	return address;
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <getAddress+0x8>)
 8000e7e:	7818      	ldrb	r0, [r3, #0]
 8000e80:	b2c0      	uxtb	r0, r0
}
 8000e82:	4770      	bx	lr
 8000e84:	20000554 	.word	0x20000554

08000e88 <spiBeginReceive>:
	}


}

HAL_StatusTypeDef spiBeginReceive(){
 8000e88:	b510      	push	{r4, lr}
	return HAL_SPI_Receive_DMA(&hspi1,(uint8_t*)&rxbuf,PACKETSIZE);
 8000e8a:	2206      	movs	r2, #6
 8000e8c:	4902      	ldr	r1, [pc, #8]	; (8000e98 <spiBeginReceive+0x10>)
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <spiBeginReceive+0x14>)
 8000e90:	f002 fab2 	bl	80033f8 <HAL_SPI_Receive_DMA>
}
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	2000056c 	.word	0x2000056c
 8000e9c:	200006ec 	.word	0x200006ec

08000ea0 <spiBeginTransmit>:

HAL_StatusTypeDef spiBeginTransmit(uint8_t *pData, uint16_t Size){
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	000a      	movs	r2, r1
	return HAL_SPI_Transmit_DMA(&hspi1,pData,Size); // Size + CRC
 8000ea4:	0001      	movs	r1, r0
 8000ea6:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <spiBeginTransmit+0x10>)
 8000ea8:	f002 f8d2 	bl	8003050 <HAL_SPI_Transmit_DMA>
}
 8000eac:	bd10      	pop	{r4, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	200006ec 	.word	0x200006ec

08000eb4 <executeCmd_IT>:
void executeCmd_IT(spi_cmd* cmd){
 8000eb4:	b510      	push	{r4, lr}
	state = state_normal; // reset state if command in here is found
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <executeCmd_IT+0x68>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
	switch(cmd->cmd){
 8000ebc:	7843      	ldrb	r3, [r0, #1]
 8000ebe:	2bda      	cmp	r3, #218	; 0xda
 8000ec0:	d010      	beq.n	8000ee4 <executeCmd_IT+0x30>
 8000ec2:	2bde      	cmp	r3, #222	; 0xde
 8000ec4:	d01a      	beq.n	8000efc <executeCmd_IT+0x48>
 8000ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec8:	d003      	beq.n	8000ed2 <executeCmd_IT+0x1e>
			state = state_execute_cmd; // Command not found. reset state to execute outsite interrupt
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <executeCmd_IT+0x68>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
}
 8000ed0:	e007      	b.n	8000ee2 <executeCmd_IT+0x2e>
			replycmd.adr = address;
 8000ed2:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <executeCmd_IT+0x6c>)
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <executeCmd_IT+0x70>)
 8000ed8:	7002      	strb	r2, [r0, #0]
			replycmd.cmd = cmd->cmd;
 8000eda:	7043      	strb	r3, [r0, #1]
			spiBeginTransmit((uint8_t*)&replycmd,sizeof(replycmd));
 8000edc:	2106      	movs	r1, #6
 8000ede:	f7ff ffdf 	bl	8000ea0 <spiBeginTransmit>
}
 8000ee2:	bd10      	pop	{r4, pc}
			replycmd.adr = address;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <executeCmd_IT+0x6c>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	480e      	ldr	r0, [pc, #56]	; (8000f24 <executeCmd_IT+0x70>)
 8000eea:	7002      	strb	r2, [r0, #0]
			replycmd.cmd = CMD_REPLY_ADR;
 8000eec:	22da      	movs	r2, #218	; 0xda
 8000eee:	7042      	strb	r2, [r0, #1]
			replycmd.val1 = address;
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	7083      	strb	r3, [r0, #2]
			spiBeginTransmit((uint8_t*)&replycmd,sizeof(replycmd));
 8000ef4:	2106      	movs	r1, #6
 8000ef6:	f7ff ffd3 	bl	8000ea0 <spiBeginTransmit>
		break;
 8000efa:	e7f2      	b.n	8000ee2 <executeCmd_IT+0x2e>
			replycmd.adr = address;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <executeCmd_IT+0x6c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <executeCmd_IT+0x70>)
 8000f02:	7003      	strb	r3, [r0, #0]
			replycmd.cmd = CMD_REPLY_SPIERR;
 8000f04:	23de      	movs	r3, #222	; 0xde
 8000f06:	7043      	strb	r3, [r0, #1]
			replycmd.val1_32 = spiErrors;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <executeCmd_IT+0x74>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	8042      	strh	r2, [r0, #2]
 8000f0e:	885b      	ldrh	r3, [r3, #2]
 8000f10:	8083      	strh	r3, [r0, #4]
			spiBeginTransmit((uint8_t*)&replycmd,sizeof(replycmd));
 8000f12:	2106      	movs	r1, #6
 8000f14:	f7ff ffc4 	bl	8000ea0 <spiBeginTransmit>
		break;
 8000f18:	e7e3      	b.n	8000ee2 <executeCmd_IT+0x2e>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000554 	.word	0x20000554
 8000f24:	20000564 	.word	0x20000564
 8000f28:	20000574 	.word	0x20000574

08000f2c <HAL_SPI_TxCpltCallback>:
	initializeComms();
	// Toggle led
	HAL_GPIO_TogglePin(FDD_HEAD_GPIO_Port, FDD_HEAD_Pin);
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000f2c:	b510      	push	{r4, lr}
	if(hspi == &hspi1){
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_SPI_TxCpltCallback+0x14>)
 8000f30:	4283      	cmp	r3, r0
 8000f32:	d000      	beq.n	8000f36 <HAL_SPI_TxCpltCallback+0xa>
		spiBeginReceive();
		sendSpiData_done();
	}
}
 8000f34:	bd10      	pop	{r4, pc}
		spiBeginReceive();
 8000f36:	f7ff ffa7 	bl	8000e88 <spiBeginReceive>
		sendSpiData_done();
 8000f3a:	f7ff fddd 	bl	8000af8 <sendSpiData_done>
}
 8000f3e:	e7f9      	b.n	8000f34 <HAL_SPI_TxCpltCallback+0x8>
 8000f40:	200006ec 	.word	0x200006ec

08000f44 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8000f44:	b510      	push	{r4, lr}

	if(hspi != &hspi1){
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_SPI_RxCpltCallback+0x68>)
 8000f48:	4283      	cmp	r3, r0
 8000f4a:	d000      	beq.n	8000f4e <HAL_SPI_RxCpltCallback+0xa>
	if(!transmitted)
		if(spiBeginReceive() != HAL_OK){

		}
	//setSSI(1,&hspi1);
}
 8000f4c:	bd10      	pop	{r4, pc}
	if((rxbuf[0] == address || rxbuf[0] == 0xff) && state == state_normal){
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SPI_RxCpltCallback+0x6c>)
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_SPI_RxCpltCallback+0x70>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d00e      	beq.n	8000f7c <HAL_SPI_RxCpltCallback+0x38>
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_SPI_RxCpltCallback+0x6c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2bff      	cmp	r3, #255	; 0xff
 8000f66:	d009      	beq.n	8000f7c <HAL_SPI_RxCpltCallback+0x38>
	uint8_t transmitted = 0;
 8000f68:	2400      	movs	r4, #0
	if(state == state_execute_cmd){
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_SPI_RxCpltCallback+0x74>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d013      	beq.n	8000f9a <HAL_SPI_RxCpltCallback+0x56>
	if(!transmitted)
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d1ea      	bne.n	8000f4c <HAL_SPI_RxCpltCallback+0x8>
		if(spiBeginReceive() != HAL_OK){
 8000f76:	f7ff ff87 	bl	8000e88 <spiBeginReceive>
		}
 8000f7a:	e7e7      	b.n	8000f4c <HAL_SPI_RxCpltCallback+0x8>
	if((rxbuf[0] == address || rxbuf[0] == 0xff) && state == state_normal){
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_RxCpltCallback+0x74>)
 8000f7e:	781c      	ldrb	r4, [r3, #0]
 8000f80:	2c01      	cmp	r4, #1
 8000f82:	d001      	beq.n	8000f88 <HAL_SPI_RxCpltCallback+0x44>
	uint8_t transmitted = 0;
 8000f84:	2400      	movs	r4, #0
 8000f86:	e7f0      	b.n	8000f6a <HAL_SPI_RxCpltCallback+0x26>
		state = state_execute_cmd;
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
		if(rxbuf[1] & CMDMASK_READ){
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_SPI_RxCpltCallback+0x6c>)
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dbe9      	blt.n	8000f6a <HAL_SPI_RxCpltCallback+0x26>
	uint8_t transmitted = 0;
 8000f96:	2400      	movs	r4, #0
 8000f98:	e7e7      	b.n	8000f6a <HAL_SPI_RxCpltCallback+0x26>
		memcpy(&nextcmd,rxbuf,sizeof(nextcmd)); // Buffer command. Maybe disable interrupts during copy
 8000f9a:	4808      	ldr	r0, [pc, #32]	; (8000fbc <HAL_SPI_RxCpltCallback+0x78>)
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <HAL_SPI_RxCpltCallback+0x6c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	6002      	str	r2, [r0, #0]
 8000fa2:	889b      	ldrh	r3, [r3, #4]
 8000fa4:	8083      	strh	r3, [r0, #4]
		executeCmd_IT(&nextcmd);
 8000fa6:	f7ff ff85 	bl	8000eb4 <executeCmd_IT>
 8000faa:	e7e2      	b.n	8000f72 <HAL_SPI_RxCpltCallback+0x2e>
 8000fac:	200006ec 	.word	0x200006ec
 8000fb0:	2000056c 	.word	0x2000056c
 8000fb4:	20000554 	.word	0x20000554
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	2000055c 	.word	0x2000055c

08000fc0 <gpioStepPin>:

// Reconfigures step pin as output gpio
void gpioStepPin(){
 8000fc0:	b500      	push	{lr}
 8000fc2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	2214      	movs	r2, #20
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	a801      	add	r0, sp, #4
 8000fca:	f003 ff15 	bl	8004df8 <memset>
	GPIO_InitStruct.Pin = FDD_STEP_Pin;
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	3bff      	subs	r3, #255	; 0xff
 8000fd6:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	3301      	adds	r3, #1
 8000fda:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(FDD_STEP_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	20a0      	movs	r0, #160	; 0xa0
 8000fde:	a901      	add	r1, sp, #4
 8000fe0:	05c0      	lsls	r0, r0, #23
 8000fe2:	f001 f905 	bl	80021f0 <HAL_GPIO_Init>
}
 8000fe6:	b007      	add	sp, #28
 8000fe8:	bd00      	pop	{pc}

08000fea <reinitTimerStepPin>:

void reinitTimerStepPin(){
 8000fea:	b510      	push	{r4, lr}
	HAL_GPIO_DeInit(FDD_STEP_GPIO_Port, FDD_STEP_Pin);
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	20a0      	movs	r0, #160	; 0xa0
 8000ff0:	0049      	lsls	r1, r1, #1
 8000ff2:	05c0      	lsls	r0, r0, #23
 8000ff4:	f001 f9b8 	bl	8002368 <HAL_GPIO_DeInit>
	MX_TIM1_Init();
 8000ff8:	f000 fbc8 	bl	800178c <MX_TIM1_Init>
}
 8000ffc:	bd10      	pop	{r4, pc}
	...

08001000 <setPulseFreq>:

// Period in
void setPulseFreq(float freq){
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	1c04      	adds	r4, r0, #0

	if(freq == 0){
 8001004:	2100      	movs	r1, #0
 8001006:	f7ff f913 	bl	8000230 <__aeabi_fcmpeq>
 800100a:	2800      	cmp	r0, #0
 800100c:	d00d      	beq.n	800102a <setPulseFreq+0x2a>
		//STEPTIM.Instance->CR1 = 0;
		HAL_TIM_PWM_Stop(&STEPTIM, TIM_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	4820      	ldr	r0, [pc, #128]	; (8001094 <setPulseFreq+0x94>)
 8001012:	f003 fc11 	bl	8004838 <HAL_TIM_PWM_Stop>
		stepState = 0;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <setPulseFreq+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800101c:	20a0      	movs	r0, #160	; 0xa0
 800101e:	3201      	adds	r2, #1
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	05c0      	lsls	r0, r0, #23
 8001024:	f001 fa29 	bl	800247a <HAL_GPIO_WritePin>
			stepState = 1;
			HAL_TIM_PWM_Start(&STEPTIM, TIM_CHANNEL_1);
		}
	}

}
 8001028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 800102a:	20a0      	movs	r0, #160	; 0xa0
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	05c0      	lsls	r0, r0, #23
 8001032:	f001 fa22 	bl	800247a <HAL_GPIO_WritePin>
		uint32_t arr_raw = (masterclockfreq/freq);
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <setPulseFreq+0x9c>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f7ff fcd5 	bl	80009e8 <__aeabi_ui2f>
 800103e:	1c21      	adds	r1, r4, #0
 8001040:	f7ff f93c 	bl	80002bc <__aeabi_fdiv>
 8001044:	f7ff f922 	bl	800028c <__aeabi_f2uiz>
 8001048:	0004      	movs	r4, r0
		uint32_t prescaler = arr_raw / 0xffff;
 800104a:	4915      	ldr	r1, [pc, #84]	; (80010a0 <setPulseFreq+0xa0>)
 800104c:	f7ff f858 	bl	8000100 <__udivsi3>
 8001050:	0005      	movs	r5, r0
		uint32_t arr = arr_raw / (prescaler + 1);
 8001052:	1c47      	adds	r7, r0, #1
 8001054:	0039      	movs	r1, r7
 8001056:	0020      	movs	r0, r4
 8001058:	f7ff f852 	bl	8000100 <__udivsi3>
 800105c:	0004      	movs	r4, r0
		STEPTIM.Instance->PSC = prescaler;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <setPulseFreq+0x94>)
 8001060:	681e      	ldr	r6, [r3, #0]
 8001062:	62b5      	str	r5, [r6, #40]	; 0x28
		STEPTIM.Instance->ARR = arr;
 8001064:	62f0      	str	r0, [r6, #44]	; 0x2c
		uint32_t width = (PULSEWIDTH / (prescaler + 1) ) + 1;
 8001066:	0039      	movs	r1, r7
 8001068:	20fa      	movs	r0, #250	; 0xfa
 800106a:	00c0      	lsls	r0, r0, #3
 800106c:	f7ff f848 	bl	8000100 <__udivsi3>
 8001070:	3001      	adds	r0, #1
		STEPTIM.Instance->CCR1 = width < arr ? width : (arr / 2) + 1;
 8001072:	4284      	cmp	r4, r0
 8001074:	d801      	bhi.n	800107a <setPulseFreq+0x7a>
 8001076:	0860      	lsrs	r0, r4, #1
 8001078:	3001      	adds	r0, #1
 800107a:	6370      	str	r0, [r6, #52]	; 0x34
		if(!stepState){
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <setPulseFreq+0x98>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1d1      	bne.n	8001028 <setPulseFreq+0x28>
			stepState = 1;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <setPulseFreq+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&STEPTIM, TIM_CHANNEL_1);
 800108a:	2100      	movs	r1, #0
 800108c:	4801      	ldr	r0, [pc, #4]	; (8001094 <setPulseFreq+0x94>)
 800108e:	f003 fb3d 	bl	800470c <HAL_TIM_PWM_Start>
}
 8001092:	e7c9      	b.n	8001028 <setPulseFreq+0x28>
 8001094:	20000750 	.word	0x20000750
 8001098:	20000578 	.word	0x20000578
 800109c:	20000558 	.word	0x20000558
 80010a0:	0000ffff 	.word	0x0000ffff

080010a4 <findAddress>:
void findAddress(){
 80010a4:	b570      	push	{r4, r5, r6, lr}
	state = state_findaddress;
 80010a6:	4b45      	ldr	r3, [pc, #276]	; (80011bc <findAddress+0x118>)
 80010a8:	2203      	movs	r2, #3
 80010aa:	701a      	strb	r2, [r3, #0]
	setPulseFreq(0);
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff ffa7 	bl	8001000 <setPulseFreq>
	address = 0; // reset
 80010b2:	4d43      	ldr	r5, [pc, #268]	; (80011c0 <findAddress+0x11c>)
 80010b4:	2300      	movs	r3, #0
 80010b6:	702b      	strb	r3, [r5, #0]
	HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_RESET);
 80010b8:	4c42      	ldr	r4, [pc, #264]	; (80011c4 <findAddress+0x120>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	0020      	movs	r0, r4
 80010c0:	f001 f9db 	bl	800247a <HAL_GPIO_WritePin>
	HAL_Delay(10); // Initial wait to make sure all controllers are in this state
 80010c4:	200a      	movs	r0, #10
 80010c6:	f000 fe89 	bl	8001ddc <HAL_Delay>
	HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	0020      	movs	r0, r4
 80010d0:	f001 f9d3 	bl	800247a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fe81 	bl	8001ddc <HAL_Delay>
	HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	0020      	movs	r0, r4
 80010e0:	f001 f9cb 	bl	800247a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 fe79 	bl	8001ddc <HAL_Delay>
	uint8_t lastaddr = address;
 80010ea:	782d      	ldrb	r5, [r5, #0]
 80010ec:	b2ed      	uxtb	r5, r5
	while(timeout-- && !found_address){
 80010ee:	e007      	b.n	8001100 <findAddress+0x5c>
		if(lastaddr == address && HAL_GPIO_ReadPin(ADR_IN_GPIO_Port, ADR_IN_Pin))
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <findAddress+0x11c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	d011      	beq.n	800111e <findAddress+0x7a>
		lastaddr = address;
 80010fa:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <findAddress+0x11c>)
 80010fc:	781d      	ldrb	r5, [r3, #0]
 80010fe:	b2ed      	uxtb	r5, r5
		uint8_t timeout2 = 0xff;
 8001100:	22ff      	movs	r2, #255	; 0xff
		while(timeout2--){
 8001102:	1e54      	subs	r4, r2, #1
 8001104:	b2e4      	uxtb	r4, r4
 8001106:	2a00      	cmp	r2, #0
 8001108:	d0f2      	beq.n	80010f0 <findAddress+0x4c>
			if(lastaddr != address){
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <findAddress+0x11c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	42ab      	cmp	r3, r5
 8001112:	d1ed      	bne.n	80010f0 <findAddress+0x4c>
			HAL_Delay(2);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 fe61 	bl	8001ddc <HAL_Delay>
		while(timeout2--){
 800111a:	0022      	movs	r2, r4
 800111c:	e7f1      	b.n	8001102 <findAddress+0x5e>
		if(lastaddr == address && HAL_GPIO_ReadPin(ADR_IN_GPIO_Port, ADR_IN_Pin))
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	4828      	ldr	r0, [pc, #160]	; (80011c4 <findAddress+0x120>)
 8001122:	f001 f9a3 	bl	800246c <HAL_GPIO_ReadPin>
 8001126:	2800      	cmp	r0, #0
 8001128:	d0e7      	beq.n	80010fa <findAddress+0x56>
			if(address == 0)
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <findAddress+0x11c>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <findAddress+0x94>
				address = 1;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <findAddress+0x11c>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
		while(timeout2--){
 8001138:	2400      	movs	r4, #0
 800113a:	e012      	b.n	8001162 <findAddress+0xbe>
		HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_RESET);
 800113c:	4d21      	ldr	r5, [pc, #132]	; (80011c4 <findAddress+0x120>)
 800113e:	2200      	movs	r2, #0
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	0028      	movs	r0, r5
 8001144:	f001 f999 	bl	800247a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f000 fe47 	bl	8001ddc <HAL_Delay>
		HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2140      	movs	r1, #64	; 0x40
 8001152:	0028      	movs	r0, r5
 8001154:	f001 f991 	bl	800247a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f000 fe3f 	bl	8001ddc <HAL_Delay>
	for(uint8_t i = 0;i< address;i++){
 800115e:	3401      	adds	r4, #1
 8001160:	b2e4      	uxtb	r4, r4
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <findAddress+0x11c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	42a3      	cmp	r3, r4
 800116a:	d8e7      	bhi.n	800113c <findAddress+0x98>
		address--; // We counted one too much in the initial test pulse
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <findAddress+0x11c>)
 800116e:	7813      	ldrb	r3, [r2, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	7013      	strb	r3, [r2, #0]
		setPulseFreq(0);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff ff42 	bl	8001000 <setPulseFreq>
		for(uint8_t i = 0;i< address;i++){
 800117c:	2400      	movs	r4, #0
 800117e:	e013      	b.n	80011a8 <findAddress+0x104>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET); // Enable drive
 8001180:	25a0      	movs	r5, #160	; 0xa0
 8001182:	05ed      	lsls	r5, r5, #23
 8001184:	2200      	movs	r2, #0
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0028      	movs	r0, r5
 800118a:	f001 f976 	bl	800247a <HAL_GPIO_WritePin>
			HAL_Delay(250);
 800118e:	20fa      	movs	r0, #250	; 0xfa
 8001190:	f000 fe24 	bl	8001ddc <HAL_Delay>
			HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET); // Enable drive
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0028      	movs	r0, r5
 800119a:	f001 f96e 	bl	800247a <HAL_GPIO_WritePin>
			HAL_Delay(250);
 800119e:	20fa      	movs	r0, #250	; 0xfa
 80011a0:	f000 fe1c 	bl	8001ddc <HAL_Delay>
		for(uint8_t i = 0;i< address;i++){
 80011a4:	3401      	adds	r4, #1
 80011a6:	b2e4      	uxtb	r4, r4
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <findAddress+0x11c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	d8e6      	bhi.n	8001180 <findAddress+0xdc>
	state = state_normal;
 80011b2:	4b02      	ldr	r3, [pc, #8]	; (80011bc <findAddress+0x118>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000554 	.word	0x20000554
 80011c4:	50000400 	.word	0x50000400

080011c8 <homeHeads>:
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
	setPulseFreq(0); // Disable
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ff18 	bl	8001000 <setPulseFreq>
	gpioStepPin(); // Get step pin as output
 80011d0:	f7ff fef6 	bl	8000fc0 <gpioStepPin>
	setEnabled(1);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fe38 	bl	8000e4a <setEnabled>
	setTrack(0);
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fe00 	bl	8000de0 <setTrack>
	for(uint8_t i = 0; i<5;i++)
 80011e0:	2400      	movs	r4, #0
 80011e2:	e015      	b.n	8001210 <homeHeads+0x48>
		HAL_GPIO_WritePin(FDD_STEP_GPIO_Port, FDD_STEP_Pin,0);
 80011e4:	2680      	movs	r6, #128	; 0x80
 80011e6:	0076      	lsls	r6, r6, #1
 80011e8:	25a0      	movs	r5, #160	; 0xa0
 80011ea:	05ed      	lsls	r5, r5, #23
 80011ec:	2200      	movs	r2, #0
 80011ee:	0031      	movs	r1, r6
 80011f0:	0028      	movs	r0, r5
 80011f2:	f001 f942 	bl	800247a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 fdf0 	bl	8001ddc <HAL_Delay>
		HAL_GPIO_WritePin(FDD_STEP_GPIO_Port, FDD_STEP_Pin,1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	0031      	movs	r1, r6
 8001200:	0028      	movs	r0, r5
 8001202:	f001 f93a 	bl	800247a <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f000 fde8 	bl	8001ddc <HAL_Delay>
	for(uint8_t i = 0; i<5;i++)
 800120c:	3401      	adds	r4, #1
 800120e:	b2e4      	uxtb	r4, r4
 8001210:	2c04      	cmp	r4, #4
 8001212:	d9e7      	bls.n	80011e4 <homeHeads+0x1c>
	track0_fired = 0;
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <homeHeads+0xb0>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
	resetCountOnTrk0 = 1;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <homeHeads+0xb4>)
 800121c:	3201      	adds	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
	setTrack(stepnum+1);
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <homeHeads+0xb8>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	3001      	adds	r0, #1
 8001226:	b280      	uxth	r0, r0
 8001228:	f7ff fdda 	bl	8000de0 <setTrack>
	for(uint8_t i = 0; i<stepnum*2;i++)
 800122c:	2400      	movs	r4, #0
 800122e:	e00a      	b.n	8001246 <homeHeads+0x7e>
		HAL_GPIO_TogglePin(FDD_STEP_GPIO_Port, FDD_STEP_Pin);
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	20a0      	movs	r0, #160	; 0xa0
 8001234:	0049      	lsls	r1, r1, #1
 8001236:	05c0      	lsls	r0, r0, #23
 8001238:	f001 f925 	bl	8002486 <HAL_GPIO_TogglePin>
		HAL_Delay(1);
 800123c:	2001      	movs	r0, #1
 800123e:	f000 fdcd 	bl	8001ddc <HAL_Delay>
	for(uint8_t i = 0; i<stepnum*2;i++)
 8001242:	3401      	adds	r4, #1
 8001244:	b2e4      	uxtb	r4, r4
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <homeHeads+0xb8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	429c      	cmp	r4, r3
 800124e:	d206      	bcs.n	800125e <homeHeads+0x96>
		if(track0_fired){
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <homeHeads+0xb0>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0eb      	beq.n	8001230 <homeHeads+0x68>
			track0_fired = 0;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <homeHeads+0xb0>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	setTrack(0); // Reset direction timer
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fdbe 	bl	8000de0 <setTrack>
	setEnabled(0); // Disable drive
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fdf0 	bl	8000e4a <setEnabled>
	reinitTimerStepPin();
 800126a:	f7ff febe 	bl	8000fea <reinitTimerStepPin>
	resetCountOnTrk0 = 0;
 800126e:	4b03      	ldr	r3, [pc, #12]	; (800127c <homeHeads+0xb4>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bd70      	pop	{r4, r5, r6, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	20000579 	.word	0x20000579
 800127c:	2000056a 	.word	0x2000056a
 8001280:	20000004 	.word	0x20000004

08001284 <setExtClkMode>:

/**
 * Switches between external ETR2 and internal HCLK clock source on steptimer
 */
void setExtClkMode(uint32_t extClkPeriod){
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	1e04      	subs	r4, r0, #0
	if(extClkPeriod){
 800128a:	d02a      	beq.n	80012e2 <setExtClkMode+0x5e>
		// pin config
//		HAL_TIM_Base_DeInit(&STEPTIM);
//		HAL_TIM_Base_Init(&STEPTIM);
		// Clock config

		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128c:	2210      	movs	r2, #16
 800128e:	2100      	movs	r1, #0
 8001290:	a801      	add	r0, sp, #4
 8001292:	f003 fdb1 	bl	8004df8 <memset>
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	9301      	str	r3, [sp, #4]
		sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
		sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
		sClockSourceConfig.ClockFilter = 0;
		HAL_TIM_ConfigClockSource(&STEPTIM, &sClockSourceConfig);
 800129c:	a901      	add	r1, sp, #4
 800129e:	4819      	ldr	r0, [pc, #100]	; (8001304 <setExtClkMode+0x80>)
 80012a0:	f003 f912 	bl	80044c8 <HAL_TIM_ConfigClockSource>
//		HAL_TIM_PWM_Init(&STEPTIM);

		// Enable ext trigger on timer STEPTIM

		GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	2214      	movs	r2, #20
 80012a6:	2100      	movs	r1, #0
 80012a8:	a805      	add	r0, sp, #20
 80012aa:	f003 fda5 	bl	8004df8 <memset>
		HAL_GPIO_DeInit(EXTCLK_GPIO_Port, EXTCLK_Pin);
 80012ae:	2680      	movs	r6, #128	; 0x80
 80012b0:	0176      	lsls	r6, r6, #5
 80012b2:	25a0      	movs	r5, #160	; 0xa0
 80012b4:	05ed      	lsls	r5, r5, #23
 80012b6:	0031      	movs	r1, r6
 80012b8:	0028      	movs	r0, r5
 80012ba:	f001 f855 	bl	8002368 <HAL_GPIO_DeInit>
		GPIO_InitStruct.Pin = EXTCLK_Pin;
 80012be:	9605      	str	r6, [sp, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2200      	movs	r2, #0
 80012c6:	9207      	str	r2, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	9208      	str	r2, [sp, #32]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80012ca:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(EXTCLK_GPIO_Port, &GPIO_InitStruct);
 80012cc:	a905      	add	r1, sp, #20
 80012ce:	0028      	movs	r0, r5
 80012d0:	f000 ff8e 	bl	80021f0 <HAL_GPIO_Init>

		masterclockfreq = extClkPeriod;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <setExtClkMode+0x84>)
 80012d6:	601c      	str	r4, [r3, #0]
		setPulseFreq(0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fe91 	bl	8001000 <setPulseFreq>
		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	    HAL_TIM_ConfigClockSource(&STEPTIM, &sClockSourceConfig);
	}

}
 80012de:	b00a      	add	sp, #40	; 0x28
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
		masterclockfreq = HAL_RCC_GetHCLKFreq();
 80012e2:	f001 fc8f 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <setExtClkMode+0x84>)
 80012e8:	6018      	str	r0, [r3, #0]
		TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	2210      	movs	r2, #16
 80012ec:	2100      	movs	r1, #0
 80012ee:	a805      	add	r0, sp, #20
 80012f0:	f003 fd82 	bl	8004df8 <memset>
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	015b      	lsls	r3, r3, #5
 80012f8:	9305      	str	r3, [sp, #20]
	    HAL_TIM_ConfigClockSource(&STEPTIM, &sClockSourceConfig);
 80012fa:	a905      	add	r1, sp, #20
 80012fc:	4801      	ldr	r0, [pc, #4]	; (8001304 <setExtClkMode+0x80>)
 80012fe:	f003 f8e3 	bl	80044c8 <HAL_TIM_ConfigClockSource>
}
 8001302:	e7ec      	b.n	80012de <setExtClkMode+0x5a>
 8001304:	20000750 	.word	0x20000750
 8001308:	20000558 	.word	0x20000558

0800130c <executeCmd>:
	{
 800130c:	b510      	push	{r4, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	0004      	movs	r4, r0
	if(cmd->adr == 0xff && cmd->cmd == 0x0A){
 8001312:	7803      	ldrb	r3, [r0, #0]
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d00a      	beq.n	800132e <executeCmd+0x22>
	switch(cmd->cmd){
 8001318:	7863      	ldrb	r3, [r4, #1]
 800131a:	2b20      	cmp	r3, #32
 800131c:	d80d      	bhi.n	800133a <executeCmd+0x2e>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d021      	beq.n	8001366 <executeCmd+0x5a>
 8001322:	2b20      	cmp	r3, #32
 8001324:	d81f      	bhi.n	8001366 <executeCmd+0x5a>
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <executeCmd+0xf4>)
 800132a:	58d3      	ldr	r3, [r2, r3]
 800132c:	469f      	mov	pc, r3
	if(cmd->adr == 0xff && cmd->cmd == 0x0A){
 800132e:	7843      	ldrb	r3, [r0, #1]
 8001330:	2b0a      	cmp	r3, #10
 8001332:	d1f1      	bne.n	8001318 <executeCmd+0xc>
		findAddress();
 8001334:	f7ff feb6 	bl	80010a4 <findAddress>
 8001338:	e7ee      	b.n	8001318 <executeCmd+0xc>
	switch(cmd->cmd){
 800133a:	2bd1      	cmp	r3, #209	; 0xd1
 800133c:	d040      	beq.n	80013c0 <executeCmd+0xb4>
 800133e:	2bd5      	cmp	r3, #213	; 0xd5
 8001340:	d111      	bne.n	8001366 <executeCmd+0x5a>
		sendSectorSpi(cmd->val1_16);
 8001342:	78a3      	ldrb	r3, [r4, #2]
 8001344:	78e0      	ldrb	r0, [r4, #3]
 8001346:	0200      	lsls	r0, r0, #8
 8001348:	4318      	orrs	r0, r3
 800134a:	f7ff fbad 	bl	8000aa8 <sendSectorSpi>
		break;
 800134e:	e00a      	b.n	8001366 <executeCmd+0x5a>
		setSteps(cmd->val1 | cmd->val2 << 8);
 8001350:	78a0      	ldrb	r0, [r4, #2]
 8001352:	78e3      	ldrb	r3, [r4, #3]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	4318      	orrs	r0, r3
 8001358:	f7ff fd82 	bl	8000e60 <setSteps>
		resetCountOnTrk0 = cmd->val4 ? 1 : 0;
 800135c:	7963      	ldrb	r3, [r4, #5]
 800135e:	1e5a      	subs	r2, r3, #1
 8001360:	4193      	sbcs	r3, r2
 8001362:	4a28      	ldr	r2, [pc, #160]	; (8001404 <executeCmd+0xf8>)
 8001364:	7013      	strb	r3, [r2, #0]
}
 8001366:	b002      	add	sp, #8
 8001368:	bd10      	pop	{r4, pc}
		uint8_t buf[4] = {cmd->val1,cmd->val2,cmd->val3,cmd->val4};
 800136a:	78a3      	ldrb	r3, [r4, #2]
 800136c:	a801      	add	r0, sp, #4
 800136e:	7003      	strb	r3, [r0, #0]
 8001370:	78e3      	ldrb	r3, [r4, #3]
 8001372:	7043      	strb	r3, [r0, #1]
 8001374:	7923      	ldrb	r3, [r4, #4]
 8001376:	7083      	strb	r3, [r0, #2]
 8001378:	7963      	ldrb	r3, [r4, #5]
 800137a:	70c3      	strb	r3, [r0, #3]
		setPulseFreq(bytesToFloat(buf,0));
 800137c:	2100      	movs	r1, #0
 800137e:	f000 f883 	bl	8001488 <bytesToFloat>
 8001382:	f7ff fe3d 	bl	8001000 <setPulseFreq>
	break;
 8001386:	e7ee      	b.n	8001366 <executeCmd+0x5a>
		float f = cmd->val1_32;
 8001388:	78a0      	ldrb	r0, [r4, #2]
 800138a:	78e3      	ldrb	r3, [r4, #3]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4303      	orrs	r3, r0
 8001390:	7922      	ldrb	r2, [r4, #4]
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	4313      	orrs	r3, r2
 8001396:	7960      	ldrb	r0, [r4, #5]
 8001398:	0600      	lsls	r0, r0, #24
 800139a:	4318      	orrs	r0, r3
 800139c:	f7ff fb24 	bl	80009e8 <__aeabi_ui2f>
		setPulseFreq(f/1000.0);
 80013a0:	4919      	ldr	r1, [pc, #100]	; (8001408 <executeCmd+0xfc>)
 80013a2:	f7fe ff8b 	bl	80002bc <__aeabi_fdiv>
 80013a6:	f7ff fe2b 	bl	8001000 <setPulseFreq>
	break;
 80013aa:	e7dc      	b.n	8001366 <executeCmd+0x5a>
		homeHeads();
 80013ac:	f7ff ff0c 	bl	80011c8 <homeHeads>
	break;
 80013b0:	e7d9      	b.n	8001366 <executeCmd+0x5a>
		setEnabled(cmd->val1);
 80013b2:	78a0      	ldrb	r0, [r4, #2]
 80013b4:	f7ff fd49 	bl	8000e4a <setEnabled>
		setMotor(cmd->val2);
 80013b8:	78e0      	ldrb	r0, [r4, #3]
 80013ba:	f7ff fcbb 	bl	8000d34 <setMotor>
	break;
 80013be:	e7d2      	b.n	8001366 <executeCmd+0x5a>
		sendDataStatus();
 80013c0:	f7ff fbb0 	bl	8000b24 <sendDataStatus>
	break;
 80013c4:	e7cf      	b.n	8001366 <executeCmd+0x5a>
		enableDataMode(cmd->val1);
 80013c6:	78a0      	ldrb	r0, [r4, #2]
 80013c8:	f7ff fcf2 	bl	8000db0 <enableDataMode>
		setMotor(cmd->val3);
 80013cc:	7920      	ldrb	r0, [r4, #4]
 80013ce:	f7ff fcb1 	bl	8000d34 <setMotor>
		if(cmd->val2)
 80013d2:	78e3      	ldrb	r3, [r4, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <executeCmd+0xd2>
			beginReadData();
 80013d8:	f7ff fcb6 	bl	8000d48 <beginReadData>
 80013dc:	e7c3      	b.n	8001366 <executeCmd+0x5a>
			stopReadData();
 80013de:	f7ff fbbb 	bl	8000b58 <stopReadData>
 80013e2:	e7c0      	b.n	8001366 <executeCmd+0x5a>
		setExtClkMode(cmd->val1_32);
 80013e4:	78a0      	ldrb	r0, [r4, #2]
 80013e6:	78e3      	ldrb	r3, [r4, #3]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	4303      	orrs	r3, r0
 80013ec:	7922      	ldrb	r2, [r4, #4]
 80013ee:	0412      	lsls	r2, r2, #16
 80013f0:	4313      	orrs	r3, r2
 80013f2:	7960      	ldrb	r0, [r4, #5]
 80013f4:	0600      	lsls	r0, r0, #24
 80013f6:	4318      	orrs	r0, r3
 80013f8:	f7ff ff44 	bl	8001284 <setExtClkMode>
}
 80013fc:	e7b3      	b.n	8001366 <executeCmd+0x5a>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	08004ea0 	.word	0x08004ea0
 8001404:	2000056a 	.word	0x2000056a
 8001408:	447a0000 	.word	0x447a0000

0800140c <update>:
void update(){
 800140c:	b510      	push	{r4, lr}
	if(state == state_execute_cmd){
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <update+0x1c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d000      	beq.n	8001418 <update+0xc>
}
 8001416:	bd10      	pop	{r4, pc}
		executeCmd(&nextcmd);
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <update+0x20>)
 800141a:	f7ff ff77 	bl	800130c <executeCmd>
		state = state_normal;
 800141e:	4b02      	ldr	r3, [pc, #8]	; (8001428 <update+0x1c>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	e7f7      	b.n	8001416 <update+0xa>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	20000000 	.word	0x20000000
 800142c:	2000055c 	.word	0x2000055c

08001430 <initializeTimers>:

void initializeTimers(){
 8001430:	b510      	push	{r4, lr}
	masterclockfreq = HAL_RCC_GetHCLKFreq();
 8001432:	f001 fbe7 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <initializeTimers+0x24>)
 8001438:	6018      	str	r0, [r3, #0]
	setSteps(stepnum);
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <initializeTimers+0x28>)
 800143c:	6818      	ldr	r0, [r3, #0]
 800143e:	f7ff fd0f 	bl	8000e60 <setSteps>
	// Start PWM output on timers
	setPulseFreq(0);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff fddc 	bl	8001000 <setPulseFreq>
	//HAL_TIM_PWM_Start(&STEPTIM, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&DIRTIM, TIM_CHANNEL_1);
 8001448:	2100      	movs	r1, #0
 800144a:	4804      	ldr	r0, [pc, #16]	; (800145c <initializeTimers+0x2c>)
 800144c:	f003 f95e 	bl	800470c <HAL_TIM_PWM_Start>

}
 8001450:	bd10      	pop	{r4, pc}
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	20000558 	.word	0x20000558
 8001458:	20000004 	.word	0x20000004
 800145c:	20000834 	.word	0x20000834

08001460 <initializeComms>:


void initializeComms(){
 8001460:	b510      	push	{r4, lr}
	// Start SPI
	// setSSI(1,&hspi1);
//	memset(txbuf, 0, sizeof(txbuf)); // Clear tx buffer
//	HAL_SPIEx_FlushRxFifo(&hspi1);
//	HAL_SPI_DMAStop(&hspi1);
	if(spiBeginReceive() != HAL_OK){
 8001462:	f7ff fd11 	bl	8000e88 <spiBeginReceive>

	}
	//setSSI(1,&hspi1);

}
 8001466:	bd10      	pop	{r4, pc}

08001468 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi){
 8001468:	b510      	push	{r4, lr}
	spiErrors++;
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <HAL_SPI_ErrorCallback+0x1c>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
	initializeComms();
 8001472:	f7ff fff5 	bl	8001460 <initializeComms>
	HAL_GPIO_TogglePin(FDD_HEAD_GPIO_Port, FDD_HEAD_Pin);
 8001476:	20a0      	movs	r0, #160	; 0xa0
 8001478:	2108      	movs	r1, #8
 800147a:	05c0      	lsls	r0, r0, #23
 800147c:	f001 f803 	bl	8002486 <HAL_GPIO_TogglePin>
}
 8001480:	bd10      	pop	{r4, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000574 	.word	0x20000574

08001488 <bytesToFloat>:
 *  Created on: 11.12.2022
 *      Author: Yannick
 */
#include "helpers.h"

float bytesToFloat(uint8_t *bytes, uint8_t big_endian) {
 8001488:	b082      	sub	sp, #8
    float f;
    uint8_t *f_ptr = (uint8_t *) &f;
    if (big_endian) {
 800148a:	2900      	cmp	r1, #0
 800148c:	d00b      	beq.n	80014a6 <bytesToFloat+0x1e>
        f_ptr[3] = bytes[0];
 800148e:	7802      	ldrb	r2, [r0, #0]
 8001490:	ab01      	add	r3, sp, #4
 8001492:	70da      	strb	r2, [r3, #3]
        f_ptr[2] = bytes[1];
 8001494:	7842      	ldrb	r2, [r0, #1]
 8001496:	709a      	strb	r2, [r3, #2]
        f_ptr[1] = bytes[2];
 8001498:	7882      	ldrb	r2, [r0, #2]
 800149a:	705a      	strb	r2, [r3, #1]
        f_ptr[0] = bytes[3];
 800149c:	78c2      	ldrb	r2, [r0, #3]
 800149e:	701a      	strb	r2, [r3, #0]
        f_ptr[2] = bytes[2];
        f_ptr[1] = bytes[1];
        f_ptr[0] = bytes[0];
    }
    return f;
}
 80014a0:	9801      	ldr	r0, [sp, #4]
 80014a2:	b002      	add	sp, #8
 80014a4:	4770      	bx	lr
        f_ptr[3] = bytes[3];
 80014a6:	78c2      	ldrb	r2, [r0, #3]
 80014a8:	ab01      	add	r3, sp, #4
 80014aa:	70da      	strb	r2, [r3, #3]
        f_ptr[2] = bytes[2];
 80014ac:	7882      	ldrb	r2, [r0, #2]
 80014ae:	709a      	strb	r2, [r3, #2]
        f_ptr[1] = bytes[1];
 80014b0:	7842      	ldrb	r2, [r0, #1]
 80014b2:	705a      	strb	r2, [r3, #1]
        f_ptr[0] = bytes[0];
 80014b4:	7802      	ldrb	r2, [r0, #0]
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	e7f2      	b.n	80014a0 <bytesToFloat+0x18>
	...

080014bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014be:	46d6      	mov	lr, sl
 80014c0:	464f      	mov	r7, r9
 80014c2:	4646      	mov	r6, r8
 80014c4:	b5c0      	push	{r6, r7, lr}
 80014c6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	2214      	movs	r2, #20
 80014ca:	2100      	movs	r1, #0
 80014cc:	a803      	add	r0, sp, #12
 80014ce:	f003 fc93 	bl	8004df8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b35      	ldr	r3, [pc, #212]	; (80015a8 <MX_GPIO_Init+0xec>)
 80014d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d6:	2102      	movs	r1, #2
 80014d8:	4688      	mov	r8, r1
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34
 80014de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e0:	400a      	ands	r2, r1
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014e8:	2204      	movs	r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	6359      	str	r1, [r3, #52]	; 0x34
 80014ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f0:	400a      	ands	r2, r1
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f8:	2401      	movs	r4, #1
 80014fa:	4322      	orrs	r2, r4
 80014fc:	635a      	str	r2, [r3, #52]	; 0x34
 80014fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001500:	4023      	ands	r3, r4
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FDD_WEN_Pin|FDD_DOUT_Pin|FDD_MOT_Pin|FDD_HEAD_Pin
 8001506:	27a0      	movs	r7, #160	; 0xa0
 8001508:	05ff      	lsls	r7, r7, #23
 800150a:	2201      	movs	r2, #1
 800150c:	218f      	movs	r1, #143	; 0x8f
 800150e:	0038      	movs	r0, r7
 8001510:	f000 ffb3 	bl	800247a <HAL_GPIO_WritePin>
                          |ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADR_OUT_GPIO_Port, ADR_OUT_Pin, GPIO_PIN_RESET);
 8001514:	4d25      	ldr	r5, [pc, #148]	; (80015ac <MX_GPIO_Init+0xf0>)
 8001516:	2200      	movs	r2, #0
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	0028      	movs	r0, r5
 800151c:	f000 ffad 	bl	800247a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ADR_IN_Pin */
  GPIO_InitStruct.Pin = ADR_IN_Pin;
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	469a      	mov	sl, r3
 8001524:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001526:	23c4      	movs	r3, #196	; 0xc4
 8001528:	039b      	lsls	r3, r3, #14
 800152a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ADR_IN_GPIO_Port, &GPIO_InitStruct);
 800152e:	a903      	add	r1, sp, #12
 8001530:	0028      	movs	r0, r5
 8001532:	f000 fe5d 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FDD_TRK0_Pin */
  GPIO_InitStruct.Pin = FDD_TRK0_Pin;
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153c:	2384      	movs	r3, #132	; 0x84
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(FDD_TRK0_GPIO_Port, &GPIO_InitStruct);
 8001544:	a903      	add	r1, sp, #12
 8001546:	481a      	ldr	r0, [pc, #104]	; (80015b0 <MX_GPIO_Init+0xf4>)
 8001548:	f000 fe52 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDD_WEN_Pin FDD_DOUT_Pin FDD_MOT_Pin FDD_HEAD_Pin */
  GPIO_InitStruct.Pin = FDD_WEN_Pin|FDD_DOUT_Pin|FDD_MOT_Pin|FDD_HEAD_Pin;
 800154c:	230f      	movs	r3, #15
 800154e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001550:	3302      	adds	r3, #2
 8001552:	4699      	mov	r9, r3
 8001554:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2600      	movs	r6, #0
 8001558:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	a903      	add	r1, sp, #12
 800155e:	0038      	movs	r0, r7
 8001560:	f000 fe46 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001564:	4653      	mov	r3, sl
 8001566:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001568:	464b      	mov	r3, r9
 800156a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	4643      	mov	r3, r8
 8001570:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001572:	a903      	add	r1, sp, #12
 8001574:	0038      	movs	r0, r7
 8001576:	f000 fe3b 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADR_OUT_Pin */
  GPIO_InitStruct.Pin = ADR_OUT_Pin;
 800157a:	2340      	movs	r3, #64	; 0x40
 800157c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001582:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ADR_OUT_GPIO_Port, &GPIO_InitStruct);
 8001584:	a903      	add	r1, sp, #12
 8001586:	0028      	movs	r0, r5
 8001588:	f000 fe32 	bl	80021f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2102      	movs	r1, #2
 8001590:	2007      	movs	r0, #7
 8001592:	f000 fc35 	bl	8001e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001596:	2007      	movs	r0, #7
 8001598:	f000 fc62 	bl	8001e60 <HAL_NVIC_EnableIRQ>

}
 800159c:	b008      	add	sp, #32
 800159e:	bce0      	pop	{r5, r6, r7}
 80015a0:	46ba      	mov	sl, r7
 80015a2:	46b1      	mov	r9, r6
 80015a4:	46a8      	mov	r8, r5
 80015a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a8:	40021000 	.word	0x40021000
 80015ac:	50000400 	.word	0x50000400
 80015b0:	50000800 	.word	0x50000800

080015b4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <Error_Handler+0x2>

080015b8 <MX_DMA_Init>:
{
 80015b8:	b500      	push	{lr}
 80015ba:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015bc:	4a18      	ldr	r2, [pc, #96]	; (8001620 <MX_DMA_Init+0x68>)
 80015be:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80015c0:	2301      	movs	r3, #1
 80015c2:	4319      	orrs	r1, r3
 80015c4:	6391      	str	r1, [r2, #56]	; 0x38
 80015c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c8:	4013      	ands	r3, r2
 80015ca:	9301      	str	r3, [sp, #4]
 80015cc:	9b01      	ldr	r3, [sp, #4]
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_DMA_Init+0x6c>)
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_DMA_Init+0x70>)
 80015d2:	6003      	str	r3, [r0, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 80015d4:	2300      	movs	r3, #0
 80015d6:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	01d2      	lsls	r2, r2, #7
 80015dc:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 80015e2:	3240      	adds	r2, #64	; 0x40
 80015e4:	6102      	str	r2, [r0, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e6:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e8:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 80015ea:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	6203      	str	r3, [r0, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 80015ee:	f000 fcb3 	bl	8001f58 <HAL_DMA_Init>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d111      	bne.n	800161a <MX_DMA_Init+0x62>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2009      	movs	r0, #9
 80015fc:	f000 fc00 	bl	8001e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001600:	2009      	movs	r0, #9
 8001602:	f000 fc2d 	bl	8001e60 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	200a      	movs	r0, #10
 800160c:	f000 fbf8 	bl	8001e00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001610:	200a      	movs	r0, #10
 8001612:	f000 fc25 	bl	8001e60 <HAL_NVIC_EnableIRQ>
}
 8001616:	b003      	add	sp, #12
 8001618:	bd00      	pop	{pc}
    Error_Handler( );
 800161a:	f7ff ffcb 	bl	80015b4 <Error_Handler>
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	2000057c 	.word	0x2000057c
 8001628:	40020044 	.word	0x40020044

0800162c <MX_SPI1_Init>:
{
 800162c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <MX_SPI1_Init+0x40>)
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_SPI1_Init+0x44>)
 8001632:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001634:	2300      	movs	r3, #0
 8001636:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0212      	lsls	r2, r2, #8
 800163c:	6082      	str	r2, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163e:	22e0      	movs	r2, #224	; 0xe0
 8001640:	00d2      	lsls	r2, r2, #3
 8001642:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001644:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001646:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001648:	6183      	str	r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800164c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0192      	lsls	r2, r2, #6
 8001652:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001654:	2207      	movs	r2, #7
 8001656:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001658:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800165a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165c:	f001 fc52 	bl	8002f04 <HAL_SPI_Init>
 8001660:	2800      	cmp	r0, #0
 8001662:	d100      	bne.n	8001666 <MX_SPI1_Init+0x3a>
}
 8001664:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001666:	f7ff ffa5 	bl	80015b4 <Error_Handler>
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	200006ec 	.word	0x200006ec
 8001670:	40013000 	.word	0x40013000

08001674 <MX_TIM14_Init>:
{
 8001674:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001676:	4809      	ldr	r0, [pc, #36]	; (800169c <MX_TIM14_Init+0x28>)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_TIM14_Init+0x2c>)
 800167a:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 64000;
 800167c:	23fa      	movs	r3, #250	; 0xfa
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	2300      	movs	r3, #0
 8001684:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 100;
 8001686:	2264      	movs	r2, #100	; 0x64
 8001688:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800168e:	f002 fd11 	bl	80040b4 <HAL_TIM_Base_Init>
 8001692:	2800      	cmp	r0, #0
 8001694:	d100      	bne.n	8001698 <MX_TIM14_Init+0x24>
}
 8001696:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001698:	f7ff ff8c 	bl	80015b4 <Error_Handler>
 800169c:	2000079c 	.word	0x2000079c
 80016a0:	40002000 	.word	0x40002000

080016a4 <MX_TIM17_Init>:
{
 80016a4:	b500      	push	{lr}
 80016a6:	b085      	sub	sp, #20
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a8:	2210      	movs	r2, #16
 80016aa:	2100      	movs	r1, #0
 80016ac:	4668      	mov	r0, sp
 80016ae:	f003 fba3 	bl	8004df8 <memset>
  htim17.Instance = TIM17;
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <MX_TIM17_Init+0x64>)
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_TIM17_Init+0x68>)
 80016b6:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 15;
 80016b8:	230f      	movs	r3, #15
 80016ba:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	2300      	movs	r3, #0
 80016be:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_TIM17_Init+0x6c>)
 80016c2:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80016c6:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c8:	3380      	adds	r3, #128	; 0x80
 80016ca:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80016cc:	f002 fcf2 	bl	80040b4 <HAL_TIM_Base_Init>
 80016d0:	2800      	cmp	r0, #0
 80016d2:	d113      	bne.n	80016fc <MX_TIM17_Init+0x58>
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_TIM17_Init+0x64>)
 80016d6:	f002 fd4d 	bl	8004174 <HAL_TIM_IC_Init>
 80016da:	2800      	cmp	r0, #0
 80016dc:	d110      	bne.n	8001700 <MX_TIM17_Init+0x5c>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016e2:	2201      	movs	r2, #1
 80016e4:	9201      	str	r2, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016e6:	9302      	str	r3, [sp, #8]
  sConfigIC.ICFilter = 0;
 80016e8:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016ea:	2200      	movs	r2, #0
 80016ec:	4669      	mov	r1, sp
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_TIM17_Init+0x64>)
 80016f0:	f002 fe78 	bl	80043e4 <HAL_TIM_IC_ConfigChannel>
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d105      	bne.n	8001704 <MX_TIM17_Init+0x60>
}
 80016f8:	b005      	add	sp, #20
 80016fa:	bd00      	pop	{pc}
    Error_Handler();
 80016fc:	f7ff ff5a 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001700:	f7ff ff58 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001704:	f7ff ff56 	bl	80015b4 <Error_Handler>
 8001708:	200007e8 	.word	0x200007e8
 800170c:	40014800 	.word	0x40014800
 8001710:	0000ffff 	.word	0x0000ffff

08001714 <SystemClock_Config>:
{
 8001714:	b500      	push	{lr}
 8001716:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001718:	2234      	movs	r2, #52	; 0x34
 800171a:	2100      	movs	r1, #0
 800171c:	a805      	add	r0, sp, #20
 800171e:	f003 fb6b 	bl	8004df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001722:	2210      	movs	r2, #16
 8001724:	2100      	movs	r1, #0
 8001726:	a801      	add	r0, sp, #4
 8001728:	f003 fb66 	bl	8004df8 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172c:	2080      	movs	r0, #128	; 0x80
 800172e:	0080      	lsls	r0, r0, #2
 8001730:	f000 feca 	bl	80024c8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001734:	2302      	movs	r3, #2
 8001736:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	0052      	lsls	r2, r2, #1
 800173c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800173e:	2200      	movs	r2, #0
 8001740:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001746:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001748:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800174a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 800174c:	3306      	adds	r3, #6
 800174e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	029b      	lsls	r3, r3, #10
 8001754:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	059b      	lsls	r3, r3, #22
 800175a:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	a805      	add	r0, sp, #20
 800175e:	f000 fedd 	bl	800251c <HAL_RCC_OscConfig>
 8001762:	2800      	cmp	r0, #0
 8001764:	d10e      	bne.n	8001784 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001766:	2307      	movs	r3, #7
 8001768:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	3b05      	subs	r3, #5
 800176c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001772:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001774:	2102      	movs	r1, #2
 8001776:	a801      	add	r0, sp, #4
 8001778:	f001 f97e 	bl	8002a78 <HAL_RCC_ClockConfig>
 800177c:	2800      	cmp	r0, #0
 800177e:	d103      	bne.n	8001788 <SystemClock_Config+0x74>
}
 8001780:	b013      	add	sp, #76	; 0x4c
 8001782:	bd00      	pop	{pc}
    Error_Handler();
 8001784:	f7ff ff16 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001788:	f7ff ff14 	bl	80015b4 <Error_Handler>

0800178c <MX_TIM1_Init>:
{
 800178c:	b500      	push	{lr}
 800178e:	b09d      	sub	sp, #116	; 0x74
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001790:	2210      	movs	r2, #16
 8001792:	2100      	movs	r1, #0
 8001794:	a818      	add	r0, sp, #96	; 0x60
 8001796:	f003 fb2f 	bl	8004df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179a:	220c      	movs	r2, #12
 800179c:	2100      	movs	r1, #0
 800179e:	a815      	add	r0, sp, #84	; 0x54
 80017a0:	f003 fb2a 	bl	8004df8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a4:	221c      	movs	r2, #28
 80017a6:	2100      	movs	r1, #0
 80017a8:	a80e      	add	r0, sp, #56	; 0x38
 80017aa:	f003 fb25 	bl	8004df8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ae:	2234      	movs	r2, #52	; 0x34
 80017b0:	2100      	movs	r1, #0
 80017b2:	a801      	add	r0, sp, #4
 80017b4:	f003 fb20 	bl	8004df8 <memset>
  htim1.Instance = TIM1;
 80017b8:	4831      	ldr	r0, [pc, #196]	; (8001880 <MX_TIM1_Init+0xf4>)
 80017ba:	4b32      	ldr	r3, [pc, #200]	; (8001884 <MX_TIM1_Init+0xf8>)
 80017bc:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 64000;
 80017c4:	22fa      	movs	r2, #250	; 0xfa
 80017c6:	0212      	lsls	r2, r2, #8
 80017c8:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80017cc:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d0:	f002 fc70 	bl	80040b4 <HAL_TIM_Base_Init>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d146      	bne.n	8001866 <MX_TIM1_Init+0xda>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017de:	a918      	add	r1, sp, #96	; 0x60
 80017e0:	4827      	ldr	r0, [pc, #156]	; (8001880 <MX_TIM1_Init+0xf4>)
 80017e2:	f002 fe71 	bl	80044c8 <HAL_TIM_ConfigClockSource>
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d13f      	bne.n	800186a <MX_TIM1_Init+0xde>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ea:	4825      	ldr	r0, [pc, #148]	; (8001880 <MX_TIM1_Init+0xf4>)
 80017ec:	f002 fc92 	bl	8004114 <HAL_TIM_PWM_Init>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d13c      	bne.n	800186e <MX_TIM1_Init+0xe2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017f4:	2320      	movs	r3, #32
 80017f6:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017fe:	a915      	add	r1, sp, #84	; 0x54
 8001800:	481f      	ldr	r0, [pc, #124]	; (8001880 <MX_TIM1_Init+0xf4>)
 8001802:	f003 fa33 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	2800      	cmp	r0, #0
 8001808:	d133      	bne.n	8001872 <MX_TIM1_Init+0xe6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2360      	movs	r3, #96	; 0x60
 800180c:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 5000;
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_TIM1_Init+0xfc>)
 8001810:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001812:	2300      	movs	r3, #0
 8001814:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001816:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001818:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800181a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800181c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800181e:	2200      	movs	r2, #0
 8001820:	a90e      	add	r1, sp, #56	; 0x38
 8001822:	4817      	ldr	r0, [pc, #92]	; (8001880 <MX_TIM1_Init+0xf4>)
 8001824:	f002 fd16 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001828:	2800      	cmp	r0, #0
 800182a:	d124      	bne.n	8001876 <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001830:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001832:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001834:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001836:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	0192      	lsls	r2, r2, #6
 800183c:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800183e:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001840:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001842:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0492      	lsls	r2, r2, #18
 8001848:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800184a:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800184c:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001850:	a901      	add	r1, sp, #4
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_TIM1_Init+0xf4>)
 8001854:	f003 fa42 	bl	8004cdc <HAL_TIMEx_ConfigBreakDeadTime>
 8001858:	2800      	cmp	r0, #0
 800185a:	d10e      	bne.n	800187a <MX_TIM1_Init+0xee>
  HAL_TIM_MspPostInit(&htim1);
 800185c:	4808      	ldr	r0, [pc, #32]	; (8001880 <MX_TIM1_Init+0xf4>)
 800185e:	f000 f9c1 	bl	8001be4 <HAL_TIM_MspPostInit>
}
 8001862:	b01d      	add	sp, #116	; 0x74
 8001864:	bd00      	pop	{pc}
    Error_Handler();
 8001866:	f7ff fea5 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800186a:	f7ff fea3 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800186e:	f7ff fea1 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001872:	f7ff fe9f 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001876:	f7ff fe9d 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800187a:	f7ff fe9b 	bl	80015b4 <Error_Handler>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	20000750 	.word	0x20000750
 8001884:	40012c00 	.word	0x40012c00
 8001888:	00001388 	.word	0x00001388

0800188c <MX_TIM3_Init>:
{
 800188c:	b500      	push	{lr}
 800188e:	b091      	sub	sp, #68	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001890:	2214      	movs	r2, #20
 8001892:	2100      	movs	r1, #0
 8001894:	a80b      	add	r0, sp, #44	; 0x2c
 8001896:	f003 faaf 	bl	8004df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	220c      	movs	r2, #12
 800189c:	2100      	movs	r1, #0
 800189e:	a808      	add	r0, sp, #32
 80018a0:	f003 faaa 	bl	8004df8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a4:	221c      	movs	r2, #28
 80018a6:	2100      	movs	r1, #0
 80018a8:	a801      	add	r0, sp, #4
 80018aa:	f003 faa5 	bl	8004df8 <memset>
  htim3.Instance = TIM3;
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <MX_TIM3_Init+0xac>)
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <MX_TIM3_Init+0xb0>)
 80018b2:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 160-1;
 80018ba:	229f      	movs	r2, #159	; 0x9f
 80018bc:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018be:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c2:	f002 fbf7 	bl	80040b4 <HAL_TIM_Base_Init>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d12b      	bne.n	8001922 <MX_TIM3_Init+0x96>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ca:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_TIM3_Init+0xac>)
 80018cc:	f002 fc22 	bl	8004114 <HAL_TIM_PWM_Init>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d128      	bne.n	8001926 <MX_TIM3_Init+0x9a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80018d4:	2307      	movs	r3, #7
 80018d6:	930b      	str	r3, [sp, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80018d8:	2300      	movs	r3, #0
 80018da:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80018dc:	a90b      	add	r1, sp, #44	; 0x2c
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <MX_TIM3_Init+0xac>)
 80018e0:	f002 fed8 	bl	8004694 <HAL_TIM_SlaveConfigSynchro>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d120      	bne.n	800192a <MX_TIM3_Init+0x9e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ee:	a908      	add	r1, sp, #32
 80018f0:	4811      	ldr	r0, [pc, #68]	; (8001938 <MX_TIM3_Init+0xac>)
 80018f2:	f003 f9bb 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d119      	bne.n	800192e <MX_TIM3_Init+0xa2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018fa:	2360      	movs	r3, #96	; 0x60
 80018fc:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 80;
 80018fe:	3b10      	subs	r3, #16
 8001900:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001902:	3b4e      	subs	r3, #78	; 0x4e
 8001904:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800190a:	2200      	movs	r2, #0
 800190c:	a901      	add	r1, sp, #4
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <MX_TIM3_Init+0xac>)
 8001910:	f002 fca0 	bl	8004254 <HAL_TIM_PWM_ConfigChannel>
 8001914:	2800      	cmp	r0, #0
 8001916:	d10c      	bne.n	8001932 <MX_TIM3_Init+0xa6>
  HAL_TIM_MspPostInit(&htim3);
 8001918:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM3_Init+0xac>)
 800191a:	f000 f963 	bl	8001be4 <HAL_TIM_MspPostInit>
}
 800191e:	b011      	add	sp, #68	; 0x44
 8001920:	bd00      	pop	{pc}
    Error_Handler();
 8001922:	f7ff fe47 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001926:	f7ff fe45 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800192a:	f7ff fe43 	bl	80015b4 <Error_Handler>
    Error_Handler();
 800192e:	f7ff fe41 	bl	80015b4 <Error_Handler>
    Error_Handler();
 8001932:	f7ff fe3f 	bl	80015b4 <Error_Handler>
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000834 	.word	0x20000834
 800193c:	40000400 	.word	0x40000400

08001940 <main>:
{
 8001940:	b510      	push	{r4, lr}
  HAL_Init();
 8001942:	f000 fa25 	bl	8001d90 <HAL_Init>
  SystemClock_Config();
 8001946:	f7ff fee5 	bl	8001714 <SystemClock_Config>
  HAL_Delay(1000); // Allow some time for the debugger
 800194a:	20fa      	movs	r0, #250	; 0xfa
 800194c:	0080      	lsls	r0, r0, #2
 800194e:	f000 fa45 	bl	8001ddc <HAL_Delay>
  MX_GPIO_Init();
 8001952:	f7ff fdb3 	bl	80014bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001956:	f7ff fe2f 	bl	80015b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800195a:	f7ff fe67 	bl	800162c <MX_SPI1_Init>
  MX_TIM1_Init();
 800195e:	f7ff ff15 	bl	800178c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001962:	f7ff ff93 	bl	800188c <MX_TIM3_Init>
  MX_TIM14_Init();
 8001966:	f7ff fe85 	bl	8001674 <MX_TIM14_Init>
  MX_TIM17_Init();
 800196a:	f7ff fe9b 	bl	80016a4 <MX_TIM17_Init>
  initializeTimers();
 800196e:	f7ff fd5f 	bl	8001430 <initializeTimers>
  findAddress();
 8001972:	f7ff fb97 	bl	80010a4 <findAddress>
  initializeComms();
 8001976:	f7ff fd73 	bl	8001460 <initializeComms>
  homeHeads();
 800197a:	f7ff fc25 	bl	80011c8 <homeHeads>
	  update();
 800197e:	f7ff fd45 	bl	800140c <update>
  while (1)
 8001982:	e7fc      	b.n	800197e <main+0x3e>

08001984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_MspInit+0x2c>)
 8001988:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800198a:	2201      	movs	r2, #1
 800198c:	4311      	orrs	r1, r2
 800198e:	6419      	str	r1, [r3, #64]	; 0x40
 8001990:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001992:	400a      	ands	r2, r1
 8001994:	9200      	str	r2, [sp, #0]
 8001996:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800199a:	2180      	movs	r1, #128	; 0x80
 800199c:	0549      	lsls	r1, r1, #21
 800199e:	430a      	orrs	r2, r1
 80019a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	400b      	ands	r3, r1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019aa:	b002      	add	sp, #8
 80019ac:	4770      	bx	lr
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000

080019b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b4:	b510      	push	{r4, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	2214      	movs	r2, #20
 80019bc:	2100      	movs	r1, #0
 80019be:	a803      	add	r0, sp, #12
 80019c0:	f003 fa1a 	bl	8004df8 <memset>
  if(hspi->Instance==SPI1)
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_SPI_MspInit+0xcc>)
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019cc:	b008      	add	sp, #32
 80019ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d0:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_SPI_MspInit+0xd0>)
 80019d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019d4:	2080      	movs	r0, #128	; 0x80
 80019d6:	0140      	lsls	r0, r0, #5
 80019d8:	4301      	orrs	r1, r0
 80019da:	6419      	str	r1, [r3, #64]	; 0x40
 80019dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019de:	4002      	ands	r2, r0
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e6:	2201      	movs	r2, #1
 80019e8:	4311      	orrs	r1, r2
 80019ea:	6359      	str	r1, [r3, #52]	; 0x34
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	401a      	ands	r2, r3
 80019f0:	9202      	str	r2, [sp, #8]
 80019f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11;
 80019f4:	2383      	movs	r3, #131	; 0x83
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	20a0      	movs	r0, #160	; 0xa0
 8001a02:	a903      	add	r1, sp, #12
 8001a04:	05c0      	lsls	r0, r0, #23
 8001a06:	f000 fbf3 	bl	80021f0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8001a0a:	481f      	ldr	r0, [pc, #124]	; (8001a88 <HAL_SPI_MspInit+0xd4>)
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_SPI_MspInit+0xd8>)
 8001a0e:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001a10:	2310      	movs	r3, #16
 8001a12:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a14:	2300      	movs	r3, #0
 8001a16:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a18:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a1e:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a20:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001a22:	61c3      	str	r3, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a24:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001a26:	f000 fa97 	bl	8001f58 <HAL_DMA_Init>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d121      	bne.n	8001a72 <HAL_SPI_MspInit+0xbe>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a2e:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <HAL_SPI_MspInit+0xd4>)
 8001a30:	65a3      	str	r3, [r4, #88]	; 0x58
 8001a32:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8001a34:	4816      	ldr	r0, [pc, #88]	; (8001a90 <HAL_SPI_MspInit+0xdc>)
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_SPI_MspInit+0xe0>)
 8001a38:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001a3a:	2311      	movs	r3, #17
 8001a3c:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a4e:	61c3      	str	r3, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a50:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a52:	f000 fa81 	bl	8001f58 <HAL_DMA_Init>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d10e      	bne.n	8001a78 <HAL_SPI_MspInit+0xc4>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_SPI_MspInit+0xdc>)
 8001a5c:	6563      	str	r3, [r4, #84]	; 0x54
 8001a5e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	2019      	movs	r0, #25
 8001a66:	f000 f9cb 	bl	8001e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a6a:	2019      	movs	r0, #25
 8001a6c:	f000 f9f8 	bl	8001e60 <HAL_NVIC_EnableIRQ>
}
 8001a70:	e7ac      	b.n	80019cc <HAL_SPI_MspInit+0x18>
      Error_Handler();
 8001a72:	f7ff fd9f 	bl	80015b4 <Error_Handler>
 8001a76:	e7da      	b.n	8001a2e <HAL_SPI_MspInit+0x7a>
      Error_Handler();
 8001a78:	f7ff fd9c 	bl	80015b4 <Error_Handler>
 8001a7c:	e7ed      	b.n	8001a5a <HAL_SPI_MspInit+0xa6>
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40013000 	.word	0x40013000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	200005d8 	.word	0x200005d8
 8001a8c:	40020008 	.word	0x40020008
 8001a90:	20000634 	.word	0x20000634
 8001a94:	4002001c 	.word	0x4002001c

08001a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	2214      	movs	r2, #20
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	a807      	add	r0, sp, #28
 8001aa4:	f003 f9a8 	bl	8004df8 <memset>
  if(htim_base->Instance==TIM1)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	4a45      	ldr	r2, [pc, #276]	; (8001bc0 <HAL_TIM_Base_MspInit+0x128>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d00a      	beq.n	8001ac6 <HAL_TIM_Base_MspInit+0x2e>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001ab0:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <HAL_TIM_Base_MspInit+0x12c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d025      	beq.n	8001b02 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8001ab6:	4a44      	ldr	r2, [pc, #272]	; (8001bc8 <HAL_TIM_Base_MspInit+0x130>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d02c      	beq.n	8001b16 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8001abc:	4a43      	ldr	r2, [pc, #268]	; (8001bcc <HAL_TIM_Base_MspInit+0x134>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d034      	beq.n	8001b2c <HAL_TIM_Base_MspInit+0x94>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001ac2:	b00c      	add	sp, #48	; 0x30
 8001ac4:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac6:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <HAL_TIM_Base_MspInit+0x138>)
 8001ac8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001aca:	2080      	movs	r0, #128	; 0x80
 8001acc:	0100      	lsls	r0, r0, #4
 8001ace:	4301      	orrs	r1, r0
 8001ad0:	6419      	str	r1, [r3, #64]	; 0x40
 8001ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad4:	4002      	ands	r2, r0
 8001ad6:	9201      	str	r2, [sp, #4]
 8001ad8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001adc:	2201      	movs	r2, #1
 8001ade:	4311      	orrs	r1, r2
 8001ae0:	6359      	str	r1, [r3, #52]	; 0x34
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	9202      	str	r2, [sp, #8]
 8001ae8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = EXTCLK_Pin;
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001af4:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(EXTCLK_GPIO_Port, &GPIO_InitStruct);
 8001af6:	20a0      	movs	r0, #160	; 0xa0
 8001af8:	a907      	add	r1, sp, #28
 8001afa:	05c0      	lsls	r0, r0, #23
 8001afc:	f000 fb78 	bl	80021f0 <HAL_GPIO_Init>
 8001b00:	e7df      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_TIM_Base_MspInit+0x138>)
 8001b04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001b06:	2302      	movs	r3, #2
 8001b08:	4319      	orrs	r1, r3
 8001b0a:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001b0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b0e:	4013      	ands	r3, r2
 8001b10:	9303      	str	r3, [sp, #12]
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	e7d5      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b16:	4a2e      	ldr	r2, [pc, #184]	; (8001bd0 <HAL_TIM_Base_MspInit+0x138>)
 8001b18:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001b1a:	2080      	movs	r0, #128	; 0x80
 8001b1c:	0200      	lsls	r0, r0, #8
 8001b1e:	4301      	orrs	r1, r0
 8001b20:	6411      	str	r1, [r2, #64]	; 0x40
 8001b22:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b24:	4003      	ands	r3, r0
 8001b26:	9304      	str	r3, [sp, #16]
 8001b28:	9b04      	ldr	r3, [sp, #16]
 8001b2a:	e7ca      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x2a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_TIM_Base_MspInit+0x138>)
 8001b2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b30:	2080      	movs	r0, #128	; 0x80
 8001b32:	02c0      	lsls	r0, r0, #11
 8001b34:	4301      	orrs	r1, r0
 8001b36:	6419      	str	r1, [r3, #64]	; 0x40
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	4002      	ands	r2, r0
 8001b3c:	9205      	str	r2, [sp, #20]
 8001b3e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b42:	2202      	movs	r2, #2
 8001b44:	4311      	orrs	r1, r2
 8001b46:	6359      	str	r1, [r3, #52]	; 0x34
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	9306      	str	r3, [sp, #24]
 8001b4e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = FDD_DIN_Pin;
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b56:	3bef      	subs	r3, #239	; 0xef
 8001b58:	3bff      	subs	r3, #255	; 0xff
 8001b5a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	3b11      	subs	r3, #17
 8001b5e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001b60:	920b      	str	r2, [sp, #44]	; 0x2c
    HAL_GPIO_Init(FDD_DIN_GPIO_Port, &GPIO_InitStruct);
 8001b62:	a907      	add	r1, sp, #28
 8001b64:	481b      	ldr	r0, [pc, #108]	; (8001bd4 <HAL_TIM_Base_MspInit+0x13c>)
 8001b66:	f000 fb43 	bl	80021f0 <HAL_GPIO_Init>
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_TIM_Base_MspInit+0x140>)
 8001b6c:	6811      	ldr	r1, [r2, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	031b      	lsls	r3, r3, #12
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6013      	str	r3, [r2, #0]
    hdma_tim17_ch1.Instance = DMA1_Channel3;
 8001b76:	4819      	ldr	r0, [pc, #100]	; (8001bdc <HAL_TIM_Base_MspInit+0x144>)
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_TIM_Base_MspInit+0x148>)
 8001b7a:	6003      	str	r3, [r0, #0]
    hdma_tim17_ch1.Init.Request = DMA_REQUEST_TIM17_CH1;
 8001b7c:	232f      	movs	r3, #47	; 0x2f
 8001b7e:	6043      	str	r3, [r0, #4]
    hdma_tim17_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b80:	2300      	movs	r3, #0
 8001b82:	6083      	str	r3, [r0, #8]
    hdma_tim17_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	60c3      	str	r3, [r0, #12]
    hdma_tim17_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	6102      	str	r2, [r0, #16]
    hdma_tim17_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8a:	3280      	adds	r2, #128	; 0x80
 8001b8c:	6142      	str	r2, [r0, #20]
    hdma_tim17_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	6182      	str	r2, [r0, #24]
    hdma_tim17_ch1.Init.Mode = DMA_CIRCULAR;
 8001b94:	2220      	movs	r2, #32
 8001b96:	61c2      	str	r2, [r0, #28]
    hdma_tim17_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b98:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim17_ch1) != HAL_OK)
 8001b9a:	f000 f9dd 	bl	8001f58 <HAL_DMA_Init>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d10b      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x122>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim17_ch1);
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_TIM_Base_MspInit+0x144>)
 8001ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8001ba6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM17_IRQn, 2, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2102      	movs	r1, #2
 8001bac:	2016      	movs	r0, #22
 8001bae:	f000 f927 	bl	8001e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001bb2:	2016      	movs	r0, #22
 8001bb4:	f000 f954 	bl	8001e60 <HAL_NVIC_EnableIRQ>
}
 8001bb8:	e783      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x2a>
      Error_Handler();
 8001bba:	f7ff fcfb 	bl	80015b4 <Error_Handler>
 8001bbe:	e7f0      	b.n	8001ba2 <HAL_TIM_Base_MspInit+0x10a>
 8001bc0:	40012c00 	.word	0x40012c00
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40002000 	.word	0x40002000
 8001bcc:	40014800 	.word	0x40014800
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	50000400 	.word	0x50000400
 8001bd8:	40010000 	.word	0x40010000
 8001bdc:	20000690 	.word	0x20000690
 8001be0:	40020030 	.word	0x40020030

08001be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be4:	b510      	push	{r4, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	2214      	movs	r2, #20
 8001bec:	2100      	movs	r1, #0
 8001bee:	a803      	add	r0, sp, #12
 8001bf0:	f003 f902 	bl	8004df8 <memset>
  if(htim->Instance==TIM1)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_TIM_MspPostInit+0x7c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d004      	beq.n	8001c06 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_MspPostInit+0x80>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d018      	beq.n	8001c34 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c02:	b008      	add	sp, #32
 8001c04:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_TIM_MspPostInit+0x84>)
 8001c08:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4319      	orrs	r1, r3
 8001c0e:	6351      	str	r1, [r2, #52]	; 0x34
 8001c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c12:	4013      	ands	r3, r2
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = FDD_STEP_Pin;
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1e:	3bee      	subs	r3, #238	; 0xee
 8001c20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c22:	3b10      	subs	r3, #16
 8001c24:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(FDD_STEP_GPIO_Port, &GPIO_InitStruct);
 8001c28:	20a0      	movs	r0, #160	; 0xa0
 8001c2a:	a903      	add	r1, sp, #12
 8001c2c:	05c0      	lsls	r0, r0, #23
 8001c2e:	f000 fadf 	bl	80021f0 <HAL_GPIO_Init>
 8001c32:	e7e6      	b.n	8001c02 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_TIM_MspPostInit+0x84>)
 8001c36:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4319      	orrs	r1, r3
 8001c3c:	6351      	str	r1, [r2, #52]	; 0x34
 8001c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c40:	401a      	ands	r2, r3
 8001c42:	9202      	str	r2, [sp, #8]
 8001c44:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = FDD_DIR_Pin;
 8001c46:	2240      	movs	r2, #64	; 0x40
 8001c48:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4a:	3a2e      	subs	r2, #46	; 0x2e
 8001c4c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4e:	3a10      	subs	r2, #16
 8001c50:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(FDD_DIR_GPIO_Port, &GPIO_InitStruct);
 8001c54:	20a0      	movs	r0, #160	; 0xa0
 8001c56:	a903      	add	r1, sp, #12
 8001c58:	05c0      	lsls	r0, r0, #23
 8001c5a:	f000 fac9 	bl	80021f0 <HAL_GPIO_Init>
}
 8001c5e:	e7d0      	b.n	8001c02 <HAL_TIM_MspPostInit+0x1e>
 8001c60:	40012c00 	.word	0x40012c00
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40021000 	.word	0x40021000

08001c6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler>

08001c6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <HardFault_Handler>

08001c70 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 f89f 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bd10      	pop	{r4, pc}

08001c7c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADR_IN_Pin);
 8001c7e:	2080      	movs	r0, #128	; 0x80
 8001c80:	f000 fc0a 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FDD_TRK0_Pin);
 8001c84:	2080      	movs	r0, #128	; 0x80
 8001c86:	0200      	lsls	r0, r0, #8
 8001c88:	f000 fc06 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  HAL_GPIO_EXTI_IRQHandler(SWD_IDX_Pin);
 8001c8c:	2080      	movs	r0, #128	; 0x80
 8001c8e:	0180      	lsls	r0, r0, #6
 8001c90:	f000 fc02 	bl	8002498 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c94:	bd10      	pop	{r4, pc}
	...

08001c98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA1_Channel1_IRQHandler+0xc>)
 8001c9c:	f000 fa42 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	200005d8 	.word	0x200005d8

08001ca8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001ca8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <DMA1_Channel2_3_IRQHandler+0x10>)
 8001cac:	f000 fa3a 	bl	8002124 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_tim17_ch1);
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <DMA1_Channel2_3_IRQHandler+0x14>)
 8001cb2:	f000 fa37 	bl	8002124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001cb6:	bd10      	pop	{r4, pc}
 8001cb8:	20000634 	.word	0x20000634
 8001cbc:	20000690 	.word	0x20000690

08001cc0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001cc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001cc2:	4802      	ldr	r0, [pc, #8]	; (8001ccc <TIM17_IRQHandler+0xc>)
 8001cc4:	f002 f8c8 	bl	8003e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001cc8:	bd10      	pop	{r4, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	200007e8 	.word	0x200007e8

08001cd0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001cd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cd2:	4802      	ldr	r0, [pc, #8]	; (8001cdc <SPI1_IRQHandler+0xc>)
 8001cd4:	f001 fdcc 	bl	8003870 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	200006ec 	.word	0x200006ec

08001ce0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	4770      	bx	lr
	...

08001ce4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce8:	f7ff fffa 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf4:	e002      	b.n	8001cfc <LoopCopyDataInit>

08001cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfa:	3304      	adds	r3, #4

08001cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d00:	d3f9      	bcc.n	8001cf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d04:	4c0a      	ldr	r4, [pc, #40]	; (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d08:	e001      	b.n	8001d0e <LoopFillZerobss>

08001d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d0c:	3204      	adds	r2, #4

08001d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d10:	d3fb      	bcc.n	8001d0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d12:	f003 f84d 	bl	8004db0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d16:	f7ff fe13 	bl	8001940 <main>

08001d1a <LoopForever>:

LoopForever:
  b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d28:	08004fc0 	.word	0x08004fc0
  ldr r2, =_sbss
 8001d2c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d30:	20000884 	.word	0x20000884

08001d34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_IRQHandler>
	...

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_InitTick+0x4c>)
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	2900      	cmp	r1, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d44:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001d46:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d48:	20fa      	movs	r0, #250	; 0xfa
 8001d4a:	0080      	lsls	r0, r0, #2
 8001d4c:	f7fe f9d8 	bl	8000100 <__udivsi3>
 8001d50:	0001      	movs	r1, r0
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <HAL_InitTick+0x50>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f7fe f9d3 	bl	8000100 <__udivsi3>
 8001d5a:	f000 f88d 	bl	8001e78 <HAL_SYSTICK_Config>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	2c03      	cmp	r4, #3
 8001d64:	d901      	bls.n	8001d6a <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8001d66:	2001      	movs	r0, #1
 8001d68:	e7ed      	b.n	8001d46 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	0021      	movs	r1, r4
 8001d70:	4240      	negs	r0, r0
 8001d72:	f000 f845 	bl	8001e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_InitTick+0x54>)
 8001d78:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e7e3      	b.n	8001d46 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
 8001d80:	e7e1      	b.n	8001d46 <HAL_InitTick+0xe>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000010 	.word	0x20000010

08001d90 <HAL_Init>:
{
 8001d90:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d92:	4a08      	ldr	r2, [pc, #32]	; (8001db4 <HAL_Init+0x24>)
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d9e:	2003      	movs	r0, #3
 8001da0:	f7ff ffca 	bl	8001d38 <HAL_InitTick>
 8001da4:	1e04      	subs	r4, r0, #0
 8001da6:	d002      	beq.n	8001dae <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001da8:	2401      	movs	r4, #1
}
 8001daa:	0020      	movs	r0, r4
 8001dac:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001dae:	f7ff fde9 	bl	8001984 <HAL_MspInit>
 8001db2:	e7fa      	b.n	8001daa <HAL_Init+0x1a>
 8001db4:	40022000 	.word	0x40022000

08001db8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_IncTick+0x10>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4a03      	ldr	r2, [pc, #12]	; (8001dcc <HAL_IncTick+0x14>)
 8001dbe:	6811      	ldr	r1, [r2, #0]
 8001dc0:	185b      	adds	r3, r3, r1
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	4770      	bx	lr
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	2000000c 	.word	0x2000000c
 8001dcc:	20000880 	.word	0x20000880

08001dd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001dd0:	4b01      	ldr	r3, [pc, #4]	; (8001dd8 <HAL_GetTick+0x8>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
}
 8001dd4:	4770      	bx	lr
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	20000880 	.word	0x20000880

08001ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff fff6 	bl	8001dd0 <HAL_GetTick>
 8001de4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de6:	1c63      	adds	r3, r4, #1
 8001de8:	d002      	beq.n	8001df0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_Delay+0x20>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	1b40      	subs	r0, r0, r5
 8001df6:	42a0      	cmp	r0, r4
 8001df8:	d3fa      	bcc.n	8001df0 <HAL_Delay+0x14>
  {
  }
}
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001e02:	2800      	cmp	r0, #0
 8001e04:	db11      	blt.n	8001e2a <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e06:	0883      	lsrs	r3, r0, #2
 8001e08:	4e13      	ldr	r6, [pc, #76]	; (8001e58 <HAL_NVIC_SetPriority+0x58>)
 8001e0a:	33c0      	adds	r3, #192	; 0xc0
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	599d      	ldr	r5, [r3, r6]
 8001e10:	2403      	movs	r4, #3
 8001e12:	4020      	ands	r0, r4
 8001e14:	00c0      	lsls	r0, r0, #3
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	0014      	movs	r4, r2
 8001e1a:	4084      	lsls	r4, r0
 8001e1c:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	0189      	lsls	r1, r1, #6
 8001e20:	400a      	ands	r2, r1
 8001e22:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e24:	432a      	orrs	r2, r5
 8001e26:	519a      	str	r2, [r3, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e2a:	230f      	movs	r3, #15
 8001e2c:	4003      	ands	r3, r0
 8001e2e:	3b08      	subs	r3, #8
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3306      	adds	r3, #6
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_NVIC_SetPriority+0x5c>)
 8001e38:	4694      	mov	ip, r2
 8001e3a:	4463      	add	r3, ip
 8001e3c:	685c      	ldr	r4, [r3, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	4010      	ands	r0, r2
 8001e42:	00c0      	lsls	r0, r0, #3
 8001e44:	32fc      	adds	r2, #252	; 0xfc
 8001e46:	0015      	movs	r5, r2
 8001e48:	4085      	lsls	r5, r0
 8001e4a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e4c:	0189      	lsls	r1, r1, #6
 8001e4e:	400a      	ands	r2, r1
 8001e50:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e52:	4322      	orrs	r2, r4
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e7e7      	b.n	8001e28 <HAL_NVIC_SetPriority+0x28>
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	db05      	blt.n	8001e70 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e64:	231f      	movs	r3, #31
 8001e66:	4018      	ands	r0, r3
 8001e68:	3b1e      	subs	r3, #30
 8001e6a:	4083      	lsls	r3, r0
 8001e6c:	4a01      	ldr	r2, [pc, #4]	; (8001e74 <HAL_NVIC_EnableIRQ+0x14>)
 8001e6e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e70:	4770      	bx	lr
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	3801      	subs	r0, #1
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	045b      	lsls	r3, r3, #17
 8001e7e:	4298      	cmp	r0, r3
 8001e80:	d20f      	bcs.n	8001ea2 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a09      	ldr	r2, [pc, #36]	; (8001ea8 <HAL_SYSTICK_Config+0x30>)
 8001e84:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e86:	4809      	ldr	r0, [pc, #36]	; (8001eac <HAL_SYSTICK_Config+0x34>)
 8001e88:	6a03      	ldr	r3, [r0, #32]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	21c0      	movs	r1, #192	; 0xc0
 8001e90:	0609      	lsls	r1, r1, #24
 8001e92:	430b      	orrs	r3, r1
 8001e94:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e96:	2300      	movs	r3, #0
 8001e98:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	3307      	adds	r3, #7
 8001e9c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e9e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001ea0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8001ea4:	e7fc      	b.n	8001ea0 <HAL_SYSTICK_Config+0x28>
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	e000e010 	.word	0xe000e010
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eb2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001eb4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001eb6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001eb8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001eba:	2c00      	cmp	r4, #0
 8001ebc:	d002      	beq.n	8001ec4 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ebe:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ec0:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001ec2:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001ec4:	4f0b      	ldr	r7, [pc, #44]	; (8001ef4 <DMA_SetConfig+0x44>)
 8001ec6:	687c      	ldr	r4, [r7, #4]
 8001ec8:	261c      	movs	r6, #28
 8001eca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001ecc:	402e      	ands	r6, r5
 8001ece:	2501      	movs	r5, #1
 8001ed0:	40b5      	lsls	r5, r6
 8001ed2:	432c      	orrs	r4, r5
 8001ed4:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ed6:	6804      	ldr	r4, [r0, #0]
 8001ed8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eda:	6883      	ldr	r3, [r0, #8]
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d004      	beq.n	8001eea <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ee4:	6803      	ldr	r3, [r0, #0]
 8001ee6:	60da      	str	r2, [r3, #12]
  }
}
 8001ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8001eea:	6803      	ldr	r3, [r0, #0]
 8001eec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001eee:	6803      	ldr	r3, [r0, #0]
 8001ef0:	60d9      	str	r1, [r3, #12]
 8001ef2:	e7f9      	b.n	8001ee8 <DMA_SetConfig+0x38>
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b510      	push	{r4, lr}
 8001efa:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001efc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8001f02:	4694      	mov	ip, r2
 8001f04:	4463      	add	r3, ip
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f0a:	20ff      	movs	r0, #255	; 0xff
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	4018      	ands	r0, r3
 8001f10:	3808      	subs	r0, #8
 8001f12:	2114      	movs	r1, #20
 8001f14:	f7fe f8f4 	bl	8000100 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8001f1a:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f1c:	231f      	movs	r3, #31
 8001f1e:	4018      	ands	r0, r3
 8001f20:	3b1e      	subs	r3, #30
 8001f22:	4083      	lsls	r3, r0
 8001f24:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	10008200 	.word	0x10008200
 8001f2c:	40020880 	.word	0x40020880

08001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f30:	233f      	movs	r3, #63	; 0x3f
 8001f32:	6842      	ldr	r2, [r0, #4]
 8001f34:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f36:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8001f38:	189a      	adds	r2, r3, r2
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8001f40:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f42:	3b01      	subs	r3, #1
 8001f44:	2203      	movs	r2, #3
 8001f46:	401a      	ands	r2, r3
 8001f48:	2301      	movs	r3, #1
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	6583      	str	r3, [r0, #88]	; 0x58
}
 8001f4e:	4770      	bx	lr
 8001f50:	1000823f 	.word	0x1000823f
 8001f54:	40020940 	.word	0x40020940

08001f58 <HAL_DMA_Init>:
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8001f5c:	d04d      	beq.n	8001ffa <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f5e:	6805      	ldr	r5, [r0, #0]
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_DMA_Init+0xa8>)
 8001f62:	18e8      	adds	r0, r5, r3
 8001f64:	2114      	movs	r1, #20
 8001f66:	f7fe f8cb 	bl	8000100 <__udivsi3>
 8001f6a:	0080      	lsls	r0, r0, #2
 8001f6c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f6e:	2325      	movs	r3, #37	; 0x25
 8001f70:	2202      	movs	r2, #2
 8001f72:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	4a23      	ldr	r2, [pc, #140]	; (8002004 <HAL_DMA_Init+0xac>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001f7c:	6821      	ldr	r1, [r4, #0]
 8001f7e:	680a      	ldr	r2, [r1, #0]
 8001f80:	68a3      	ldr	r3, [r4, #8]
 8001f82:	68e0      	ldr	r0, [r4, #12]
 8001f84:	4303      	orrs	r3, r0
 8001f86:	6920      	ldr	r0, [r4, #16]
 8001f88:	4303      	orrs	r3, r0
 8001f8a:	6960      	ldr	r0, [r4, #20]
 8001f8c:	4303      	orrs	r3, r0
 8001f8e:	69a0      	ldr	r0, [r4, #24]
 8001f90:	4303      	orrs	r3, r0
 8001f92:	69e0      	ldr	r0, [r4, #28]
 8001f94:	4303      	orrs	r3, r0
 8001f96:	6a20      	ldr	r0, [r4, #32]
 8001f98:	4303      	orrs	r3, r0
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7ff ffaa 	bl	8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	68a2      	ldr	r2, [r4, #8]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d018      	beq.n	8001fe0 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001fb0:	233f      	movs	r3, #63	; 0x3f
 8001fb2:	6861      	ldr	r1, [r4, #4]
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001fba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001fbc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d90f      	bls.n	8001fe6 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fca:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001fcc:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001fd2:	2225      	movs	r2, #37	; 0x25
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001fdc:	2000      	movs	r0, #0
}
 8001fde:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6063      	str	r3, [r4, #4]
 8001fe4:	e7e3      	b.n	8001fae <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	f7ff ffa2 	bl	8001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ff4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	e7e9      	b.n	8001fce <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e7ef      	b.n	8001fde <HAL_DMA_Init+0x86>
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	bffdfff8 	.word	0xbffdfff8
 8002004:	ffff800f 	.word	0xffff800f

08002008 <HAL_DMA_Start_IT>:
{
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800200c:	2024      	movs	r0, #36	; 0x24
 800200e:	5c20      	ldrb	r0, [r4, r0]
 8002010:	2801      	cmp	r0, #1
 8002012:	d045      	beq.n	80020a0 <HAL_DMA_Start_IT+0x98>
 8002014:	2024      	movs	r0, #36	; 0x24
 8002016:	2501      	movs	r5, #1
 8002018:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800201a:	3001      	adds	r0, #1
 800201c:	5c20      	ldrb	r0, [r4, r0]
 800201e:	2801      	cmp	r0, #1
 8002020:	d006      	beq.n	8002030 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002026:	3b5c      	subs	r3, #92	; 0x5c
 8002028:	2200      	movs	r2, #0
 800202a:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 800202c:	2001      	movs	r0, #1
}
 800202e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	3024      	adds	r0, #36	; 0x24
 8002032:	3501      	adds	r5, #1
 8002034:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002036:	2000      	movs	r0, #0
 8002038:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800203a:	6825      	ldr	r5, [r4, #0]
 800203c:	6828      	ldr	r0, [r5, #0]
 800203e:	2601      	movs	r6, #1
 8002040:	43b0      	bics	r0, r6
 8002042:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002044:	0020      	movs	r0, r4
 8002046:	f7ff ff33 	bl	8001eb0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800204a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01c      	beq.n	800208a <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002050:	6822      	ldr	r2, [r4, #0]
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	210e      	movs	r1, #14
 8002056:	430b      	orrs	r3, r1
 8002058:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800205a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	03d2      	lsls	r2, r2, #15
 8002060:	d504      	bpl.n	800206c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800206c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	0052      	lsls	r2, r2, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	6813      	ldr	r3, [r2, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	430b      	orrs	r3, r1
 8002084:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2000      	movs	r0, #0
 8002088:	e7d1      	b.n	800202e <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800208a:	6822      	ldr	r2, [r4, #0]
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	2104      	movs	r1, #4
 8002090:	438b      	bics	r3, r1
 8002092:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	3106      	adds	r1, #6
 800209a:	430b      	orrs	r3, r1
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e7dc      	b.n	800205a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80020a0:	2002      	movs	r0, #2
 80020a2:	e7c4      	b.n	800202e <HAL_DMA_Start_IT+0x26>

080020a4 <HAL_DMA_Abort_IT>:
{
 80020a4:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020a6:	2325      	movs	r3, #37	; 0x25
 80020a8:	5cc3      	ldrb	r3, [r0, r3]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d003      	beq.n	80020b6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ae:	2304      	movs	r3, #4
 80020b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
}
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b6:	6802      	ldr	r2, [r0, #0]
 80020b8:	6813      	ldr	r3, [r2, #0]
 80020ba:	210e      	movs	r1, #14
 80020bc:	438b      	bics	r3, r1
 80020be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80020c0:	6801      	ldr	r1, [r0, #0]
 80020c2:	680a      	ldr	r2, [r1, #0]
 80020c4:	2301      	movs	r3, #1
 80020c6:	439a      	bics	r2, r3
 80020c8:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80020cc:	680a      	ldr	r2, [r1, #0]
 80020ce:	4c13      	ldr	r4, [pc, #76]	; (800211c <HAL_DMA_Abort_IT+0x78>)
 80020d0:	4022      	ands	r2, r4
 80020d2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80020d4:	4c12      	ldr	r4, [pc, #72]	; (8002120 <HAL_DMA_Abort_IT+0x7c>)
 80020d6:	6862      	ldr	r2, [r4, #4]
 80020d8:	211c      	movs	r1, #28
 80020da:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80020dc:	4029      	ands	r1, r5
 80020de:	408b      	lsls	r3, r1
 80020e0:	4313      	orrs	r3, r2
 80020e2:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80020e6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80020e8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80020ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	490a      	ldr	r1, [pc, #40]	; (800211c <HAL_DMA_Abort_IT+0x78>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80020fa:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80020fc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80020fe:	2325      	movs	r3, #37	; 0x25
 8002100:	2201      	movs	r2, #1
 8002102:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002104:	3b01      	subs	r3, #1
 8002106:	2200      	movs	r2, #0
 8002108:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800210a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8002110:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2000      	movs	r0, #0
 8002114:	e7ce      	b.n	80020b4 <HAL_DMA_Abort_IT+0x10>
 8002116:	2000      	movs	r0, #0
 8002118:	e7cc      	b.n	80020b4 <HAL_DMA_Abort_IT+0x10>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	fffffeff 	.word	0xfffffeff
 8002120:	40020000 	.word	0x40020000

08002124 <HAL_DMA_IRQHandler>:
{
 8002124:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_DMA_IRQHandler+0xc8>)
 8002128:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800212a:	6804      	ldr	r4, [r0, #0]
 800212c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800212e:	231c      	movs	r3, #28
 8002130:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002132:	4013      	ands	r3, r2
 8002134:	2204      	movs	r2, #4
 8002136:	409a      	lsls	r2, r3
 8002138:	4211      	tst	r1, r2
 800213a:	d016      	beq.n	800216a <HAL_DMA_IRQHandler+0x46>
 800213c:	076a      	lsls	r2, r5, #29
 800213e:	d514      	bpl.n	800216a <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	069b      	lsls	r3, r3, #26
 8002144:	d403      	bmi.n	800214e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	2204      	movs	r2, #4
 800214a:	4393      	bics	r3, r2
 800214c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800214e:	4c27      	ldr	r4, [pc, #156]	; (80021ec <HAL_DMA_IRQHandler+0xc8>)
 8002150:	6863      	ldr	r3, [r4, #4]
 8002152:	211c      	movs	r1, #28
 8002154:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002156:	4011      	ands	r1, r2
 8002158:	2204      	movs	r2, #4
 800215a:	408a      	lsls	r2, r1
 800215c:	4313      	orrs	r3, r2
 800215e:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002160:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002162:	2b00      	cmp	r3, #0
 8002164:	d000      	beq.n	8002168 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8002166:	4798      	blx	r3
}
 8002168:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800216a:	2202      	movs	r2, #2
 800216c:	409a      	lsls	r2, r3
 800216e:	4211      	tst	r1, r2
 8002170:	d01c      	beq.n	80021ac <HAL_DMA_IRQHandler+0x88>
 8002172:	07aa      	lsls	r2, r5, #30
 8002174:	d51a      	bpl.n	80021ac <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	d406      	bmi.n	800218a <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	220a      	movs	r2, #10
 8002180:	4393      	bics	r3, r2
 8002182:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002184:	2325      	movs	r3, #37	; 0x25
 8002186:	3a09      	subs	r2, #9
 8002188:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800218a:	4c18      	ldr	r4, [pc, #96]	; (80021ec <HAL_DMA_IRQHandler+0xc8>)
 800218c:	6863      	ldr	r3, [r4, #4]
 800218e:	211c      	movs	r1, #28
 8002190:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002192:	4011      	ands	r1, r2
 8002194:	2202      	movs	r2, #2
 8002196:	408a      	lsls	r2, r1
 8002198:	4313      	orrs	r3, r2
 800219a:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 800219c:	2324      	movs	r3, #36	; 0x24
 800219e:	2200      	movs	r2, #0
 80021a0:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80021a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0df      	beq.n	8002168 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 80021a8:	4798      	blx	r3
 80021aa:	e7dd      	b.n	8002168 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80021ac:	2208      	movs	r2, #8
 80021ae:	409a      	lsls	r2, r3
 80021b0:	4211      	tst	r1, r2
 80021b2:	d0d9      	beq.n	8002168 <HAL_DMA_IRQHandler+0x44>
 80021b4:	072b      	lsls	r3, r5, #28
 80021b6:	d5d7      	bpl.n	8002168 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	220e      	movs	r2, #14
 80021bc:	4393      	bics	r3, r2
 80021be:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80021c0:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <HAL_DMA_IRQHandler+0xc8>)
 80021c2:	6862      	ldr	r2, [r4, #4]
 80021c4:	211c      	movs	r1, #28
 80021c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021c8:	4019      	ands	r1, r3
 80021ca:	2301      	movs	r3, #1
 80021cc:	001d      	movs	r5, r3
 80021ce:	408d      	lsls	r5, r1
 80021d0:	432a      	orrs	r2, r5
 80021d2:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80021d6:	2225      	movs	r2, #37	; 0x25
 80021d8:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80021da:	3323      	adds	r3, #35	; 0x23
 80021dc:	2200      	movs	r2, #0
 80021de:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80021e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0c0      	beq.n	8002168 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 80021e6:	4798      	blx	r3
  return;
 80021e8:	e7be      	b.n	8002168 <HAL_DMA_IRQHandler+0x44>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 80021f2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f4:	e05a      	b.n	80022ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f6:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021f8:	005f      	lsls	r7, r3, #1
 80021fa:	2603      	movs	r6, #3
 80021fc:	40be      	lsls	r6, r7
 80021fe:	43b4      	bics	r4, r6
 8002200:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002202:	68cc      	ldr	r4, [r1, #12]
 8002204:	40bc      	lsls	r4, r7
 8002206:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8002208:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800220c:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220e:	684a      	ldr	r2, [r1, #4]
 8002210:	0916      	lsrs	r6, r2, #4
 8002212:	2201      	movs	r2, #1
 8002214:	4032      	ands	r2, r6
 8002216:	409a      	lsls	r2, r3
 8002218:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800221a:	6042      	str	r2, [r0, #4]
 800221c:	e056      	b.n	80022cc <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221e:	08dc      	lsrs	r4, r3, #3
 8002220:	3408      	adds	r4, #8
 8002222:	00a4      	lsls	r4, r4, #2
 8002224:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002226:	3205      	adds	r2, #5
 8002228:	401a      	ands	r2, r3
 800222a:	0092      	lsls	r2, r2, #2
 800222c:	270f      	movs	r7, #15
 800222e:	4097      	lsls	r7, r2
 8002230:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002232:	690f      	ldr	r7, [r1, #16]
 8002234:	4097      	lsls	r7, r2
 8002236:	003a      	movs	r2, r7
 8002238:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 800223a:	5022      	str	r2, [r4, r0]
 800223c:	e05a      	b.n	80022f4 <HAL_GPIO_Init+0x104>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800223e:	2603      	movs	r6, #3
 8002240:	e000      	b.n	8002244 <HAL_GPIO_Init+0x54>
 8002242:	2600      	movs	r6, #0
 8002244:	40a6      	lsls	r6, r4
 8002246:	0034      	movs	r4, r6
 8002248:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800224a:	4e43      	ldr	r6, [pc, #268]	; (8002358 <HAL_GPIO_Init+0x168>)
 800224c:	3218      	adds	r2, #24
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002252:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 8002254:	43ea      	mvns	r2, r5
 8002256:	0026      	movs	r6, r4
 8002258:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800225a:	684f      	ldr	r7, [r1, #4]
 800225c:	02ff      	lsls	r7, r7, #11
 800225e:	d501      	bpl.n	8002264 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8002260:	432c      	orrs	r4, r5
 8002262:	0026      	movs	r6, r4
        }
        EXTI->RTSR1 = temp;
 8002264:	4c3c      	ldr	r4, [pc, #240]	; (8002358 <HAL_GPIO_Init+0x168>)
 8002266:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8002268:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 800226a:	0026      	movs	r6, r4
 800226c:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800226e:	684f      	ldr	r7, [r1, #4]
 8002270:	02bf      	lsls	r7, r7, #10
 8002272:	d501      	bpl.n	8002278 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002274:	432c      	orrs	r4, r5
 8002276:	0026      	movs	r6, r4
        }
        EXTI->FTSR1 = temp;
 8002278:	4c37      	ldr	r4, [pc, #220]	; (8002358 <HAL_GPIO_Init+0x168>)
 800227a:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800227c:	2684      	movs	r6, #132	; 0x84
 800227e:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8002280:	0026      	movs	r6, r4
 8002282:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002284:	684f      	ldr	r7, [r1, #4]
 8002286:	03bf      	lsls	r7, r7, #14
 8002288:	d501      	bpl.n	800228e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800228a:	432c      	orrs	r4, r5
 800228c:	0026      	movs	r6, r4
        }
        EXTI->EMR1 = temp;
 800228e:	4c32      	ldr	r4, [pc, #200]	; (8002358 <HAL_GPIO_Init+0x168>)
 8002290:	2784      	movs	r7, #132	; 0x84
 8002292:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8002294:	2680      	movs	r6, #128	; 0x80
 8002296:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8002298:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	684e      	ldr	r6, [r1, #4]
 800229c:	03f6      	lsls	r6, r6, #15
 800229e:	d501      	bpl.n	80022a4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80022a0:	002a      	movs	r2, r5
 80022a2:	4322      	orrs	r2, r4
        }
        EXTI->IMR1 = temp;
 80022a4:	4d2c      	ldr	r5, [pc, #176]	; (8002358 <HAL_GPIO_Init+0x168>)
 80022a6:	2480      	movs	r4, #128	; 0x80
 80022a8:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 80022aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ac:	680c      	ldr	r4, [r1, #0]
 80022ae:	0022      	movs	r2, r4
 80022b0:	40da      	lsrs	r2, r3
 80022b2:	d04f      	beq.n	8002354 <HAL_GPIO_Init+0x164>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022b4:	2201      	movs	r2, #1
 80022b6:	409a      	lsls	r2, r3
 80022b8:	0025      	movs	r5, r4
 80022ba:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80022bc:	4214      	tst	r4, r2
 80022be:	d0f4      	beq.n	80022aa <HAL_GPIO_Init+0xba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	2403      	movs	r4, #3
 80022c2:	684e      	ldr	r6, [r1, #4]
 80022c4:	4034      	ands	r4, r6
 80022c6:	3c01      	subs	r4, #1
 80022c8:	2c01      	cmp	r4, #1
 80022ca:	d994      	bls.n	80021f6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022cc:	2203      	movs	r2, #3
 80022ce:	684c      	ldr	r4, [r1, #4]
 80022d0:	4022      	ands	r2, r4
 80022d2:	2a03      	cmp	r2, #3
 80022d4:	d009      	beq.n	80022ea <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 80022d6:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022d8:	005e      	lsls	r6, r3, #1
 80022da:	2403      	movs	r4, #3
 80022dc:	40b4      	lsls	r4, r6
 80022de:	43a2      	bics	r2, r4
 80022e0:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e2:	688a      	ldr	r2, [r1, #8]
 80022e4:	40b2      	lsls	r2, r6
 80022e6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80022e8:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	2203      	movs	r2, #3
 80022ec:	684c      	ldr	r4, [r1, #4]
 80022ee:	4022      	ands	r2, r4
 80022f0:	2a02      	cmp	r2, #2
 80022f2:	d094      	beq.n	800221e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80022f4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f6:	005e      	lsls	r6, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	0017      	movs	r7, r2
 80022fc:	40b7      	lsls	r7, r6
 80022fe:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002300:	684f      	ldr	r7, [r1, #4]
 8002302:	403a      	ands	r2, r7
 8002304:	40b2      	lsls	r2, r6
 8002306:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002308:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800230a:	22c0      	movs	r2, #192	; 0xc0
 800230c:	0292      	lsls	r2, r2, #10
 800230e:	684c      	ldr	r4, [r1, #4]
 8002310:	4214      	tst	r4, r2
 8002312:	d0ca      	beq.n	80022aa <HAL_GPIO_Init+0xba>
        temp = EXTI->EXTICR[position >> 2u];
 8002314:	089a      	lsrs	r2, r3, #2
 8002316:	0014      	movs	r4, r2
 8002318:	3418      	adds	r4, #24
 800231a:	00a4      	lsls	r4, r4, #2
 800231c:	4e0e      	ldr	r6, [pc, #56]	; (8002358 <HAL_GPIO_Init+0x168>)
 800231e:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002320:	2403      	movs	r4, #3
 8002322:	401c      	ands	r4, r3
 8002324:	00e4      	lsls	r4, r4, #3
 8002326:	260f      	movs	r6, #15
 8002328:	40a6      	lsls	r6, r4
 800232a:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800232c:	26a0      	movs	r6, #160	; 0xa0
 800232e:	05f6      	lsls	r6, r6, #23
 8002330:	42b0      	cmp	r0, r6
 8002332:	d086      	beq.n	8002242 <HAL_GPIO_Init+0x52>
 8002334:	4e09      	ldr	r6, [pc, #36]	; (800235c <HAL_GPIO_Init+0x16c>)
 8002336:	42b0      	cmp	r0, r6
 8002338:	d008      	beq.n	800234c <HAL_GPIO_Init+0x15c>
 800233a:	4e09      	ldr	r6, [pc, #36]	; (8002360 <HAL_GPIO_Init+0x170>)
 800233c:	42b0      	cmp	r0, r6
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x160>
 8002340:	4e08      	ldr	r6, [pc, #32]	; (8002364 <HAL_GPIO_Init+0x174>)
 8002342:	42b0      	cmp	r0, r6
 8002344:	d100      	bne.n	8002348 <HAL_GPIO_Init+0x158>
 8002346:	e77a      	b.n	800223e <HAL_GPIO_Init+0x4e>
 8002348:	2605      	movs	r6, #5
 800234a:	e77b      	b.n	8002244 <HAL_GPIO_Init+0x54>
 800234c:	2601      	movs	r6, #1
 800234e:	e779      	b.n	8002244 <HAL_GPIO_Init+0x54>
 8002350:	2602      	movs	r6, #2
 8002352:	e777      	b.n	8002244 <HAL_GPIO_Init+0x54>
  }
}
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	40021800 	.word	0x40021800
 800235c:	50000400 	.word	0x50000400
 8002360:	50000800 	.word	0x50000800
 8002364:	50000c00 	.word	0x50000c00

08002368 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	46ce      	mov	lr, r9
 800236c:	4647      	mov	r7, r8
 800236e:	b580      	push	{r7, lr}
 8002370:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 8002372:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002374:	e023      	b.n	80023be <HAL_GPIO_DeInit+0x56>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002376:	2103      	movs	r1, #3
 8002378:	4688      	mov	r8, r1
 800237a:	e001      	b.n	8002380 <HAL_GPIO_DeInit+0x18>
 800237c:	2100      	movs	r1, #0
 800237e:	4688      	mov	r8, r1
 8002380:	4641      	mov	r1, r8
 8002382:	40a1      	lsls	r1, r4
 8002384:	42a9      	cmp	r1, r5
 8002386:	d047      	beq.n	8002418 <HAL_GPIO_DeInit+0xb0>
        EXTI->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002388:	6804      	ldr	r4, [r0, #0]
 800238a:	005e      	lsls	r6, r3, #1
 800238c:	2503      	movs	r5, #3
 800238e:	40b5      	lsls	r5, r6
 8002390:	432c      	orrs	r4, r5
 8002392:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002394:	08dc      	lsrs	r4, r3, #3
 8002396:	3408      	adds	r4, #8
 8002398:	00a4      	lsls	r4, r4, #2
 800239a:	5827      	ldr	r7, [r4, r0]
 800239c:	2607      	movs	r6, #7
 800239e:	401e      	ands	r6, r3
 80023a0:	00b6      	lsls	r6, r6, #2
 80023a2:	210f      	movs	r1, #15
 80023a4:	40b1      	lsls	r1, r6
 80023a6:	438f      	bics	r7, r1
 80023a8:	5027      	str	r7, [r4, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	6884      	ldr	r4, [r0, #8]
 80023ac:	43ac      	bics	r4, r5
 80023ae:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b0:	6844      	ldr	r4, [r0, #4]
 80023b2:	4394      	bics	r4, r2
 80023b4:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023b6:	68c2      	ldr	r2, [r0, #12]
 80023b8:	43aa      	bics	r2, r5
 80023ba:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80023bc:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80023be:	464a      	mov	r2, r9
 80023c0:	40da      	lsrs	r2, r3
 80023c2:	d046      	beq.n	8002452 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80023c4:	2201      	movs	r2, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	464c      	mov	r4, r9
 80023ca:	4014      	ands	r4, r2
 80023cc:	46a4      	mov	ip, r4
    if (iocurrent != 0x00u)
 80023ce:	4649      	mov	r1, r9
 80023d0:	4211      	tst	r1, r2
 80023d2:	d0f3      	beq.n	80023bc <HAL_GPIO_DeInit+0x54>
      tmp = EXTI->EXTICR[position >> 2u];
 80023d4:	089f      	lsrs	r7, r3, #2
 80023d6:	003c      	movs	r4, r7
 80023d8:	3418      	adds	r4, #24
 80023da:	00a4      	lsls	r4, r4, #2
 80023dc:	4d1f      	ldr	r5, [pc, #124]	; (800245c <HAL_GPIO_DeInit+0xf4>)
 80023de:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80023e0:	2403      	movs	r4, #3
 80023e2:	401c      	ands	r4, r3
 80023e4:	00e4      	lsls	r4, r4, #3
 80023e6:	260f      	movs	r6, #15
 80023e8:	40a6      	lsls	r6, r4
 80023ea:	4035      	ands	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80023ec:	21a0      	movs	r1, #160	; 0xa0
 80023ee:	05c9      	lsls	r1, r1, #23
 80023f0:	4288      	cmp	r0, r1
 80023f2:	d0c3      	beq.n	800237c <HAL_GPIO_DeInit+0x14>
 80023f4:	491a      	ldr	r1, [pc, #104]	; (8002460 <HAL_GPIO_DeInit+0xf8>)
 80023f6:	4288      	cmp	r0, r1
 80023f8:	d008      	beq.n	800240c <HAL_GPIO_DeInit+0xa4>
 80023fa:	491a      	ldr	r1, [pc, #104]	; (8002464 <HAL_GPIO_DeInit+0xfc>)
 80023fc:	4288      	cmp	r0, r1
 80023fe:	d008      	beq.n	8002412 <HAL_GPIO_DeInit+0xaa>
 8002400:	4919      	ldr	r1, [pc, #100]	; (8002468 <HAL_GPIO_DeInit+0x100>)
 8002402:	4288      	cmp	r0, r1
 8002404:	d0b7      	beq.n	8002376 <HAL_GPIO_DeInit+0xe>
 8002406:	2105      	movs	r1, #5
 8002408:	4688      	mov	r8, r1
 800240a:	e7b9      	b.n	8002380 <HAL_GPIO_DeInit+0x18>
 800240c:	2101      	movs	r1, #1
 800240e:	4688      	mov	r8, r1
 8002410:	e7b6      	b.n	8002380 <HAL_GPIO_DeInit+0x18>
 8002412:	2102      	movs	r1, #2
 8002414:	4688      	mov	r8, r1
 8002416:	e7b3      	b.n	8002380 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 8002418:	4d10      	ldr	r5, [pc, #64]	; (800245c <HAL_GPIO_DeInit+0xf4>)
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	4688      	mov	r8, r1
 800241e:	586c      	ldr	r4, [r5, r1]
 8002420:	4661      	mov	r1, ip
 8002422:	438c      	bics	r4, r1
 8002424:	4641      	mov	r1, r8
 8002426:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8002428:	3104      	adds	r1, #4
 800242a:	4688      	mov	r8, r1
 800242c:	586c      	ldr	r4, [r5, r1]
 800242e:	4661      	mov	r1, ip
 8002430:	438c      	bics	r4, r1
 8002432:	4641      	mov	r1, r8
 8002434:	506c      	str	r4, [r5, r1]
        EXTI->FTSR1 &= ~(iocurrent);
 8002436:	686c      	ldr	r4, [r5, #4]
 8002438:	4661      	mov	r1, ip
 800243a:	438c      	bics	r4, r1
 800243c:	606c      	str	r4, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800243e:	682c      	ldr	r4, [r5, #0]
 8002440:	438c      	bics	r4, r1
 8002442:	602c      	str	r4, [r5, #0]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002444:	003c      	movs	r4, r7
 8002446:	3418      	adds	r4, #24
 8002448:	00a4      	lsls	r4, r4, #2
 800244a:	5967      	ldr	r7, [r4, r5]
 800244c:	43b7      	bics	r7, r6
 800244e:	5167      	str	r7, [r4, r5]
 8002450:	e79a      	b.n	8002388 <HAL_GPIO_DeInit+0x20>
  }
}
 8002452:	bcc0      	pop	{r6, r7}
 8002454:	46b9      	mov	r9, r7
 8002456:	46b0      	mov	r8, r6
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40021800 	.word	0x40021800
 8002460:	50000400 	.word	0x50000400
 8002464:	50000800 	.word	0x50000800
 8002468:	50000c00 	.word	0x50000c00

0800246c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800246c:	6903      	ldr	r3, [r0, #16]
 800246e:	420b      	tst	r3, r1
 8002470:	d001      	beq.n	8002476 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002472:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002474:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8002476:	2000      	movs	r0, #0
 8002478:	e7fc      	b.n	8002474 <HAL_GPIO_ReadPin+0x8>

0800247a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800247a:	2a00      	cmp	r2, #0
 800247c:	d001      	beq.n	8002482 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247e:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002480:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002482:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002484:	e7fc      	b.n	8002480 <HAL_GPIO_WritePin+0x6>

08002486 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002486:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002488:	0013      	movs	r3, r2
 800248a:	400b      	ands	r3, r1
 800248c:	041b      	lsls	r3, r3, #16
 800248e:	4391      	bics	r1, r2
 8002490:	4319      	orrs	r1, r3
 8002492:	6181      	str	r1, [r0, #24]
}
 8002494:	4770      	bx	lr
	...

08002498 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002498:	b510      	push	{r4, lr}
 800249a:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4218      	tst	r0, r3
 80024a2:	d104      	bne.n	80024ae <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4223      	tst	r3, r4
 80024aa:	d105      	bne.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 80024ac:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b0:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80024b2:	f7fe fc9b 	bl	8000dec <HAL_GPIO_EXTI_Rising_Callback>
 80024b6:	e7f5      	b.n	80024a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ba:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80024bc:	0020      	movs	r0, r4
 80024be:	f7fe fca7 	bl	8000e10 <HAL_GPIO_EXTI_Falling_Callback>
}
 80024c2:	e7f3      	b.n	80024ac <HAL_GPIO_EXTI_IRQHandler+0x14>
 80024c4:	40021800 	.word	0x40021800

080024c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024c8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80024ca:	4a10      	ldr	r2, [pc, #64]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x44>)
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	4910      	ldr	r1, [pc, #64]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80024d0:	400b      	ands	r3, r1
 80024d2:	4303      	orrs	r3, r0
 80024d4:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4298      	cmp	r0, r3
 80024dc:	d001      	beq.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80024de:	2000      	movs	r0, #0
}
 80024e0:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0058      	lsls	r0, r3, #1
 80024e8:	18c0      	adds	r0, r0, r3
 80024ea:	0040      	lsls	r0, r0, #1
 80024ec:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80024ee:	f7fd fe07 	bl	8000100 <__udivsi3>
 80024f2:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_PWREx_ControlVoltageScaling+0x44>)
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	055b      	lsls	r3, r3, #21
 80024fa:	d503      	bpl.n	8002504 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80024fc:	2800      	cmp	r0, #0
 80024fe:	d003      	beq.n	8002508 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8002500:	3801      	subs	r0, #1
 8002502:	e7f7      	b.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
 8002506:	e7eb      	b.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8002508:	2003      	movs	r0, #3
 800250a:	e7e9      	b.n	80024e0 <HAL_PWREx_ControlVoltageScaling+0x18>
 800250c:	40007000 	.word	0x40007000
 8002510:	fffff9ff 	.word	0xfffff9ff
 8002514:	20000008 	.word	0x20000008
 8002518:	000f4240 	.word	0x000f4240

0800251c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0xa>
 8002524:	e229      	b.n	800297a <HAL_RCC_OscConfig+0x45e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	6803      	ldr	r3, [r0, #0]
 8002528:	07db      	lsls	r3, r3, #31
 800252a:	d539      	bpl.n	80025a0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252c:	4ac1      	ldr	r2, [pc, #772]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800252e:	6891      	ldr	r1, [r2, #8]
 8002530:	2338      	movs	r3, #56	; 0x38
 8002532:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	68d1      	ldr	r1, [r2, #12]
 8002536:	2203      	movs	r2, #3
 8002538:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800253a:	2b10      	cmp	r3, #16
 800253c:	d026      	beq.n	800258c <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800253e:	2b08      	cmp	r3, #8
 8002540:	d026      	beq.n	8002590 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	6863      	ldr	r3, [r4, #4]
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0252      	lsls	r2, r2, #9
 8002548:	4293      	cmp	r3, r2
 800254a:	d07f      	beq.n	800264c <HAL_RCC_OscConfig+0x130>
 800254c:	22a0      	movs	r2, #160	; 0xa0
 800254e:	02d2      	lsls	r2, r2, #11
 8002550:	4293      	cmp	r3, r2
 8002552:	d100      	bne.n	8002556 <HAL_RCC_OscConfig+0x3a>
 8002554:	e081      	b.n	800265a <HAL_RCC_OscConfig+0x13e>
 8002556:	4bb7      	ldr	r3, [pc, #732]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	49b7      	ldr	r1, [pc, #732]	; (8002838 <HAL_RCC_OscConfig+0x31c>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	49b6      	ldr	r1, [pc, #728]	; (800283c <HAL_RCC_OscConfig+0x320>)
 8002564:	400a      	ands	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002568:	6863      	ldr	r3, [r4, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_RCC_OscConfig+0x54>
 800256e:	e080      	b.n	8002672 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff fc2e 	bl	8001dd0 <HAL_GetTick>
 8002574:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002576:	4baf      	ldr	r3, [pc, #700]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	d410      	bmi.n	80025a0 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257e:	f7ff fc27 	bl	8001dd0 <HAL_GetTick>
 8002582:	1b40      	subs	r0, r0, r5
 8002584:	2864      	cmp	r0, #100	; 0x64
 8002586:	d9f6      	bls.n	8002576 <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8002588:	2003      	movs	r0, #3
 800258a:	e1f7      	b.n	800297c <HAL_RCC_OscConfig+0x460>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800258c:	2a03      	cmp	r2, #3
 800258e:	d1d6      	bne.n	800253e <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4ba8      	ldr	r3, [pc, #672]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	039b      	lsls	r3, r3, #14
 8002596:	d503      	bpl.n	80025a0 <HAL_RCC_OscConfig+0x84>
 8002598:	6863      	ldr	r3, [r4, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d100      	bne.n	80025a0 <HAL_RCC_OscConfig+0x84>
 800259e:	e1ef      	b.n	8002980 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	079b      	lsls	r3, r3, #30
 80025a4:	d531      	bpl.n	800260a <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4aa3      	ldr	r2, [pc, #652]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80025a8:	6893      	ldr	r3, [r2, #8]
 80025aa:	2138      	movs	r1, #56	; 0x38
 80025ac:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ae:	68d1      	ldr	r1, [r2, #12]
 80025b0:	2203      	movs	r2, #3
 80025b2:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d06a      	beq.n	800268e <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d16b      	bne.n	8002694 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025bc:	4a9d      	ldr	r2, [pc, #628]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	0552      	lsls	r2, r2, #21
 80025c2:	d503      	bpl.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025c4:	68e2      	ldr	r2, [r4, #12]
 80025c6:	2a00      	cmp	r2, #0
 80025c8:	d100      	bne.n	80025cc <HAL_RCC_OscConfig+0xb0>
 80025ca:	e1db      	b.n	8002984 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4899      	ldr	r0, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80025ce:	6842      	ldr	r2, [r0, #4]
 80025d0:	499b      	ldr	r1, [pc, #620]	; (8002840 <HAL_RCC_OscConfig+0x324>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	6961      	ldr	r1, [r4, #20]
 80025d6:	0209      	lsls	r1, r1, #8
 80025d8:	430a      	orrs	r2, r1
 80025da:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025e0:	6803      	ldr	r3, [r0, #0]
 80025e2:	4998      	ldr	r1, [pc, #608]	; (8002844 <HAL_RCC_OscConfig+0x328>)
 80025e4:	400b      	ands	r3, r1
 80025e6:	6921      	ldr	r1, [r4, #16]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	0adb      	lsrs	r3, r3, #11
 80025f0:	2207      	movs	r2, #7
 80025f2:	401a      	ands	r2, r3
 80025f4:	4b94      	ldr	r3, [pc, #592]	; (8002848 <HAL_RCC_OscConfig+0x32c>)
 80025f6:	40d3      	lsrs	r3, r2
 80025f8:	4a94      	ldr	r2, [pc, #592]	; (800284c <HAL_RCC_OscConfig+0x330>)
 80025fa:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x334>)
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	f7ff fb9a 	bl	8001d38 <HAL_InitTick>
 8002604:	2800      	cmp	r0, #0
 8002606:	d000      	beq.n	800260a <HAL_RCC_OscConfig+0xee>
 8002608:	e1be      	b.n	8002988 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	071b      	lsls	r3, r3, #28
 800260e:	d400      	bmi.n	8002612 <HAL_RCC_OscConfig+0xf6>
 8002610:	e081      	b.n	8002716 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002612:	4b88      	ldr	r3, [pc, #544]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	2338      	movs	r3, #56	; 0x38
 8002618:	4013      	ands	r3, r2
 800261a:	2b18      	cmp	r3, #24
 800261c:	d073      	beq.n	8002706 <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	69a3      	ldr	r3, [r4, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d100      	bne.n	8002626 <HAL_RCC_OscConfig+0x10a>
 8002624:	e0b4      	b.n	8002790 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002626:	4a83      	ldr	r2, [pc, #524]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002628:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800262a:	2101      	movs	r1, #1
 800262c:	430b      	orrs	r3, r1
 800262e:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7ff fbce 	bl	8001dd0 <HAL_GetTick>
 8002634:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	079b      	lsls	r3, r3, #30
 800263c:	d46b      	bmi.n	8002716 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263e:	f7ff fbc7 	bl	8001dd0 <HAL_GetTick>
 8002642:	1b40      	subs	r0, r0, r5
 8002644:	2802      	cmp	r0, #2
 8002646:	d9f6      	bls.n	8002636 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e197      	b.n	800297c <HAL_RCC_OscConfig+0x460>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	430b      	orrs	r3, r1
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e786      	b.n	8002568 <HAL_RCC_OscConfig+0x4c>
 800265a:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	02d2      	lsls	r2, r2, #11
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	6819      	ldr	r1, [r3, #0]
 8002668:	2280      	movs	r2, #128	; 0x80
 800266a:	0252      	lsls	r2, r2, #9
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e77a      	b.n	8002568 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002672:	f7ff fbad 	bl	8001dd0 <HAL_GetTick>
 8002676:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002678:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	039b      	lsls	r3, r3, #14
 800267e:	d58f      	bpl.n	80025a0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff fba6 	bl	8001dd0 <HAL_GetTick>
 8002684:	1b40      	subs	r0, r0, r5
 8002686:	2864      	cmp	r0, #100	; 0x64
 8002688:	d9f6      	bls.n	8002678 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 800268a:	2003      	movs	r0, #3
 800268c:	e176      	b.n	800297c <HAL_RCC_OscConfig+0x460>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800268e:	2a02      	cmp	r2, #2
 8002690:	d192      	bne.n	80025b8 <HAL_RCC_OscConfig+0x9c>
 8002692:	e793      	b.n	80025bc <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002694:	68e3      	ldr	r3, [r4, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d022      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800269a:	4a66      	ldr	r2, [pc, #408]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800269c:	6813      	ldr	r3, [r2, #0]
 800269e:	4969      	ldr	r1, [pc, #420]	; (8002844 <HAL_RCC_OscConfig+0x328>)
 80026a0:	400b      	ands	r3, r1
 80026a2:	6921      	ldr	r1, [r4, #16]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026b2:	f7ff fb8d 	bl	8001dd0 <HAL_GetTick>
 80026b6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	055b      	lsls	r3, r3, #21
 80026be:	d406      	bmi.n	80026ce <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff fb86 	bl	8001dd0 <HAL_GetTick>
 80026c4:	1b40      	subs	r0, r0, r5
 80026c6:	2802      	cmp	r0, #2
 80026c8:	d9f6      	bls.n	80026b8 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 80026ca:	2003      	movs	r0, #3
 80026cc:	e156      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4959      	ldr	r1, [pc, #356]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80026d0:	684b      	ldr	r3, [r1, #4]
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x324>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	6962      	ldr	r2, [r4, #20]
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
 80026de:	e794      	b.n	800260a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4a54      	ldr	r2, [pc, #336]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80026e2:	6813      	ldr	r3, [r2, #0]
 80026e4:	495b      	ldr	r1, [pc, #364]	; (8002854 <HAL_RCC_OscConfig+0x338>)
 80026e6:	400b      	ands	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026ea:	f7ff fb71 	bl	8001dd0 <HAL_GetTick>
 80026ee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	055b      	lsls	r3, r3, #21
 80026f6:	d588      	bpl.n	800260a <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f8:	f7ff fb6a 	bl	8001dd0 <HAL_GetTick>
 80026fc:	1b40      	subs	r0, r0, r5
 80026fe:	2802      	cmp	r0, #2
 8002700:	d9f6      	bls.n	80026f0 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
 8002704:	e13a      	b.n	800297c <HAL_RCC_OscConfig+0x460>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	079b      	lsls	r3, r3, #30
 800270c:	d503      	bpl.n	8002716 <HAL_RCC_OscConfig+0x1fa>
 800270e:	69a3      	ldr	r3, [r4, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d100      	bne.n	8002716 <HAL_RCC_OscConfig+0x1fa>
 8002714:	e13a      	b.n	800298c <HAL_RCC_OscConfig+0x470>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	075b      	lsls	r3, r3, #29
 800271a:	d400      	bmi.n	800271e <HAL_RCC_OscConfig+0x202>
 800271c:	e0a2      	b.n	8002864 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800271e:	4b45      	ldr	r3, [pc, #276]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	2338      	movs	r3, #56	; 0x38
 8002724:	4013      	ands	r3, r2
 8002726:	2b20      	cmp	r3, #32
 8002728:	d045      	beq.n	80027b6 <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800272a:	4b42      	ldr	r3, [pc, #264]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	d44a      	bmi.n	80027c8 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002734:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002736:	2080      	movs	r0, #128	; 0x80
 8002738:	0540      	lsls	r0, r0, #21
 800273a:	4301      	orrs	r1, r0
 800273c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800273e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8002740:	4003      	ands	r3, r0
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002746:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_OscConfig+0x33c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	d53d      	bpl.n	80027cc <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	68a3      	ldr	r3, [r4, #8]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d04e      	beq.n	80027f4 <HAL_RCC_OscConfig+0x2d8>
 8002756:	2b05      	cmp	r3, #5
 8002758:	d052      	beq.n	8002800 <HAL_RCC_OscConfig+0x2e4>
 800275a:	4b36      	ldr	r3, [pc, #216]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800275c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c
 8002764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002766:	3103      	adds	r1, #3
 8002768:	438a      	bics	r2, r1
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276c:	68a3      	ldr	r3, [r4, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d050      	beq.n	8002814 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7ff fb2d 	bl	8001dd0 <HAL_GetTick>
 8002776:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	079b      	lsls	r3, r3, #30
 800277e:	d46f      	bmi.n	8002860 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7ff fb26 	bl	8001dd0 <HAL_GetTick>
 8002784:	1b80      	subs	r0, r0, r6
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_RCC_OscConfig+0x340>)
 8002788:	4298      	cmp	r0, r3
 800278a:	d9f5      	bls.n	8002778 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 800278c:	2003      	movs	r0, #3
 800278e:	e0f5      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_LSI_DISABLE();
 8002790:	4a28      	ldr	r2, [pc, #160]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002792:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002794:	2101      	movs	r1, #1
 8002796:	438b      	bics	r3, r1
 8002798:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800279a:	f7ff fb19 	bl	8001dd0 <HAL_GetTick>
 800279e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80027a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a4:	079b      	lsls	r3, r3, #30
 80027a6:	d5b6      	bpl.n	8002716 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff fb12 	bl	8001dd0 <HAL_GetTick>
 80027ac:	1b40      	subs	r0, r0, r5
 80027ae:	2802      	cmp	r0, #2
 80027b0:	d9f6      	bls.n	80027a0 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 80027b2:	2003      	movs	r0, #3
 80027b4:	e0e2      	b.n	800297c <HAL_RCC_OscConfig+0x460>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	079b      	lsls	r3, r3, #30
 80027bc:	d552      	bpl.n	8002864 <HAL_RCC_OscConfig+0x348>
 80027be:	68a3      	ldr	r3, [r4, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d14f      	bne.n	8002864 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 80027c4:	2001      	movs	r0, #1
 80027c6:	e0d9      	b.n	800297c <HAL_RCC_OscConfig+0x460>
    FlagStatus       pwrclkchanged = RESET;
 80027c8:	2500      	movs	r5, #0
 80027ca:	e7bd      	b.n	8002748 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027cc:	4a22      	ldr	r2, [pc, #136]	; (8002858 <HAL_RCC_OscConfig+0x33c>)
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	430b      	orrs	r3, r1
 80027d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027d8:	f7ff fafa 	bl	8001dd0 <HAL_GetTick>
 80027dc:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_OscConfig+0x33c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	05db      	lsls	r3, r3, #23
 80027e4:	d4b4      	bmi.n	8002750 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7ff faf3 	bl	8001dd0 <HAL_GetTick>
 80027ea:	1b80      	subs	r0, r0, r6
 80027ec:	2802      	cmp	r0, #2
 80027ee:	d9f6      	bls.n	80027de <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 80027f0:	2003      	movs	r0, #3
 80027f2:	e0c3      	b.n	800297c <HAL_RCC_OscConfig+0x460>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 80027f6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80027f8:	2101      	movs	r1, #1
 80027fa:	430b      	orrs	r3, r1
 80027fc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027fe:	e7b5      	b.n	800276c <HAL_RCC_OscConfig+0x250>
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 8002802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002804:	2104      	movs	r1, #4
 8002806:	430a      	orrs	r2, r1
 8002808:	65da      	str	r2, [r3, #92]	; 0x5c
 800280a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800280c:	3903      	subs	r1, #3
 800280e:	430a      	orrs	r2, r1
 8002810:	65da      	str	r2, [r3, #92]	; 0x5c
 8002812:	e7ab      	b.n	800276c <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff fadc 	bl	8001dd0 <HAL_GetTick>
 8002818:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_OscConfig+0x318>)
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	079b      	lsls	r3, r3, #30
 8002820:	d51e      	bpl.n	8002860 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7ff fad5 	bl	8001dd0 <HAL_GetTick>
 8002826:	1b80      	subs	r0, r0, r6
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_RCC_OscConfig+0x340>)
 800282a:	4298      	cmp	r0, r3
 800282c:	d9f5      	bls.n	800281a <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 800282e:	2003      	movs	r0, #3
 8002830:	e0a4      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	40021000 	.word	0x40021000
 8002838:	fffeffff 	.word	0xfffeffff
 800283c:	fffbffff 	.word	0xfffbffff
 8002840:	ffff80ff 	.word	0xffff80ff
 8002844:	ffffc7ff 	.word	0xffffc7ff
 8002848:	00f42400 	.word	0x00f42400
 800284c:	20000008 	.word	0x20000008
 8002850:	20000010 	.word	0x20000010
 8002854:	fffffeff 	.word	0xfffffeff
 8002858:	40007000 	.word	0x40007000
 800285c:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002860:	2d01      	cmp	r5, #1
 8002862:	d01e      	beq.n	80028a2 <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002864:	69e3      	ldr	r3, [r4, #28]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <HAL_RCC_OscConfig+0x350>
 800286a:	e091      	b.n	8002990 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 800286e:	6891      	ldr	r1, [r2, #8]
 8002870:	2238      	movs	r2, #56	; 0x38
 8002872:	400a      	ands	r2, r1
 8002874:	2a10      	cmp	r2, #16
 8002876:	d05e      	beq.n	8002936 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002878:	2b02      	cmp	r3, #2
 800287a:	d018      	beq.n	80028ae <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4a4b      	ldr	r2, [pc, #300]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	494b      	ldr	r1, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x494>)
 8002882:	400b      	ands	r3, r1
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff faa3 	bl	8001dd0 <HAL_GetTick>
 800288a:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	d549      	bpl.n	8002928 <HAL_RCC_OscConfig+0x40c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff fa9c 	bl	8001dd0 <HAL_GetTick>
 8002898:	1b00      	subs	r0, r0, r4
 800289a:	2802      	cmp	r0, #2
 800289c:	d9f6      	bls.n	800288c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800289e:	2003      	movs	r0, #3
 80028a0:	e06c      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4a42      	ldr	r2, [pc, #264]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 80028a4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80028a6:	4943      	ldr	r1, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x498>)
 80028a8:	400b      	ands	r3, r1
 80028aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80028ac:	e7da      	b.n	8002864 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	493f      	ldr	r1, [pc, #252]	; (80029b0 <HAL_RCC_OscConfig+0x494>)
 80028b4:	400b      	ands	r3, r1
 80028b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028b8:	f7ff fa8a 	bl	8001dd0 <HAL_GetTick>
 80028bc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	d506      	bpl.n	80028d4 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c6:	f7ff fa83 	bl	8001dd0 <HAL_GetTick>
 80028ca:	1b40      	subs	r0, r0, r5
 80028cc:	2802      	cmp	r0, #2
 80028ce:	d9f6      	bls.n	80028be <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 80028d0:	2003      	movs	r0, #3
 80028d2:	e053      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d4:	4a35      	ldr	r2, [pc, #212]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 80028d6:	68d3      	ldr	r3, [r2, #12]
 80028d8:	4937      	ldr	r1, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x49c>)
 80028da:	4019      	ands	r1, r3
 80028dc:	6a23      	ldr	r3, [r4, #32]
 80028de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80028e0:	4303      	orrs	r3, r0
 80028e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028e4:	0200      	lsls	r0, r0, #8
 80028e6:	4303      	orrs	r3, r0
 80028e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028ea:	4303      	orrs	r3, r0
 80028ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80028ee:	4303      	orrs	r3, r0
 80028f0:	430b      	orrs	r3, r1
 80028f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	2380      	movs	r3, #128	; 0x80
 80028f8:	045b      	lsls	r3, r3, #17
 80028fa:	430b      	orrs	r3, r1
 80028fc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028fe:	68d1      	ldr	r1, [r2, #12]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	055b      	lsls	r3, r3, #21
 8002904:	430b      	orrs	r3, r1
 8002906:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002908:	f7ff fa62 	bl	8001dd0 <HAL_GetTick>
 800290c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	019b      	lsls	r3, r3, #6
 8002914:	d406      	bmi.n	8002924 <HAL_RCC_OscConfig+0x408>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7ff fa5b 	bl	8001dd0 <HAL_GetTick>
 800291a:	1b00      	subs	r0, r0, r4
 800291c:	2802      	cmp	r0, #2
 800291e:	d9f6      	bls.n	800290e <HAL_RCC_OscConfig+0x3f2>
            return HAL_TIMEOUT;
 8002920:	2003      	movs	r0, #3
 8002922:	e02b      	b.n	800297c <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002924:	2000      	movs	r0, #0
 8002926:	e029      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 800292a:	68d3      	ldr	r3, [r2, #12]
 800292c:	4923      	ldr	r1, [pc, #140]	; (80029bc <HAL_RCC_OscConfig+0x4a0>)
 800292e:	400b      	ands	r3, r1
 8002930:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002932:	2000      	movs	r0, #0
 8002934:	e022      	b.n	800297c <HAL_RCC_OscConfig+0x460>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002936:	2b01      	cmp	r3, #1
 8002938:	d02c      	beq.n	8002994 <HAL_RCC_OscConfig+0x478>
        temp_pllckcfg = RCC->PLLCFGR;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_RCC_OscConfig+0x490>)
 800293c:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	2303      	movs	r3, #3
 8002940:	4013      	ands	r3, r2
 8002942:	6a21      	ldr	r1, [r4, #32]
 8002944:	428b      	cmp	r3, r1
 8002946:	d127      	bne.n	8002998 <HAL_RCC_OscConfig+0x47c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002948:	2370      	movs	r3, #112	; 0x70
 800294a:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800294e:	428b      	cmp	r3, r1
 8002950:	d124      	bne.n	800299c <HAL_RCC_OscConfig+0x480>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002952:	21fe      	movs	r1, #254	; 0xfe
 8002954:	01c9      	lsls	r1, r1, #7
 8002956:	4011      	ands	r1, r2
 8002958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800295a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	4299      	cmp	r1, r3
 800295e:	d11f      	bne.n	80029a0 <HAL_RCC_OscConfig+0x484>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002960:	23f8      	movs	r3, #248	; 0xf8
 8002962:	039b      	lsls	r3, r3, #14
 8002964:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002966:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002968:	428b      	cmp	r3, r1
 800296a:	d11b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x488>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800296c:	0f52      	lsrs	r2, r2, #29
 800296e:	0752      	lsls	r2, r2, #29
 8002970:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x460>
    return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
}
 800297c:	b002      	add	sp, #8
 800297e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002980:	2001      	movs	r0, #1
 8002982:	e7fb      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 8002984:	2001      	movs	r0, #1
 8002986:	e7f9      	b.n	800297c <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8002988:	2001      	movs	r0, #1
 800298a:	e7f7      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 800298c:	2001      	movs	r0, #1
 800298e:	e7f5      	b.n	800297c <HAL_RCC_OscConfig+0x460>
  return HAL_OK;
 8002990:	2000      	movs	r0, #0
 8002992:	e7f3      	b.n	800297c <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 8002994:	2001      	movs	r0, #1
 8002996:	e7f1      	b.n	800297c <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	e7ef      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 800299c:	2001      	movs	r0, #1
 800299e:	e7ed      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 80029a0:	2001      	movs	r0, #1
 80029a2:	e7eb      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 80029a4:	2001      	movs	r0, #1
 80029a6:	e7e9      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 80029a8:	2001      	movs	r0, #1
 80029aa:	e7e7      	b.n	800297c <HAL_RCC_OscConfig+0x460>
 80029ac:	40021000 	.word	0x40021000
 80029b0:	feffffff 	.word	0xfeffffff
 80029b4:	efffffff 	.word	0xefffffff
 80029b8:	1fc1808c 	.word	0x1fc1808c
 80029bc:	effefffc 	.word	0xeffefffc

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2238      	movs	r2, #56	; 0x38
 80029c8:	421a      	tst	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029cc:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	0ad2      	lsrs	r2, r2, #11
 80029d2:	2307      	movs	r3, #7
 80029d4:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029d6:	4826      	ldr	r0, [pc, #152]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029d8:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80029da:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	2338      	movs	r3, #56	; 0x38
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d03b      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	2338      	movs	r3, #56	; 0x38
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d00d      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	2338      	movs	r3, #56	; 0x38
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d031      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	2338      	movs	r3, #56	; 0x38
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b18      	cmp	r3, #24
 8002a0a:	d026      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8002a0c:	2000      	movs	r0, #0
  return sysclockfreq;
 8002a0e:	e7e4      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a10:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002a12:	68d1      	ldr	r1, [r2, #12]
 8002a14:	3b0d      	subs	r3, #13
 8002a16:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a18:	68d2      	ldr	r2, [r2, #12]
 8002a1a:	0912      	lsrs	r2, r2, #4
 8002a1c:	2107      	movs	r1, #7
 8002a1e:	4011      	ands	r1, r2
 8002a20:	3101      	adds	r1, #1
    switch (pllsource)
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d00f      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a26:	4812      	ldr	r0, [pc, #72]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a28:	f7fd fb6a 	bl	8000100 <__udivsi3>
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	0a12      	lsrs	r2, r2, #8
 8002a32:	237f      	movs	r3, #127	; 0x7f
 8002a34:	4013      	ands	r3, r2
 8002a36:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002a3a:	68d9      	ldr	r1, [r3, #12]
 8002a3c:	0f49      	lsrs	r1, r1, #29
 8002a3e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002a40:	f7fd fb5e 	bl	8000100 <__udivsi3>
 8002a44:	e7c9      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a46:	480b      	ldr	r0, [pc, #44]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a48:	f7fd fb5a 	bl	8000100 <__udivsi3>
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xac>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	0a12      	lsrs	r2, r2, #8
 8002a52:	237f      	movs	r3, #127	; 0x7f
 8002a54:	4013      	ands	r3, r2
 8002a56:	4358      	muls	r0, r3
        break;
 8002a58:	e7ee      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8002a5a:	20fa      	movs	r0, #250	; 0xfa
 8002a5c:	01c0      	lsls	r0, r0, #7
 8002a5e:	e7bc      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8002a60:	4804      	ldr	r0, [pc, #16]	; (8002a74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a62:	e7ba      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8002a64:	2080      	movs	r0, #128	; 0x80
 8002a66:	0200      	lsls	r0, r0, #8
 8002a68:	e7b7      	b.n	80029da <HAL_RCC_GetSysClockFreq+0x1a>
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200

08002a78 <HAL_RCC_ClockConfig>:
{
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	0004      	movs	r4, r0
 8002a7c:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d100      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xc>
 8002a82:	e0aa      	b.n	8002bda <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b57      	ldr	r3, [pc, #348]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2307      	movs	r3, #7
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d321      	bcc.n	8002ad4 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	079a      	lsls	r2, r3, #30
 8002a94:	d50e      	bpl.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a96:	075b      	lsls	r3, r3, #29
 8002a98:	d505      	bpl.n	8002aa6 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a9a:	4a53      	ldr	r2, [pc, #332]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002a9c:	6891      	ldr	r1, [r2, #8]
 8002a9e:	23e0      	movs	r3, #224	; 0xe0
 8002aa0:	01db      	lsls	r3, r3, #7
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa6:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002aa8:	6893      	ldr	r3, [r2, #8]
 8002aaa:	4950      	ldr	r1, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x174>)
 8002aac:	400b      	ands	r3, r1
 8002aae:	68a1      	ldr	r1, [r4, #8]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	07db      	lsls	r3, r3, #31
 8002ab8:	d554      	bpl.n	8002b64 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	6863      	ldr	r3, [r4, #4]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d13f      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4a47      	ldr	r2, [pc, #284]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	0552      	lsls	r2, r2, #21
 8002ace:	d41c      	bmi.n	8002b0a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e06a      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad4:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	2107      	movs	r1, #7
 8002ada:	438b      	bics	r3, r1
 8002adc:	432b      	orrs	r3, r5
 8002ade:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ae0:	f7ff f976 	bl	8001dd0 <HAL_GetTick>
 8002ae4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	2307      	movs	r3, #7
 8002aec:	4013      	ands	r3, r2
 8002aee:	42ab      	cmp	r3, r5
 8002af0:	d0ce      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7ff f96d 	bl	8001dd0 <HAL_GetTick>
 8002af6:	1b80      	subs	r0, r0, r6
 8002af8:	4a3d      	ldr	r2, [pc, #244]	; (8002bf0 <HAL_RCC_ClockConfig+0x178>)
 8002afa:	4290      	cmp	r0, r2
 8002afc:	d9f3      	bls.n	8002ae6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8002afe:	2003      	movs	r0, #3
 8002b00:	e053      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b02:	4a39      	ldr	r2, [pc, #228]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	0392      	lsls	r2, r2, #14
 8002b08:	d569      	bpl.n	8002bde <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4937      	ldr	r1, [pc, #220]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b0c:	688a      	ldr	r2, [r1, #8]
 8002b0e:	2007      	movs	r0, #7
 8002b10:	4382      	bics	r2, r0
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002b16:	f7ff f95b 	bl	8001dd0 <HAL_GetTick>
 8002b1a:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2238      	movs	r2, #56	; 0x38
 8002b22:	401a      	ands	r2, r3
 8002b24:	6863      	ldr	r3, [r4, #4]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d01b      	beq.n	8002b64 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7ff f950 	bl	8001dd0 <HAL_GetTick>
 8002b30:	1b80      	subs	r0, r0, r6
 8002b32:	4b2f      	ldr	r3, [pc, #188]	; (8002bf0 <HAL_RCC_ClockConfig+0x178>)
 8002b34:	4298      	cmp	r0, r3
 8002b36:	d9f1      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
 8002b3a:	e036      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	0192      	lsls	r2, r2, #6
 8002b42:	d4e2      	bmi.n	8002b0a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
 8002b46:	e030      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b50:	0792      	lsls	r2, r2, #30
 8002b52:	d4da      	bmi.n	8002b0a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8002b54:	2001      	movs	r0, #1
 8002b56:	e028      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b58:	4a23      	ldr	r2, [pc, #140]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b5a:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8002b5c:	0792      	lsls	r2, r2, #30
 8002b5e:	d4d4      	bmi.n	8002b0a <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8002b60:	2001      	movs	r0, #1
 8002b62:	e022      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2307      	movs	r3, #7
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	42ab      	cmp	r3, r5
 8002b6e:	d81d      	bhi.n	8002bac <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	075b      	lsls	r3, r3, #29
 8002b74:	d506      	bpl.n	8002b84 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b78:	6893      	ldr	r3, [r2, #8]
 8002b7a:	491e      	ldr	r1, [pc, #120]	; (8002bf4 <HAL_RCC_ClockConfig+0x17c>)
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	68e1      	ldr	r1, [r4, #12]
 8002b80:	430b      	orrs	r3, r1
 8002b82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b84:	f7ff ff1c 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_RCC_ClockConfig+0x170>)
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	0a12      	lsrs	r2, r2, #8
 8002b8e:	230f      	movs	r3, #15
 8002b90:	4013      	ands	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_RCC_ClockConfig+0x180>)
 8002b96:	589a      	ldr	r2, [r3, r2]
 8002b98:	231f      	movs	r3, #31
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	40d8      	lsrs	r0, r3
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_RCC_ClockConfig+0x184>)
 8002ba0:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <HAL_RCC_ClockConfig+0x188>)
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	f7ff f8c7 	bl	8001d38 <HAL_InitTick>
}
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	2107      	movs	r1, #7
 8002bb2:	438b      	bics	r3, r1
 8002bb4:	432b      	orrs	r3, r5
 8002bb6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002bb8:	f7ff f90a 	bl	8001dd0 <HAL_GetTick>
 8002bbc:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x16c>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	42ab      	cmp	r3, r5
 8002bc8:	d0d2      	beq.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7ff f901 	bl	8001dd0 <HAL_GetTick>
 8002bce:	1b80      	subs	r0, r0, r6
 8002bd0:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCC_ClockConfig+0x178>)
 8002bd2:	4298      	cmp	r0, r3
 8002bd4:	d9f3      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	e7e7      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e7e5      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8002bde:	2001      	movs	r0, #1
 8002be0:	e7e3      	b.n	8002baa <HAL_RCC_ClockConfig+0x132>
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	fffff0ff 	.word	0xfffff0ff
 8002bf0:	00001388 	.word	0x00001388
 8002bf4:	ffff8fff 	.word	0xffff8fff
 8002bf8:	08004f24 	.word	0x08004f24
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	20000010 	.word	0x20000010

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002c04:	4b01      	ldr	r3, [pc, #4]	; (8002c0c <HAL_RCC_GetHCLKFreq+0x8>)
 8002c06:	6818      	ldr	r0, [r3, #0]
}
 8002c08:	4770      	bx	lr
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	20000008 	.word	0x20000008

08002c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	46d6      	mov	lr, sl
 8002c14:	464f      	mov	r7, r9
 8002c16:	4646      	mov	r6, r8
 8002c18:	b5c0      	push	{r6, r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	0006      	movs	r6, r0
 8002c1e:	000d      	movs	r5, r1
 8002c20:	4690      	mov	r8, r2
 8002c22:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c24:	f7ff f8d4 	bl	8001dd0 <HAL_GetTick>
 8002c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c2a:	1a18      	subs	r0, r3, r0
 8002c2c:	4681      	mov	r9, r0
 8002c2e:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 8002c30:	f7ff f8ce 	bl	8001dd0 <HAL_GetTick>
 8002c34:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <SPI_WaitFlagStateUntilTimeout+0xe0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	015b      	lsls	r3, r3, #5
 8002c3c:	0d1b      	lsrs	r3, r3, #20
 8002c3e:	464a      	mov	r2, r9
 8002c40:	4353      	muls	r3, r2
 8002c42:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c44:	6833      	ldr	r3, [r6, #0]
 8002c46:	689c      	ldr	r4, [r3, #8]
 8002c48:	402c      	ands	r4, r5
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	4263      	negs	r3, r4
 8002c4e:	415c      	adcs	r4, r3
 8002c50:	4544      	cmp	r4, r8
 8002c52:	d045      	beq.n	8002ce0 <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	1c7b      	adds	r3, r7, #1
 8002c56:	d0f5      	beq.n	8002c44 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c58:	f7ff f8ba 	bl	8001dd0 <HAL_GetTick>
 8002c5c:	4653      	mov	r3, sl
 8002c5e:	1ac0      	subs	r0, r0, r3
 8002c60:	4548      	cmp	r0, r9
 8002c62:	d20b      	bcs.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8002c64:	464b      	mov	r3, r9
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c6a:	9a01      	ldr	r2, [sp, #4]
 8002c6c:	2a00      	cmp	r2, #0
 8002c6e:	d000      	beq.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0x62>
 8002c70:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002c72:	9b01      	ldr	r3, [sp, #4]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	4691      	mov	r9, r2
 8002c7a:	e7e3      	b.n	8002c44 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7c:	6832      	ldr	r2, [r6, #0]
 8002c7e:	6853      	ldr	r3, [r2, #4]
 8002c80:	21e0      	movs	r1, #224	; 0xe0
 8002c82:	438b      	bics	r3, r1
 8002c84:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c86:	2382      	movs	r3, #130	; 0x82
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	6872      	ldr	r2, [r6, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d00c      	beq.n	8002caa <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	019b      	lsls	r3, r3, #6
 8002c94:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d016      	beq.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8002c9a:	235d      	movs	r3, #93	; 0x5d
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002ca6:	2003      	movs	r0, #3
 8002ca8:	e01b      	b.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002caa:	68b3      	ldr	r3, [r6, #8]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0212      	lsls	r2, r2, #8
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d1e9      	bne.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8002cbc:	6832      	ldr	r2, [r6, #0]
 8002cbe:	6813      	ldr	r3, [r2, #0]
 8002cc0:	2140      	movs	r1, #64	; 0x40
 8002cc2:	438b      	bics	r3, r1
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e7e3      	b.n	8002c90 <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8002cc8:	6832      	ldr	r2, [r6, #0]
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	6832      	ldr	r2, [r6, #0]
 8002cd4:	6811      	ldr	r1, [r2, #0]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	019b      	lsls	r3, r3, #6
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e7dc      	b.n	8002c9a <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
}
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bce0      	pop	{r5, r6, r7}
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	46b1      	mov	r9, r6
 8002cea:	46a8      	mov	r8, r5
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	ffffdfff 	.word	0xffffdfff

08002cf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	46de      	mov	lr, fp
 8002cfc:	4657      	mov	r7, sl
 8002cfe:	464e      	mov	r6, r9
 8002d00:	4645      	mov	r5, r8
 8002d02:	b5e0      	push	{r5, r6, r7, lr}
 8002d04:	b083      	sub	sp, #12
 8002d06:	0007      	movs	r7, r0
 8002d08:	000d      	movs	r5, r1
 8002d0a:	0016      	movs	r6, r2
 8002d0c:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d0e:	466b      	mov	r3, sp
 8002d10:	2200      	movs	r2, #0
 8002d12:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d14:	f7ff f85c 	bl	8001dd0 <HAL_GetTick>
 8002d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d1a:	1a18      	subs	r0, r3, r0
 8002d1c:	4440      	add	r0, r8
 8002d1e:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8002d20:	f7ff f856 	bl	8001dd0 <HAL_GetTick>
 8002d24:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	0093      	lsls	r3, r2, #2
 8002d30:	189a      	adds	r2, r3, r2
 8002d32:	00d3      	lsls	r3, r2, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	0d1b      	lsrs	r3, r3, #20
 8002d38:	464a      	mov	r2, r9
 8002d3a:	4353      	muls	r3, r2
 8002d3c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d3e:	e002      	b.n	8002d46 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d40:	4643      	mov	r3, r8
 8002d42:	3301      	adds	r3, #1
 8002d44:	d111      	bne.n	8002d6a <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689c      	ldr	r4, [r3, #8]
 8002d4a:	402c      	ands	r4, r5
 8002d4c:	42b4      	cmp	r4, r6
 8002d4e:	d050      	beq.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d50:	23c0      	movs	r3, #192	; 0xc0
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	429d      	cmp	r5, r3
 8002d56:	d1f3      	bne.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x48>
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d1f1      	bne.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 8002d5c:	465b      	mov	r3, fp
 8002d5e:	7b1b      	ldrb	r3, [r3, #12]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	466a      	mov	r2, sp
 8002d64:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 8002d66:	78d3      	ldrb	r3, [r2, #3]
 8002d68:	e7ea      	b.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d6a:	f7ff f831 	bl	8001dd0 <HAL_GetTick>
 8002d6e:	4653      	mov	r3, sl
 8002d70:	1ac0      	subs	r0, r0, r3
 8002d72:	4548      	cmp	r0, r9
 8002d74:	d20b      	bcs.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x96>
 8002d76:	464b      	mov	r3, r9
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d7c:	9a01      	ldr	r2, [sp, #4]
 8002d7e:	2a00      	cmp	r2, #0
 8002d80:	d000      	beq.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x8c>
 8002d82:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	9301      	str	r3, [sp, #4]
 8002d8a:	4691      	mov	r9, r2
 8002d8c:	e7db      	b.n	8002d46 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	6853      	ldr	r3, [r2, #4]
 8002d92:	21e0      	movs	r1, #224	; 0xe0
 8002d94:	438b      	bics	r3, r1
 8002d96:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d98:	2382      	movs	r3, #130	; 0x82
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d00c      	beq.n	8002dbc <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	019b      	lsls	r3, r3, #6
 8002da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d016      	beq.n	8002dda <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 8002dac:	235d      	movs	r3, #93	; 0x5d
 8002dae:	2201      	movs	r2, #1
 8002db0:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8002db2:	3b01      	subs	r3, #1
 8002db4:	2200      	movs	r2, #0
 8002db6:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002db8:	2003      	movs	r0, #3
 8002dba:	e01b      	b.n	8002df4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	0212      	lsls	r2, r2, #8
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d003      	beq.n	8002dce <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	00d2      	lsls	r2, r2, #3
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d1e9      	bne.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	6813      	ldr	r3, [r2, #0]
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	438b      	bics	r3, r1
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	e7e3      	b.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	6813      	ldr	r3, [r2, #0]
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <SPI_WaitFifoStateUntilTimeout+0x110>)
 8002de0:	400b      	ands	r3, r1
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e7dc      	b.n	8002dac <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 8002df2:	2000      	movs	r0, #0
}
 8002df4:	b003      	add	sp, #12
 8002df6:	bcf0      	pop	{r4, r5, r6, r7}
 8002df8:	46bb      	mov	fp, r7
 8002dfa:	46b2      	mov	sl, r6
 8002dfc:	46a9      	mov	r9, r5
 8002dfe:	46a0      	mov	r8, r4
 8002e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	20000008 	.word	0x20000008
 8002e08:	ffffdfff 	.word	0xffffdfff

08002e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	0004      	movs	r4, r0
 8002e12:	000d      	movs	r5, r1
 8002e14:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e16:	21c0      	movs	r1, #192	; 0xc0
 8002e18:	9200      	str	r2, [sp, #0]
 8002e1a:	002b      	movs	r3, r5
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	0149      	lsls	r1, r1, #5
 8002e20:	f7ff ff6a 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d118      	bne.n	8002e5a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e28:	9600      	str	r6, [sp, #0]
 8002e2a:	002b      	movs	r3, r5
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0020      	movs	r0, r4
 8002e32:	f7ff feed 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d116      	bne.n	8002e68 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e3a:	21c0      	movs	r1, #192	; 0xc0
 8002e3c:	9600      	str	r6, [sp, #0]
 8002e3e:	002b      	movs	r3, r5
 8002e40:	2200      	movs	r2, #0
 8002e42:	00c9      	lsls	r1, r1, #3
 8002e44:	0020      	movs	r0, r4
 8002e46:	f7ff ff57 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d00a      	beq.n	8002e64 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e50:	2220      	movs	r2, #32
 8002e52:	4313      	orrs	r3, r2
 8002e54:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e56:	2003      	movs	r0, #3
 8002e58:	e004      	b.n	8002e64 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e62:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8002e64:	b002      	add	sp, #8
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e70:	2003      	movs	r0, #3
 8002e72:	e7f7      	b.n	8002e64 <SPI_EndRxTxTransaction+0x58>

08002e74 <SPI_EndRxTransaction>:
{
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	0004      	movs	r4, r0
 8002e7a:	000d      	movs	r5, r1
 8002e7c:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e7e:	2382      	movs	r3, #130	; 0x82
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	6842      	ldr	r2, [r0, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d00f      	beq.n	8002ea8 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e88:	9600      	str	r6, [sp, #0]
 8002e8a:	002b      	movs	r3, r5
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	0020      	movs	r0, r4
 8002e92:	f7ff febd 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d115      	bne.n	8002ec6 <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9a:	2382      	movs	r3, #130	; 0x82
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	6862      	ldr	r2, [r4, #4]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d016      	beq.n	8002ed2 <SPI_EndRxTransaction+0x5e>
}
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea8:	6883      	ldr	r3, [r0, #8]
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	0212      	lsls	r2, r2, #8
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	00d2      	lsls	r2, r2, #3
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d1e6      	bne.n	8002e88 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8002eba:	6822      	ldr	r2, [r4, #0]
 8002ebc:	6813      	ldr	r3, [r2, #0]
 8002ebe:	2140      	movs	r1, #64	; 0x40
 8002ec0:	438b      	bics	r3, r1
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	e7e0      	b.n	8002e88 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ec8:	2220      	movs	r2, #32
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ece:	2003      	movs	r0, #3
 8002ed0:	e7e8      	b.n	8002ea4 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed2:	68a3      	ldr	r3, [r4, #8]
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	0212      	lsls	r2, r2, #8
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	00d2      	lsls	r2, r2, #3
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d1df      	bne.n	8002ea4 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ee4:	21c0      	movs	r1, #192	; 0xc0
 8002ee6:	9600      	str	r6, [sp, #0]
 8002ee8:	002b      	movs	r3, r5
 8002eea:	2200      	movs	r2, #0
 8002eec:	00c9      	lsls	r1, r1, #3
 8002eee:	0020      	movs	r0, r4
 8002ef0:	f7ff ff02 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	d0d5      	beq.n	8002ea4 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ef8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002efa:	2220      	movs	r2, #32
 8002efc:	4313      	orrs	r3, r2
 8002efe:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f00:	2003      	movs	r0, #3
 8002f02:	e7cf      	b.n	8002ea4 <SPI_EndRxTransaction+0x30>

08002f04 <HAL_SPI_Init>:
{
 8002f04:	b510      	push	{r4, lr}
 8002f06:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8002f08:	d100      	bne.n	8002f0c <HAL_SPI_Init+0x8>
 8002f0a:	e09c      	b.n	8003046 <HAL_SPI_Init+0x142>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d107      	bne.n	8002f22 <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f12:	3305      	adds	r3, #5
 8002f14:	33ff      	adds	r3, #255	; 0xff
 8002f16:	6842      	ldr	r2, [r0, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d005      	beq.n	8002f28 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61c3      	str	r3, [r0, #28]
 8002f20:	e002      	b.n	8002f28 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f26:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f28:	235d      	movs	r3, #93	; 0x5d
 8002f2a:	5ce3      	ldrb	r3, [r4, r3]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d063      	beq.n	8002ff8 <HAL_SPI_Init+0xf4>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f30:	235d      	movs	r3, #93	; 0x5d
 8002f32:	2202      	movs	r2, #2
 8002f34:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8002f36:	6822      	ldr	r2, [r4, #0]
 8002f38:	6813      	ldr	r3, [r2, #0]
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	438b      	bics	r3, r1
 8002f3e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f40:	68e3      	ldr	r3, [r4, #12]
 8002f42:	22e0      	movs	r2, #224	; 0xe0
 8002f44:	00d2      	lsls	r2, r2, #3
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d95d      	bls.n	8003006 <HAL_SPI_Init+0x102>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f4c:	21f0      	movs	r1, #240	; 0xf0
 8002f4e:	0109      	lsls	r1, r1, #4
 8002f50:	428b      	cmp	r3, r1
 8002f52:	d005      	beq.n	8002f60 <HAL_SPI_Init+0x5c>
 8002f54:	21e0      	movs	r1, #224	; 0xe0
 8002f56:	00c9      	lsls	r1, r1, #3
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f60:	2382      	movs	r3, #130	; 0x82
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	6861      	ldr	r1, [r4, #4]
 8002f66:	400b      	ands	r3, r1
 8002f68:	2184      	movs	r1, #132	; 0x84
 8002f6a:	0209      	lsls	r1, r1, #8
 8002f6c:	68a0      	ldr	r0, [r4, #8]
 8002f6e:	4001      	ands	r1, r0
 8002f70:	430b      	orrs	r3, r1
 8002f72:	2102      	movs	r1, #2
 8002f74:	6920      	ldr	r0, [r4, #16]
 8002f76:	4001      	ands	r1, r0
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	6960      	ldr	r0, [r4, #20]
 8002f7e:	4001      	ands	r1, r0
 8002f80:	430b      	orrs	r3, r1
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	0089      	lsls	r1, r1, #2
 8002f86:	69a0      	ldr	r0, [r4, #24]
 8002f88:	4001      	ands	r1, r0
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	2138      	movs	r1, #56	; 0x38
 8002f8e:	69e0      	ldr	r0, [r4, #28]
 8002f90:	4001      	ands	r1, r0
 8002f92:	430b      	orrs	r3, r1
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	6a20      	ldr	r0, [r4, #32]
 8002f98:	4001      	ands	r1, r0
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	2080      	movs	r0, #128	; 0x80
 8002f9e:	0180      	lsls	r0, r0, #6
 8002fa0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002fa2:	4001      	ands	r1, r0
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6821      	ldr	r1, [r4, #0]
 8002fa8:	600b      	str	r3, [r1, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002faa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fac:	4283      	cmp	r3, r0
 8002fae:	d02d      	beq.n	800300c <HAL_SPI_Init+0x108>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fb0:	8b61      	ldrh	r1, [r4, #26]
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	400b      	ands	r3, r1
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002fba:	4001      	ands	r1, r0
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	2108      	movs	r1, #8
 8002fc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002fc2:	4001      	ands	r1, r0
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	21f0      	movs	r1, #240	; 0xf0
 8002fc8:	0109      	lsls	r1, r1, #4
 8002fca:	68e0      	ldr	r0, [r4, #12]
 8002fcc:	4001      	ands	r1, r0
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6821      	ldr	r1, [r4, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	019b      	lsls	r3, r3, #6
 8002fda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d02c      	beq.n	800303a <HAL_SPI_Init+0x136>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fe0:	6822      	ldr	r2, [r4, #0]
 8002fe2:	69d3      	ldr	r3, [r2, #28]
 8002fe4:	4919      	ldr	r1, [pc, #100]	; (800304c <HAL_SPI_Init+0x148>)
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002fee:	335d      	adds	r3, #93	; 0x5d
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8002ff4:	2000      	movs	r0, #0
}
 8002ff6:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8002ffe:	0020      	movs	r0, r4
 8003000:	f7fe fcd8 	bl	80019b4 <HAL_SPI_MspInit>
 8003004:	e794      	b.n	8002f30 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	0152      	lsls	r2, r2, #5
 800300a:	e79f      	b.n	8002f4c <HAL_SPI_Init+0x48>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800300c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_SPI_Init+0x11c>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003012:	23e0      	movs	r3, #224	; 0xe0
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	68e1      	ldr	r1, [r4, #12]
 8003018:	4299      	cmp	r1, r3
 800301a:	d90b      	bls.n	8003034 <HAL_SPI_Init+0x130>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800301c:	2302      	movs	r3, #2
 800301e:	6323      	str	r3, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003020:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003022:	2b02      	cmp	r3, #2
 8003024:	d1c4      	bne.n	8002fb0 <HAL_SPI_Init+0xac>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003026:	6821      	ldr	r1, [r4, #0]
 8003028:	6808      	ldr	r0, [r1, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	4303      	orrs	r3, r0
 8003030:	600b      	str	r3, [r1, #0]
 8003032:	e7bd      	b.n	8002fb0 <HAL_SPI_Init+0xac>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003034:	2301      	movs	r3, #1
 8003036:	6323      	str	r3, [r4, #48]	; 0x30
 8003038:	e7f2      	b.n	8003020 <HAL_SPI_Init+0x11c>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800303a:	6822      	ldr	r2, [r4, #0]
 800303c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	6113      	str	r3, [r2, #16]
 8003044:	e7cc      	b.n	8002fe0 <HAL_SPI_Init+0xdc>
    return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
 8003048:	e7d5      	b.n	8002ff6 <HAL_SPI_Init+0xf2>
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	fffff7ff 	.word	0xfffff7ff

08003050 <HAL_SPI_Transmit_DMA>:
{
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 8003054:	235c      	movs	r3, #92	; 0x5c
 8003056:	5cc3      	ldrb	r3, [r0, r3]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d100      	bne.n	800305e <HAL_SPI_Transmit_DMA+0xe>
 800305c:	e09d      	b.n	800319a <HAL_SPI_Transmit_DMA+0x14a>
 800305e:	235c      	movs	r3, #92	; 0x5c
 8003060:	2001      	movs	r0, #1
 8003062:	54e0      	strb	r0, [r4, r3]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003064:	3301      	adds	r3, #1
 8003066:	5ce3      	ldrb	r3, [r4, r3]
 8003068:	b2dd      	uxtb	r5, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d000      	beq.n	8003070 <HAL_SPI_Transmit_DMA+0x20>
 800306e:	e08e      	b.n	800318e <HAL_SPI_Transmit_DMA+0x13e>
  if ((pData == NULL) || (Size == 0U))
 8003070:	2900      	cmp	r1, #0
 8003072:	d100      	bne.n	8003076 <HAL_SPI_Transmit_DMA+0x26>
 8003074:	e08c      	b.n	8003190 <HAL_SPI_Transmit_DMA+0x140>
 8003076:	2a00      	cmp	r2, #0
 8003078:	d100      	bne.n	800307c <HAL_SPI_Transmit_DMA+0x2c>
 800307a:	e089      	b.n	8003190 <HAL_SPI_Transmit_DMA+0x140>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800307c:	335c      	adds	r3, #92	; 0x5c
 800307e:	3002      	adds	r0, #2
 8003080:	54e0      	strb	r0, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003082:	2300      	movs	r3, #0
 8003084:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003086:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003088:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800308a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800308c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800308e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003090:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003092:	2244      	movs	r2, #68	; 0x44
 8003094:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8003096:	3202      	adds	r2, #2
 8003098:	52a3      	strh	r3, [r4, r2]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	68a2      	ldr	r2, [r4, #8]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d03e      	beq.n	8003122 <HAL_SPI_Transmit_DMA+0xd2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	019b      	lsls	r3, r3, #6
 80030a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d045      	beq.n	800313a <HAL_SPI_Transmit_DMA+0xea>
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80030ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_SPI_Transmit_DMA+0x150>)
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80030b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030b6:	4a3b      	ldr	r2, [pc, #236]	; (80031a4 <HAL_SPI_Transmit_DMA+0x154>)
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80030ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030bc:	4a3a      	ldr	r2, [pc, #232]	; (80031a8 <HAL_SPI_Transmit_DMA+0x158>)
 80030be:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 80030c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030c2:	2200      	movs	r2, #0
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	6853      	ldr	r3, [r2, #4]
 80030ca:	4938      	ldr	r1, [pc, #224]	; (80031ac <HAL_SPI_Transmit_DMA+0x15c>)
 80030cc:	400b      	ands	r3, r1
 80030ce:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80030d0:	23e0      	movs	r3, #224	; 0xe0
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	68e2      	ldr	r2, [r4, #12]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d805      	bhi.n	80030e6 <HAL_SPI_Transmit_DMA+0x96>
 80030da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d035      	beq.n	8003152 <HAL_SPI_Transmit_DMA+0x102>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030e6:	6822      	ldr	r2, [r4, #0]
 80030e8:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 80030ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80030ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80030f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f2:	f7fe ff89 	bl	8002008 <HAL_DMA_Start_IT>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d141      	bne.n	800317e <HAL_SPI_Transmit_DMA+0x12e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	0652      	lsls	r2, r2, #25
 8003100:	d403      	bmi.n	800310a <HAL_SPI_Transmit_DMA+0xba>
    __HAL_SPI_ENABLE(hspi);
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2140      	movs	r1, #64	; 0x40
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	6853      	ldr	r3, [r2, #4]
 800310e:	2120      	movs	r1, #32
 8003110:	430b      	orrs	r3, r1
 8003112:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003114:	6822      	ldr	r2, [r4, #0]
 8003116:	6853      	ldr	r3, [r2, #4]
 8003118:	391e      	subs	r1, #30
 800311a:	430b      	orrs	r3, r1
 800311c:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800311e:	0005      	movs	r5, r0
 8003120:	e036      	b.n	8003190 <HAL_SPI_Transmit_DMA+0x140>
    __HAL_SPI_DISABLE(hspi);
 8003122:	6822      	ldr	r2, [r4, #0]
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	2140      	movs	r1, #64	; 0x40
 8003128:	438b      	bics	r3, r1
 800312a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	6811      	ldr	r1, [r2, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	430b      	orrs	r3, r1
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e7b4      	b.n	80030a4 <HAL_SPI_Transmit_DMA+0x54>
    SPI_RESET_CRC(hspi);
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	6813      	ldr	r3, [r2, #0]
 800313e:	491c      	ldr	r1, [pc, #112]	; (80031b0 <HAL_SPI_Transmit_DMA+0x160>)
 8003140:	400b      	ands	r3, r1
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	6811      	ldr	r1, [r2, #0]
 8003148:	2380      	movs	r3, #128	; 0x80
 800314a:	019b      	lsls	r3, r3, #6
 800314c:	430b      	orrs	r3, r1
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e7ad      	b.n	80030ae <HAL_SPI_Transmit_DMA+0x5e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003154:	07db      	lsls	r3, r3, #31
 8003156:	d407      	bmi.n	8003168 <HAL_SPI_Transmit_DMA+0x118>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	6853      	ldr	r3, [r2, #4]
 800315c:	400b      	ands	r3, r1
 800315e:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003160:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003166:	e7be      	b.n	80030e6 <HAL_SPI_Transmit_DMA+0x96>
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	6851      	ldr	r1, [r2, #4]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	430b      	orrs	r3, r1
 8003172:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3301      	adds	r3, #1
 800317a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800317c:	e7b3      	b.n	80030e6 <HAL_SPI_Transmit_DMA+0x96>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800317e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003180:	2210      	movs	r2, #16
 8003182:	4313      	orrs	r3, r2
 8003184:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8003186:	235d      	movs	r3, #93	; 0x5d
 8003188:	3a0f      	subs	r2, #15
 800318a:	54e2      	strb	r2, [r4, r3]
    goto error;
 800318c:	e000      	b.n	8003190 <HAL_SPI_Transmit_DMA+0x140>
    errorcode = HAL_BUSY;
 800318e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8003190:	235c      	movs	r3, #92	; 0x5c
 8003192:	2200      	movs	r2, #0
 8003194:	54e2      	strb	r2, [r4, r3]
}
 8003196:	0028      	movs	r0, r5
 8003198:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 800319a:	2502      	movs	r5, #2
 800319c:	e7fb      	b.n	8003196 <HAL_SPI_Transmit_DMA+0x146>
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	080035ad 	.word	0x080035ad
 80031a4:	080035f1 	.word	0x080035f1
 80031a8:	080035cf 	.word	0x080035cf
 80031ac:	ffffbfff 	.word	0xffffbfff
 80031b0:	ffffdfff 	.word	0xffffdfff

080031b4 <HAL_SPI_TransmitReceive_DMA>:
{
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 80031b8:	205c      	movs	r0, #92	; 0x5c
 80031ba:	5c20      	ldrb	r0, [r4, r0]
 80031bc:	2801      	cmp	r0, #1
 80031be:	d100      	bne.n	80031c2 <HAL_SPI_TransmitReceive_DMA+0xe>
 80031c0:	e106      	b.n	80033d0 <HAL_SPI_TransmitReceive_DMA+0x21c>
 80031c2:	205c      	movs	r0, #92	; 0x5c
 80031c4:	2501      	movs	r5, #1
 80031c6:	5425      	strb	r5, [r4, r0]
  tmp_state           = hspi->State;
 80031c8:	3001      	adds	r0, #1
 80031ca:	5c20      	ldrb	r0, [r4, r0]
 80031cc:	b2c6      	uxtb	r6, r0
  tmp_mode            = hspi->Init.Mode;
 80031ce:	6865      	ldr	r5, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80031d0:	2801      	cmp	r0, #1
 80031d2:	d00b      	beq.n	80031ec <HAL_SPI_TransmitReceive_DMA+0x38>
 80031d4:	2082      	movs	r0, #130	; 0x82
 80031d6:	0040      	lsls	r0, r0, #1
 80031d8:	4285      	cmp	r5, r0
 80031da:	d000      	beq.n	80031de <HAL_SPI_TransmitReceive_DMA+0x2a>
 80031dc:	e0e9      	b.n	80033b2 <HAL_SPI_TransmitReceive_DMA+0x1fe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031de:	68a0      	ldr	r0, [r4, #8]
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d000      	beq.n	80031e6 <HAL_SPI_TransmitReceive_DMA+0x32>
 80031e4:	e0ea      	b.n	80033bc <HAL_SPI_TransmitReceive_DMA+0x208>
 80031e6:	2e04      	cmp	r6, #4
 80031e8:	d000      	beq.n	80031ec <HAL_SPI_TransmitReceive_DMA+0x38>
 80031ea:	e0e9      	b.n	80033c0 <HAL_SPI_TransmitReceive_DMA+0x20c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031ec:	2900      	cmp	r1, #0
 80031ee:	d100      	bne.n	80031f2 <HAL_SPI_TransmitReceive_DMA+0x3e>
 80031f0:	e0e8      	b.n	80033c4 <HAL_SPI_TransmitReceive_DMA+0x210>
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d100      	bne.n	80031f8 <HAL_SPI_TransmitReceive_DMA+0x44>
 80031f6:	e0e7      	b.n	80033c8 <HAL_SPI_TransmitReceive_DMA+0x214>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d100      	bne.n	80031fe <HAL_SPI_TransmitReceive_DMA+0x4a>
 80031fc:	e0e6      	b.n	80033cc <HAL_SPI_TransmitReceive_DMA+0x218>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fe:	205d      	movs	r0, #93	; 0x5d
 8003200:	5c20      	ldrb	r0, [r4, r0]
 8003202:	2804      	cmp	r0, #4
 8003204:	d002      	beq.n	800320c <HAL_SPI_TransmitReceive_DMA+0x58>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003206:	205d      	movs	r0, #93	; 0x5d
 8003208:	2505      	movs	r5, #5
 800320a:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320c:	2000      	movs	r0, #0
 800320e:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003210:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003212:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003214:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003216:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003218:	2244      	movs	r2, #68	; 0x44
 800321a:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = Size;
 800321c:	3202      	adds	r2, #2
 800321e:	52a3      	strh	r3, [r4, r2]
  hspi->RxISR       = NULL;
 8003220:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003222:	6520      	str	r0, [r4, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	019b      	lsls	r3, r3, #6
 8003228:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800322a:	429a      	cmp	r2, r3
 800322c:	d032      	beq.n	8003294 <HAL_SPI_TransmitReceive_DMA+0xe0>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	6853      	ldr	r3, [r2, #4]
 8003232:	4968      	ldr	r1, [pc, #416]	; (80033d4 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8003234:	400b      	ands	r3, r1
 8003236:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003238:	23e0      	movs	r3, #224	; 0xe0
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	68e2      	ldr	r2, [r4, #12]
 800323e:	429a      	cmp	r2, r3
 8003240:	d934      	bls.n	80032ac <HAL_SPI_TransmitReceive_DMA+0xf8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	6853      	ldr	r3, [r2, #4]
 8003246:	4964      	ldr	r1, [pc, #400]	; (80033d8 <HAL_SPI_TransmitReceive_DMA+0x224>)
 8003248:	400b      	ands	r3, r1
 800324a:	6053      	str	r3, [r2, #4]
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800324c:	235d      	movs	r3, #93	; 0x5d
 800324e:	5ce3      	ldrb	r3, [r4, r3]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d073      	beq.n	800333c <HAL_SPI_TransmitReceive_DMA+0x188>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003256:	4a61      	ldr	r2, [pc, #388]	; (80033dc <HAL_SPI_TransmitReceive_DMA+0x228>)
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800325a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800325c:	4a60      	ldr	r2, [pc, #384]	; (80033e0 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003260:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003262:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <HAL_SPI_TransmitReceive_DMA+0x230>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003268:	2200      	movs	r2, #0
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800326c:	6821      	ldr	r1, [r4, #0]
 800326e:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 8003270:	2346      	movs	r3, #70	; 0x46
 8003272:	5ae3      	ldrh	r3, [r4, r3]
 8003274:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003276:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800327a:	f7fe fec5 	bl	8002008 <HAL_DMA_Start_IT>
 800327e:	2800      	cmp	r0, #0
 8003280:	d063      	beq.n	800334a <HAL_SPI_TransmitReceive_DMA+0x196>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003282:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003284:	2210      	movs	r2, #16
 8003286:	4313      	orrs	r3, r2
 8003288:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 800328a:	235d      	movs	r3, #93	; 0x5d
 800328c:	3a0f      	subs	r2, #15
 800328e:	54e2      	strb	r2, [r4, r3]
    errorcode = HAL_ERROR;
 8003290:	2001      	movs	r0, #1
    goto error;
 8003292:	e08f      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
    SPI_RESET_CRC(hspi);
 8003294:	6822      	ldr	r2, [r4, #0]
 8003296:	6813      	ldr	r3, [r2, #0]
 8003298:	4953      	ldr	r1, [pc, #332]	; (80033e8 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800329a:	400b      	ands	r3, r1
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e7c0      	b.n	800322e <HAL_SPI_TransmitReceive_DMA+0x7a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	6851      	ldr	r1, [r2, #4]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6053      	str	r3, [r2, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d018      	beq.n	80032f6 <HAL_SPI_TransmitReceive_DMA+0x142>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1bd      	bne.n	800324c <HAL_SPI_TransmitReceive_DMA+0x98>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	6853      	ldr	r3, [r2, #4]
 80032d4:	4940      	ldr	r1, [pc, #256]	; (80033d8 <HAL_SPI_TransmitReceive_DMA+0x224>)
 80032d6:	400b      	ands	r3, r1
 80032d8:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80032da:	2346      	movs	r3, #70	; 0x46
 80032dc:	5ae3      	ldrh	r3, [r4, r3]
 80032de:	07db      	lsls	r3, r3, #31
 80032e0:	d420      	bmi.n	8003324 <HAL_SPI_TransmitReceive_DMA+0x170>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	6853      	ldr	r3, [r2, #4]
 80032e6:	4940      	ldr	r1, [pc, #256]	; (80033e8 <HAL_SPI_TransmitReceive_DMA+0x234>)
 80032e8:	400b      	ands	r3, r1
 80032ea:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80032ec:	2246      	movs	r2, #70	; 0x46
 80032ee:	5aa3      	ldrh	r3, [r4, r2]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	52a3      	strh	r3, [r4, r2]
 80032f4:	e7aa      	b.n	800324c <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80032f6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80032f8:	07db      	lsls	r3, r3, #31
 80032fa:	d408      	bmi.n	800330e <HAL_SPI_TransmitReceive_DMA+0x15a>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	6853      	ldr	r3, [r2, #4]
 8003300:	493a      	ldr	r1, [pc, #232]	; (80033ec <HAL_SPI_TransmitReceive_DMA+0x238>)
 8003302:	400b      	ands	r3, r1
 8003304:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003306:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800330c:	e7da      	b.n	80032c4 <HAL_SPI_TransmitReceive_DMA+0x110>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	6851      	ldr	r1, [r2, #4]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	01db      	lsls	r3, r3, #7
 8003316:	430b      	orrs	r3, r1
 8003318:	6053      	str	r3, [r2, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800331a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3301      	adds	r3, #1
 8003320:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003322:	e7cf      	b.n	80032c4 <HAL_SPI_TransmitReceive_DMA+0x110>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	6851      	ldr	r1, [r2, #4]
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	019b      	lsls	r3, r3, #6
 800332c:	430b      	orrs	r3, r1
 800332e:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003330:	2246      	movs	r2, #70	; 0x46
 8003332:	5aa3      	ldrh	r3, [r4, r2]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	3301      	adds	r3, #1
 8003338:	52a3      	strh	r3, [r4, r2]
 800333a:	e787      	b.n	800324c <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800333c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <HAL_SPI_TransmitReceive_DMA+0x240>)
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c
 8003348:	e78a      	b.n	8003260 <HAL_SPI_TransmitReceive_DMA+0xac>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800334a:	6822      	ldr	r2, [r4, #0]
 800334c:	6853      	ldr	r3, [r2, #4]
 800334e:	2101      	movs	r1, #1
 8003350:	430b      	orrs	r3, r1
 8003352:	6053      	str	r3, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003354:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003356:	2300      	movs	r3, #0
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800335a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800335e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003360:	6353      	str	r3, [r2, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003362:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003364:	6393      	str	r3, [r2, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 800336a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800336e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003372:	f7fe fe49 	bl	8002008 <HAL_DMA_Start_IT>
 8003376:	2800      	cmp	r0, #0
 8003378:	d112      	bne.n	80033a0 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	0652      	lsls	r2, r2, #25
 8003380:	d403      	bmi.n	800338a <HAL_SPI_TransmitReceive_DMA+0x1d6>
    __HAL_SPI_ENABLE(hspi);
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	6853      	ldr	r3, [r2, #4]
 800338e:	2120      	movs	r1, #32
 8003390:	430b      	orrs	r3, r1
 8003392:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	6853      	ldr	r3, [r2, #4]
 8003398:	391e      	subs	r1, #30
 800339a:	430b      	orrs	r3, r1
 800339c:	6053      	str	r3, [r2, #4]
 800339e:	e009      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033a2:	2210      	movs	r2, #16
 80033a4:	4313      	orrs	r3, r2
 80033a6:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80033a8:	235d      	movs	r3, #93	; 0x5d
 80033aa:	3a0f      	subs	r2, #15
 80033ac:	54e2      	strb	r2, [r4, r3]
    errorcode = HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
    goto error;
 80033b0:	e000      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
    errorcode = HAL_BUSY;
 80033b2:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80033b4:	235c      	movs	r3, #92	; 0x5c
 80033b6:	2200      	movs	r2, #0
 80033b8:	54e2      	strb	r2, [r4, r3]
}
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
    errorcode = HAL_BUSY;
 80033bc:	2002      	movs	r0, #2
 80033be:	e7f9      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
 80033c0:	2002      	movs	r0, #2
 80033c2:	e7f7      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
    errorcode = HAL_ERROR;
 80033c4:	2001      	movs	r0, #1
 80033c6:	e7f5      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
 80033c8:	2001      	movs	r0, #1
 80033ca:	e7f3      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
 80033cc:	2001      	movs	r0, #1
 80033ce:	e7f1      	b.n	80033b4 <HAL_SPI_TransmitReceive_DMA+0x200>
  __HAL_LOCK(hspi);
 80033d0:	2002      	movs	r0, #2
 80033d2:	e7f2      	b.n	80033ba <HAL_SPI_TransmitReceive_DMA+0x206>
 80033d4:	ffff9fff 	.word	0xffff9fff
 80033d8:	ffffefff 	.word	0xffffefff
 80033dc:	080035c5 	.word	0x080035c5
 80033e0:	08003779 	.word	0x08003779
 80033e4:	080035cf 	.word	0x080035cf
 80033e8:	ffffdfff 	.word	0xffffdfff
 80033ec:	ffffbfff 	.word	0xffffbfff
 80033f0:	080035b9 	.word	0x080035b9
 80033f4:	08003665 	.word	0x08003665

080033f8 <HAL_SPI_Receive_DMA>:
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	0004      	movs	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80033fc:	6883      	ldr	r3, [r0, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d104      	bne.n	800340c <HAL_SPI_Receive_DMA+0x14>
 8003402:	2082      	movs	r0, #130	; 0x82
 8003404:	0040      	lsls	r0, r0, #1
 8003406:	6865      	ldr	r5, [r4, #4]
 8003408:	4285      	cmp	r5, r0
 800340a:	d063      	beq.n	80034d4 <HAL_SPI_Receive_DMA+0xdc>
  __HAL_LOCK(hspi);
 800340c:	205c      	movs	r0, #92	; 0x5c
 800340e:	5c20      	ldrb	r0, [r4, r0]
 8003410:	2801      	cmp	r0, #1
 8003412:	d100      	bne.n	8003416 <HAL_SPI_Receive_DMA+0x1e>
 8003414:	e0b9      	b.n	800358a <HAL_SPI_Receive_DMA+0x192>
 8003416:	205c      	movs	r0, #92	; 0x5c
 8003418:	2501      	movs	r5, #1
 800341a:	5425      	strb	r5, [r4, r0]
  if (hspi->State != HAL_SPI_STATE_READY)
 800341c:	3001      	adds	r0, #1
 800341e:	5c25      	ldrb	r5, [r4, r0]
 8003420:	b2ee      	uxtb	r6, r5
 8003422:	2d01      	cmp	r5, #1
 8003424:	d000      	beq.n	8003428 <HAL_SPI_Receive_DMA+0x30>
 8003426:	e0aa      	b.n	800357e <HAL_SPI_Receive_DMA+0x186>
  if ((pData == NULL) || (Size == 0U))
 8003428:	2900      	cmp	r1, #0
 800342a:	d100      	bne.n	800342e <HAL_SPI_Receive_DMA+0x36>
 800342c:	e0a8      	b.n	8003580 <HAL_SPI_Receive_DMA+0x188>
 800342e:	2a00      	cmp	r2, #0
 8003430:	d100      	bne.n	8003434 <HAL_SPI_Receive_DMA+0x3c>
 8003432:	e0a5      	b.n	8003580 <HAL_SPI_Receive_DMA+0x188>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003434:	3503      	adds	r5, #3
 8003436:	5425      	strb	r5, [r4, r0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003438:	2000      	movs	r0, #0
 800343a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800343c:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800343e:	2144      	movs	r1, #68	; 0x44
 8003440:	5262      	strh	r2, [r4, r1]
  hspi->RxXferCount = Size;
 8003442:	3102      	adds	r1, #2
 8003444:	5262      	strh	r2, [r4, r1]
  hspi->RxISR       = NULL;
 8003446:	64e0      	str	r0, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003448:	6520      	str	r0, [r4, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800344a:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800344c:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344e:	2280      	movs	r2, #128	; 0x80
 8003450:	0212      	lsls	r2, r2, #8
 8003452:	4293      	cmp	r3, r2
 8003454:	d049      	beq.n	80034ea <HAL_SPI_Receive_DMA+0xf2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800345c:	429a      	cmp	r2, r3
 800345e:	d04f      	beq.n	8003500 <HAL_SPI_Receive_DMA+0x108>
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	6853      	ldr	r3, [r2, #4]
 8003464:	494a      	ldr	r1, [pc, #296]	; (8003590 <HAL_SPI_Receive_DMA+0x198>)
 8003466:	400b      	ands	r3, r1
 8003468:	6053      	str	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800346a:	23e0      	movs	r3, #224	; 0xe0
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	68e2      	ldr	r2, [r4, #12]
 8003470:	429a      	cmp	r2, r3
 8003472:	d951      	bls.n	8003518 <HAL_SPI_Receive_DMA+0x120>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	6853      	ldr	r3, [r2, #4]
 8003478:	4946      	ldr	r1, [pc, #280]	; (8003594 <HAL_SPI_Receive_DMA+0x19c>)
 800347a:	400b      	ands	r3, r1
 800347c:	6053      	str	r3, [r2, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800347e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003480:	4a45      	ldr	r2, [pc, #276]	; (8003598 <HAL_SPI_Receive_DMA+0x1a0>)
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003484:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003486:	4a45      	ldr	r2, [pc, #276]	; (800359c <HAL_SPI_Receive_DMA+0x1a4>)
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800348a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800348c:	4a44      	ldr	r2, [pc, #272]	; (80035a0 <HAL_SPI_Receive_DMA+0x1a8>)
 800348e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 8003490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	310c      	adds	r1, #12
                                 hspi->RxXferCount))
 800349a:	2346      	movs	r3, #70	; 0x46
 800349c:	5ae3      	ldrh	r3, [r4, r3]
 800349e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80034a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a4:	f7fe fdb0 	bl	8002008 <HAL_DMA_Start_IT>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	d160      	bne.n	800356e <HAL_SPI_Receive_DMA+0x176>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	0652      	lsls	r2, r2, #25
 80034b2:	d403      	bmi.n	80034bc <HAL_SPI_Receive_DMA+0xc4>
    __HAL_SPI_ENABLE(hspi);
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	6853      	ldr	r3, [r2, #4]
 80034c0:	2120      	movs	r1, #32
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	6853      	ldr	r3, [r2, #4]
 80034ca:	391f      	subs	r1, #31
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6053      	str	r3, [r2, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034d0:	0006      	movs	r6, r0
 80034d2:	e055      	b.n	8003580 <HAL_SPI_Receive_DMA+0x188>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034d4:	335d      	adds	r3, #93	; 0x5d
 80034d6:	3801      	subs	r0, #1
 80034d8:	38ff      	subs	r0, #255	; 0xff
 80034da:	54e0      	strb	r0, [r4, r3]
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80034dc:	0013      	movs	r3, r2
 80034de:	000a      	movs	r2, r1
 80034e0:	0020      	movs	r0, r4
 80034e2:	f7ff fe67 	bl	80031b4 <HAL_SPI_TransmitReceive_DMA>
 80034e6:	0006      	movs	r6, r0
 80034e8:	e04d      	b.n	8003586 <HAL_SPI_Receive_DMA+0x18e>
    __HAL_SPI_DISABLE(hspi);
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	6813      	ldr	r3, [r2, #0]
 80034ee:	3906      	subs	r1, #6
 80034f0:	438b      	bics	r3, r1
 80034f2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	492a      	ldr	r1, [pc, #168]	; (80035a4 <HAL_SPI_Receive_DMA+0x1ac>)
 80034fa:	400b      	ands	r3, r1
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e7aa      	b.n	8003456 <HAL_SPI_Receive_DMA+0x5e>
    SPI_RESET_CRC(hspi);
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	4922      	ldr	r1, [pc, #136]	; (8003590 <HAL_SPI_Receive_DMA+0x198>)
 8003506:	400b      	ands	r3, r1
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	6822      	ldr	r2, [r4, #0]
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	430b      	orrs	r3, r1
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e7a3      	b.n	8003460 <HAL_SPI_Receive_DMA+0x68>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	6851      	ldr	r1, [r2, #4]
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	015b      	lsls	r3, r3, #5
 8003520:	430b      	orrs	r3, r1
 8003522:	6053      	str	r3, [r2, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	429a      	cmp	r2, r3
 800352e:	d1a6      	bne.n	800347e <HAL_SPI_Receive_DMA+0x86>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003530:	6822      	ldr	r2, [r4, #0]
 8003532:	6853      	ldr	r3, [r2, #4]
 8003534:	4917      	ldr	r1, [pc, #92]	; (8003594 <HAL_SPI_Receive_DMA+0x19c>)
 8003536:	400b      	ands	r3, r1
 8003538:	6053      	str	r3, [r2, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800353a:	2346      	movs	r3, #70	; 0x46
 800353c:	5ae3      	ldrh	r3, [r4, r3]
 800353e:	07db      	lsls	r3, r3, #31
 8003540:	d409      	bmi.n	8003556 <HAL_SPI_Receive_DMA+0x15e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	6853      	ldr	r3, [r2, #4]
 8003546:	4912      	ldr	r1, [pc, #72]	; (8003590 <HAL_SPI_Receive_DMA+0x198>)
 8003548:	400b      	ands	r3, r1
 800354a:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800354c:	2246      	movs	r2, #70	; 0x46
 800354e:	5aa3      	ldrh	r3, [r4, r2]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	52a3      	strh	r3, [r4, r2]
 8003554:	e793      	b.n	800347e <HAL_SPI_Receive_DMA+0x86>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	6851      	ldr	r1, [r2, #4]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	019b      	lsls	r3, r3, #6
 800355e:	430b      	orrs	r3, r1
 8003560:	6053      	str	r3, [r2, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003562:	2246      	movs	r2, #70	; 0x46
 8003564:	5aa3      	ldrh	r3, [r4, r2]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3301      	adds	r3, #1
 800356a:	52a3      	strh	r3, [r4, r2]
 800356c:	e787      	b.n	800347e <HAL_SPI_Receive_DMA+0x86>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800356e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003570:	2210      	movs	r2, #16
 8003572:	4313      	orrs	r3, r2
 8003574:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8003576:	235d      	movs	r3, #93	; 0x5d
 8003578:	3a0f      	subs	r2, #15
 800357a:	54e2      	strb	r2, [r4, r3]
    goto error;
 800357c:	e000      	b.n	8003580 <HAL_SPI_Receive_DMA+0x188>
    errorcode = HAL_BUSY;
 800357e:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8003580:	235c      	movs	r3, #92	; 0x5c
 8003582:	2200      	movs	r2, #0
 8003584:	54e2      	strb	r2, [r4, r3]
}
 8003586:	0030      	movs	r0, r6
 8003588:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hspi);
 800358a:	2602      	movs	r6, #2
 800358c:	e7fb      	b.n	8003586 <HAL_SPI_Receive_DMA+0x18e>
 800358e:	46c0      	nop			; (mov r8, r8)
 8003590:	ffffdfff 	.word	0xffffdfff
 8003594:	ffffefff 	.word	0xffffefff
 8003598:	080035b9 	.word	0x080035b9
 800359c:	08003665 	.word	0x08003665
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	ffffbfff 	.word	0xffffbfff

080035a8 <HAL_SPI_TxRxCpltCallback>:
}
 80035a8:	4770      	bx	lr

080035aa <HAL_SPI_TxHalfCpltCallback>:
}
 80035aa:	4770      	bx	lr

080035ac <SPI_DMAHalfTransmitCplt>:
{
 80035ac:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_SPI_TxHalfCpltCallback(hspi);
 80035b0:	f7ff fffb 	bl	80035aa <HAL_SPI_TxHalfCpltCallback>
}
 80035b4:	bd10      	pop	{r4, pc}

080035b6 <HAL_SPI_RxHalfCpltCallback>:
}
 80035b6:	4770      	bx	lr

080035b8 <SPI_DMAHalfReceiveCplt>:
{
 80035b8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_SPI_RxHalfCpltCallback(hspi);
 80035bc:	f7ff fffb 	bl	80035b6 <HAL_SPI_RxHalfCpltCallback>
}
 80035c0:	bd10      	pop	{r4, pc}

080035c2 <HAL_SPI_TxRxHalfCpltCallback>:
}
 80035c2:	4770      	bx	lr

080035c4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 80035c4:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80035c8:	f7ff fffb 	bl	80035c2 <HAL_SPI_TxRxHalfCpltCallback>
}
 80035cc:	bd10      	pop	{r4, pc}

080035ce <SPI_DMAError>:
{
 80035ce:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	6853      	ldr	r3, [r2, #4]
 80035d6:	2103      	movs	r1, #3
 80035d8:	438b      	bics	r3, r1
 80035da:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80035dc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80035de:	2210      	movs	r2, #16
 80035e0:	4313      	orrs	r3, r2
 80035e2:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80035e4:	235d      	movs	r3, #93	; 0x5d
 80035e6:	3a0f      	subs	r2, #15
 80035e8:	54c2      	strb	r2, [r0, r3]
  HAL_SPI_ErrorCallback(hspi);
 80035ea:	f7fd ff3d 	bl	8001468 <HAL_SPI_ErrorCallback>
}
 80035ee:	bd10      	pop	{r4, pc}

080035f0 <SPI_DMATransmitCplt>:
{
 80035f0:	b530      	push	{r4, r5, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80035f8:	f7fe fbea 	bl	8001dd0 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	069b      	lsls	r3, r3, #26
 8003604:	d425      	bmi.n	8003652 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003606:	6821      	ldr	r1, [r4, #0]
 8003608:	684b      	ldr	r3, [r1, #4]
 800360a:	2020      	movs	r0, #32
 800360c:	4383      	bics	r3, r0
 800360e:	604b      	str	r3, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003610:	6821      	ldr	r1, [r4, #0]
 8003612:	684b      	ldr	r3, [r1, #4]
 8003614:	381e      	subs	r0, #30
 8003616:	4383      	bics	r3, r0
 8003618:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	0020      	movs	r0, r4
 800361e:	f7ff fbf5 	bl	8002e0c <SPI_EndRxTxTransaction>
 8003622:	2800      	cmp	r0, #0
 8003624:	d003      	beq.n	800362e <SPI_DMATransmitCplt+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003628:	2220      	movs	r2, #32
 800362a:	4313      	orrs	r3, r2
 800362c:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <SPI_DMATransmitCplt+0x52>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	6823      	ldr	r3, [r4, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	9201      	str	r2, [sp, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003646:	335d      	adds	r3, #93	; 0x5d
 8003648:	2201      	movs	r2, #1
 800364a:	54e2      	strb	r2, [r4, r3]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <SPI_DMATransmitCplt+0x6c>
  HAL_SPI_TxCpltCallback(hspi);
 8003652:	0020      	movs	r0, r4
 8003654:	f7fd fc6a 	bl	8000f2c <HAL_SPI_TxCpltCallback>
}
 8003658:	b003      	add	sp, #12
 800365a:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 800365c:	0020      	movs	r0, r4
 800365e:	f7fd ff03 	bl	8001468 <HAL_SPI_ErrorCallback>
      return;
 8003662:	e7f9      	b.n	8003658 <SPI_DMATransmitCplt+0x68>

08003664 <SPI_DMAReceiveCplt>:
{
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800366a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  __IO uint32_t tmpreg = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003670:	220b      	movs	r2, #11
 8003672:	446a      	add	r2, sp
 8003674:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003676:	f7fe fbab 	bl	8001dd0 <HAL_GetTick>
 800367a:	0006      	movs	r6, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	069b      	lsls	r3, r3, #26
 8003682:	d432      	bmi.n	80036ea <SPI_DMAReceiveCplt+0x86>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003684:	6822      	ldr	r2, [r4, #0]
 8003686:	6853      	ldr	r3, [r2, #4]
 8003688:	2120      	movs	r1, #32
 800368a:	438b      	bics	r3, r1
 800368c:	6053      	str	r3, [r2, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368e:	2380      	movs	r3, #128	; 0x80
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003694:	429a      	cmp	r2, r3
 8003696:	d02d      	beq.n	80036f4 <SPI_DMAReceiveCplt+0x90>
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003698:	68a3      	ldr	r3, [r4, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <SPI_DMAReceiveCplt+0x44>
 800369e:	3305      	adds	r3, #5
 80036a0:	33ff      	adds	r3, #255	; 0xff
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d05a      	beq.n	800375e <SPI_DMAReceiveCplt+0xfa>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	6853      	ldr	r3, [r2, #4]
 80036ac:	2101      	movs	r1, #1
 80036ae:	438b      	bics	r3, r1
 80036b0:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036b2:	0032      	movs	r2, r6
 80036b4:	2164      	movs	r1, #100	; 0x64
 80036b6:	0020      	movs	r0, r4
 80036b8:	f7ff fbdc 	bl	8002e74 <SPI_EndRxTransaction>
 80036bc:	2800      	cmp	r0, #0
 80036be:	d001      	beq.n	80036c4 <SPI_DMAReceiveCplt+0x60>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036c0:	2320      	movs	r3, #32
 80036c2:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->RxXferCount = 0U;
 80036c4:	2346      	movs	r3, #70	; 0x46
 80036c6:	2200      	movs	r2, #0
 80036c8:	52e2      	strh	r2, [r4, r3]
    hspi->State = HAL_SPI_STATE_READY;
 80036ca:	3317      	adds	r3, #23
 80036cc:	3201      	adds	r2, #1
 80036ce:	54e2      	strb	r2, [r4, r3]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	06d2      	lsls	r2, r2, #27
 80036d6:	d505      	bpl.n	80036e4 <SPI_DMAReceiveCplt+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80036d8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80036da:	2102      	movs	r1, #2
 80036dc:	430a      	orrs	r2, r1
 80036de:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <SPI_DMAReceiveCplt+0x110>)
 80036e2:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d13f      	bne.n	800376a <SPI_DMAReceiveCplt+0x106>
  HAL_SPI_RxCpltCallback(hspi);
 80036ea:	0020      	movs	r0, r4
 80036ec:	f7fd fc2a 	bl	8000f44 <HAL_SPI_RxCpltCallback>
}
 80036f0:	b004      	add	sp, #16
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036f4:	9000      	str	r0, [sp, #0]
 80036f6:	2364      	movs	r3, #100	; 0x64
 80036f8:	2201      	movs	r2, #1
 80036fa:	391f      	subs	r1, #31
 80036fc:	0020      	movs	r0, r4
 80036fe:	f7ff fa87 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8003702:	2800      	cmp	r0, #0
 8003704:	d003      	beq.n	800370e <SPI_DMAReceiveCplt+0xaa>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003706:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003708:	2202      	movs	r2, #2
 800370a:	4313      	orrs	r3, r2
 800370c:	6623      	str	r3, [r4, #96]	; 0x60
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800370e:	23e0      	movs	r3, #224	; 0xe0
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	68e2      	ldr	r2, [r4, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d904      	bls.n	8003722 <SPI_DMAReceiveCplt+0xbe>
        tmpreg = READ_REG(hspi->Instance->DR);
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 800371e:	9b03      	ldr	r3, [sp, #12]
 8003720:	e7ba      	b.n	8003698 <SPI_DMAReceiveCplt+0x34>
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003722:	6825      	ldr	r5, [r4, #0]
        tmpreg8 = *ptmpreg8;
 8003724:	7b2b      	ldrb	r3, [r5, #12]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	220b      	movs	r2, #11
 800372a:	446a      	add	r2, sp
 800372c:	7013      	strb	r3, [r2, #0]
        UNUSED(tmpreg8);
 800372e:	7813      	ldrb	r3, [r2, #0]
        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003732:	2b02      	cmp	r3, #2
 8003734:	d1b0      	bne.n	8003698 <SPI_DMAReceiveCplt+0x34>
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003736:	9600      	str	r6, [sp, #0]
 8003738:	3362      	adds	r3, #98	; 0x62
 800373a:	2201      	movs	r2, #1
 800373c:	2101      	movs	r1, #1
 800373e:	0020      	movs	r0, r4
 8003740:	f7ff fa66 	bl	8002c10 <SPI_WaitFlagStateUntilTimeout>
 8003744:	2800      	cmp	r0, #0
 8003746:	d003      	beq.n	8003750 <SPI_DMAReceiveCplt+0xec>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003748:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800374a:	2202      	movs	r2, #2
 800374c:	4313      	orrs	r3, r2
 800374e:	6623      	str	r3, [r4, #96]	; 0x60
          tmpreg8 = *ptmpreg8;
 8003750:	7b2b      	ldrb	r3, [r5, #12]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	220b      	movs	r2, #11
 8003756:	446a      	add	r2, sp
 8003758:	7013      	strb	r3, [r2, #0]
          UNUSED(tmpreg8);
 800375a:	7813      	ldrb	r3, [r2, #0]
 800375c:	e79c      	b.n	8003698 <SPI_DMAReceiveCplt+0x34>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	6853      	ldr	r3, [r2, #4]
 8003762:	2103      	movs	r1, #3
 8003764:	438b      	bics	r3, r1
 8003766:	6053      	str	r3, [r2, #4]
 8003768:	e7a3      	b.n	80036b2 <SPI_DMAReceiveCplt+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 800376a:	0020      	movs	r0, r4
 800376c:	f7fd fe7c 	bl	8001468 <HAL_SPI_ErrorCallback>
      return;
 8003770:	e7be      	b.n	80036f0 <SPI_DMAReceiveCplt+0x8c>
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	0000ffef 	.word	0x0000ffef

08003778 <SPI_DMATransmitReceiveCplt>:
{
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800377e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  __IO uint32_t tmpreg = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003784:	220b      	movs	r2, #11
 8003786:	446a      	add	r2, sp
 8003788:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800378a:	f7fe fb21 	bl	8001dd0 <HAL_GetTick>
 800378e:	0006      	movs	r6, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003790:	682b      	ldr	r3, [r5, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	069b      	lsls	r3, r3, #26
 8003796:	d42d      	bmi.n	80037f4 <SPI_DMATransmitReceiveCplt+0x7c>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003798:	6821      	ldr	r1, [r4, #0]
 800379a:	684b      	ldr	r3, [r1, #4]
 800379c:	2220      	movs	r2, #32
 800379e:	4393      	bics	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d028      	beq.n	80037fe <SPI_DMATransmitReceiveCplt+0x86>
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80037ac:	0032      	movs	r2, r6
 80037ae:	2164      	movs	r1, #100	; 0x64
 80037b0:	0020      	movs	r0, r4
 80037b2:	f7ff fb2b 	bl	8002e0c <SPI_EndRxTxTransaction>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d003      	beq.n	80037c2 <SPI_DMATransmitReceiveCplt+0x4a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037bc:	2220      	movs	r2, #32
 80037be:	4313      	orrs	r3, r2
 80037c0:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037c2:	6822      	ldr	r2, [r4, #0]
 80037c4:	6853      	ldr	r3, [r2, #4]
 80037c6:	2103      	movs	r1, #3
 80037c8:	438b      	bics	r3, r1
 80037ca:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80037d0:	2246      	movs	r2, #70	; 0x46
 80037d2:	52a3      	strh	r3, [r4, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80037d4:	335d      	adds	r3, #93	; 0x5d
 80037d6:	3a45      	subs	r2, #69	; 0x45
 80037d8:	54e2      	strb	r2, [r4, r3]
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	06d2      	lsls	r2, r2, #27
 80037e0:	d505      	bpl.n	80037ee <SPI_DMATransmitReceiveCplt+0x76>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80037e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80037e4:	3901      	subs	r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80037ea:	4a20      	ldr	r2, [pc, #128]	; (800386c <SPI_DMATransmitReceiveCplt+0xf4>)
 80037ec:	609a      	str	r2, [r3, #8]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d137      	bne.n	8003864 <SPI_DMATransmitReceiveCplt+0xec>
  HAL_SPI_TxRxCpltCallback(hspi);
 80037f4:	0020      	movs	r0, r4
 80037f6:	f7ff fed7 	bl	80035a8 <HAL_SPI_TxRxCpltCallback>
}
 80037fa:	b004      	add	sp, #16
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 80037fe:	23e0      	movs	r3, #224	; 0xe0
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	68e2      	ldr	r2, [r4, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d102      	bne.n	800380e <SPI_DMATransmitReceiveCplt+0x96>
 8003808:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800380a:	2b01      	cmp	r3, #1
 800380c:	d013      	beq.n	8003836 <SPI_DMATransmitReceiveCplt+0xbe>
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	21c0      	movs	r1, #192	; 0xc0
 8003812:	9600      	str	r6, [sp, #0]
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	00d2      	lsls	r2, r2, #3
 8003818:	00c9      	lsls	r1, r1, #3
 800381a:	0020      	movs	r0, r4
 800381c:	f7ff fa6c 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8003820:	2800      	cmp	r0, #0
 8003822:	d003      	beq.n	800382c <SPI_DMATransmitReceiveCplt+0xb4>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003824:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003826:	2202      	movs	r2, #2
 8003828:	4313      	orrs	r3, r2
 800382a:	6623      	str	r3, [r4, #96]	; 0x60
        tmpreg = READ_REG(hspi->Instance->DR);
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	9303      	str	r3, [sp, #12]
        UNUSED(tmpreg);
 8003832:	9b03      	ldr	r3, [sp, #12]
 8003834:	e7ba      	b.n	80037ac <SPI_DMATransmitReceiveCplt+0x34>
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	21c0      	movs	r1, #192	; 0xc0
 800383a:	9000      	str	r0, [sp, #0]
 800383c:	3363      	adds	r3, #99	; 0x63
 800383e:	0092      	lsls	r2, r2, #2
 8003840:	00c9      	lsls	r1, r1, #3
 8003842:	0020      	movs	r0, r4
 8003844:	f7ff fa58 	bl	8002cf8 <SPI_WaitFifoStateUntilTimeout>
 8003848:	2800      	cmp	r0, #0
 800384a:	d003      	beq.n	8003854 <SPI_DMATransmitReceiveCplt+0xdc>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800384c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800384e:	2202      	movs	r2, #2
 8003850:	4313      	orrs	r3, r2
 8003852:	6623      	str	r3, [r4, #96]	; 0x60
        tmpreg8 = *ptmpreg8;
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	7b1b      	ldrb	r3, [r3, #12]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	220b      	movs	r2, #11
 800385c:	446a      	add	r2, sp
 800385e:	7013      	strb	r3, [r2, #0]
        UNUSED(tmpreg8);
 8003860:	7813      	ldrb	r3, [r2, #0]
 8003862:	e7a3      	b.n	80037ac <SPI_DMATransmitReceiveCplt+0x34>
      HAL_SPI_ErrorCallback(hspi);
 8003864:	0020      	movs	r0, r4
 8003866:	f7fd fdff 	bl	8001468 <HAL_SPI_ErrorCallback>
      return;
 800386a:	e7c6      	b.n	80037fa <SPI_DMATransmitReceiveCplt+0x82>
 800386c:	0000ffef 	.word	0x0000ffef

08003870 <HAL_SPI_IRQHandler>:
{
 8003870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003876:	6802      	ldr	r2, [r0, #0]
 8003878:	6855      	ldr	r5, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800387a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800387c:	0999      	lsrs	r1, r3, #6
 800387e:	2001      	movs	r0, #1
 8003880:	0006      	movs	r6, r0
 8003882:	400e      	ands	r6, r1
 8003884:	4208      	tst	r0, r1
 8003886:	d103      	bne.n	8003890 <HAL_SPI_IRQHandler+0x20>
 8003888:	07d9      	lsls	r1, r3, #31
 800388a:	d501      	bpl.n	8003890 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800388c:	0669      	lsls	r1, r5, #25
 800388e:	d46a      	bmi.n	8003966 <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003890:	0799      	lsls	r1, r3, #30
 8003892:	d501      	bpl.n	8003898 <HAL_SPI_IRQHandler+0x28>
 8003894:	0629      	lsls	r1, r5, #24
 8003896:	d46a      	bmi.n	800396e <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003898:	0959      	lsrs	r1, r3, #5
 800389a:	2001      	movs	r0, #1
 800389c:	0007      	movs	r7, r0
 800389e:	400f      	ands	r7, r1
 80038a0:	4208      	tst	r0, r1
 80038a2:	d103      	bne.n	80038ac <HAL_SPI_IRQHandler+0x3c>
 80038a4:	2e00      	cmp	r6, #0
 80038a6:	d101      	bne.n	80038ac <HAL_SPI_IRQHandler+0x3c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038a8:	05d9      	lsls	r1, r3, #23
 80038aa:	d563      	bpl.n	8003974 <HAL_SPI_IRQHandler+0x104>
 80038ac:	06a9      	lsls	r1, r5, #26
 80038ae:	d561      	bpl.n	8003974 <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	d00e      	beq.n	80038d2 <HAL_SPI_IRQHandler+0x62>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038b4:	215d      	movs	r1, #93	; 0x5d
 80038b6:	5c61      	ldrb	r1, [r4, r1]
 80038b8:	2903      	cmp	r1, #3
 80038ba:	d05d      	beq.n	8003978 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038bc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80038be:	2004      	movs	r0, #4
 80038c0:	4301      	orrs	r1, r0
 80038c2:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038c4:	2100      	movs	r1, #0
 80038c6:	9100      	str	r1, [sp, #0]
 80038c8:	68d1      	ldr	r1, [r2, #12]
 80038ca:	9100      	str	r1, [sp, #0]
 80038cc:	6891      	ldr	r1, [r2, #8]
 80038ce:	9100      	str	r1, [sp, #0]
 80038d0:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038d2:	2f00      	cmp	r7, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80038d8:	2001      	movs	r0, #1
 80038da:	4301      	orrs	r1, r0
 80038dc:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038de:	2100      	movs	r1, #0
 80038e0:	9102      	str	r1, [sp, #8]
 80038e2:	6891      	ldr	r1, [r2, #8]
 80038e4:	9102      	str	r1, [sp, #8]
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	303f      	adds	r0, #63	; 0x3f
 80038ea:	4381      	bics	r1, r0
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038f0:	05db      	lsls	r3, r3, #23
 80038f2:	d509      	bpl.n	8003908 <HAL_SPI_IRQHandler+0x98>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038f6:	2208      	movs	r2, #8
 80038f8:	4313      	orrs	r3, r2
 80038fa:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038fc:	2300      	movs	r3, #0
 80038fe:	9303      	str	r3, [sp, #12]
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	9303      	str	r3, [sp, #12]
 8003906:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003908:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800390a:	2b00      	cmp	r3, #0
 800390c:	d032      	beq.n	8003974 <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	6853      	ldr	r3, [r2, #4]
 8003912:	21e0      	movs	r1, #224	; 0xe0
 8003914:	438b      	bics	r3, r1
 8003916:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003918:	235d      	movs	r3, #93	; 0x5d
 800391a:	2201      	movs	r2, #1
 800391c:	54e2      	strb	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800391e:	07ab      	lsls	r3, r5, #30
 8003920:	d032      	beq.n	8003988 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	6853      	ldr	r3, [r2, #4]
 8003926:	39dd      	subs	r1, #221	; 0xdd
 8003928:	438b      	bics	r3, r1
 800392a:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800392c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_SPI_IRQHandler+0x120>)
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003936:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003938:	f7fe fbb4 	bl	80020a4 <HAL_DMA_Abort_IT>
 800393c:	2800      	cmp	r0, #0
 800393e:	d003      	beq.n	8003948 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003940:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003942:	2240      	movs	r2, #64	; 0x40
 8003944:	4313      	orrs	r3, r2
 8003946:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003948:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800394a:	2b00      	cmp	r3, #0
 800394c:	d012      	beq.n	8003974 <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <HAL_SPI_IRQHandler+0x120>)
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003954:	f7fe fba6 	bl	80020a4 <HAL_DMA_Abort_IT>
 8003958:	2800      	cmp	r0, #0
 800395a:	d00b      	beq.n	8003974 <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800395c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	4313      	orrs	r3, r2
 8003962:	6623      	str	r3, [r4, #96]	; 0x60
 8003964:	e006      	b.n	8003974 <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 8003966:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003968:	0020      	movs	r0, r4
 800396a:	4798      	blx	r3
    return;
 800396c:	e002      	b.n	8003974 <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 800396e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003970:	0020      	movs	r0, r4
 8003972:	4798      	blx	r3
}
 8003974:	b005      	add	sp, #20
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003978:	2300      	movs	r3, #0
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	68d3      	ldr	r3, [r2, #12]
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6893      	ldr	r3, [r2, #8]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	9b01      	ldr	r3, [sp, #4]
        return;
 8003986:	e7f5      	b.n	8003974 <HAL_SPI_IRQHandler+0x104>
        HAL_SPI_ErrorCallback(hspi);
 8003988:	0020      	movs	r0, r4
 800398a:	f7fd fd6d 	bl	8001468 <HAL_SPI_ErrorCallback>
    return;
 800398e:	e7f1      	b.n	8003974 <HAL_SPI_IRQHandler+0x104>
 8003990:	08003995 	.word	0x08003995

08003994 <SPI_DMAAbortOnError>:
{
 8003994:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003996:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	2246      	movs	r2, #70	; 0x46
 800399c:	5283      	strh	r3, [r0, r2]
  hspi->TxXferCount = 0U;
 800399e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80039a0:	f7fd fd62 	bl	8001468 <HAL_SPI_ErrorCallback>
}
 80039a4:	bd10      	pop	{r4, pc}
	...

080039a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	6a03      	ldr	r3, [r0, #32]
 80039ac:	2201      	movs	r2, #1
 80039ae:	4393      	bics	r3, r2
 80039b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039b6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039b8:	4d15      	ldr	r5, [pc, #84]	; (8003a10 <TIM_OC1_SetConfig+0x68>)
 80039ba:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039bc:	680d      	ldr	r5, [r1, #0]
 80039be:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039c0:	2502      	movs	r5, #2
 80039c2:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c4:	688d      	ldr	r5, [r1, #8]
 80039c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c8:	4d12      	ldr	r5, [pc, #72]	; (8003a14 <TIM_OC1_SetConfig+0x6c>)
 80039ca:	42a8      	cmp	r0, r5
 80039cc:	d005      	beq.n	80039da <TIM_OC1_SetConfig+0x32>
 80039ce:	4d12      	ldr	r5, [pc, #72]	; (8003a18 <TIM_OC1_SetConfig+0x70>)
 80039d0:	42a8      	cmp	r0, r5
 80039d2:	d002      	beq.n	80039da <TIM_OC1_SetConfig+0x32>
 80039d4:	4d11      	ldr	r5, [pc, #68]	; (8003a1c <TIM_OC1_SetConfig+0x74>)
 80039d6:	42a8      	cmp	r0, r5
 80039d8:	d105      	bne.n	80039e6 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039da:	2508      	movs	r5, #8
 80039dc:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039de:	68cd      	ldr	r5, [r1, #12]
 80039e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e2:	2504      	movs	r5, #4
 80039e4:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	4d0b      	ldr	r5, [pc, #44]	; (8003a14 <TIM_OC1_SetConfig+0x6c>)
 80039e8:	42a8      	cmp	r0, r5
 80039ea:	d005      	beq.n	80039f8 <TIM_OC1_SetConfig+0x50>
 80039ec:	4d0a      	ldr	r5, [pc, #40]	; (8003a18 <TIM_OC1_SetConfig+0x70>)
 80039ee:	42a8      	cmp	r0, r5
 80039f0:	d002      	beq.n	80039f8 <TIM_OC1_SetConfig+0x50>
 80039f2:	4d0a      	ldr	r5, [pc, #40]	; (8003a1c <TIM_OC1_SetConfig+0x74>)
 80039f4:	42a8      	cmp	r0, r5
 80039f6:	d105      	bne.n	8003a04 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f8:	4d09      	ldr	r5, [pc, #36]	; (8003a20 <TIM_OC1_SetConfig+0x78>)
 80039fa:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fc:	694d      	ldr	r5, [r1, #20]
 80039fe:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a00:	698d      	ldr	r5, [r1, #24]
 8003a02:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a04:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a06:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a08:	684a      	ldr	r2, [r1, #4]
 8003a0a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	6203      	str	r3, [r0, #32]
}
 8003a0e:	bd30      	pop	{r4, r5, pc}
 8003a10:	fffeff8c 	.word	0xfffeff8c
 8003a14:	40012c00 	.word	0x40012c00
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	fffffcff 	.word	0xfffffcff

08003a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a26:	6a03      	ldr	r3, [r0, #32]
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <TIM_OC3_SetConfig+0x68>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a32:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a34:	4d16      	ldr	r5, [pc, #88]	; (8003a90 <TIM_OC3_SetConfig+0x6c>)
 8003a36:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a38:	680e      	ldr	r6, [r1, #0]
 8003a3a:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3c:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <TIM_OC3_SetConfig+0x70>)
 8003a3e:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a40:	688a      	ldr	r2, [r1, #8]
 8003a42:	0212      	lsls	r2, r2, #8
 8003a44:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a46:	4a14      	ldr	r2, [pc, #80]	; (8003a98 <TIM_OC3_SetConfig+0x74>)
 8003a48:	4290      	cmp	r0, r2
 8003a4a:	d016      	beq.n	8003a7a <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <TIM_OC3_SetConfig+0x74>)
 8003a4e:	4290      	cmp	r0, r2
 8003a50:	d005      	beq.n	8003a5e <TIM_OC3_SetConfig+0x3a>
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <TIM_OC3_SetConfig+0x78>)
 8003a54:	4290      	cmp	r0, r2
 8003a56:	d002      	beq.n	8003a5e <TIM_OC3_SetConfig+0x3a>
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <TIM_OC3_SetConfig+0x7c>)
 8003a5a:	4290      	cmp	r0, r2
 8003a5c:	d107      	bne.n	8003a6e <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <TIM_OC3_SetConfig+0x80>)
 8003a60:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	694c      	ldr	r4, [r1, #20]
 8003a64:	0124      	lsls	r4, r4, #4
 8003a66:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a68:	698a      	ldr	r2, [r1, #24]
 8003a6a:	0115      	lsls	r5, r2, #4
 8003a6c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a70:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a72:	684a      	ldr	r2, [r1, #4]
 8003a74:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	6203      	str	r3, [r0, #32]
}
 8003a78:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7a:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <TIM_OC3_SetConfig+0x84>)
 8003a7c:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a7e:	68cb      	ldr	r3, [r1, #12]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a84:	4a09      	ldr	r2, [pc, #36]	; (8003aac <TIM_OC3_SetConfig+0x88>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	e7e0      	b.n	8003a4c <TIM_OC3_SetConfig+0x28>
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	fffffeff 	.word	0xfffffeff
 8003a90:	fffeff8c 	.word	0xfffeff8c
 8003a94:	fffffdff 	.word	0xfffffdff
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	ffffcfff 	.word	0xffffcfff
 8003aa8:	fffff7ff 	.word	0xfffff7ff
 8003aac:	fffffbff 	.word	0xfffffbff

08003ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab2:	6a03      	ldr	r3, [r0, #32]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <TIM_OC4_SetConfig+0x4c>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003abe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac0:	4c0f      	ldr	r4, [pc, #60]	; (8003b00 <TIM_OC4_SetConfig+0x50>)
 8003ac2:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac4:	680c      	ldr	r4, [r1, #0]
 8003ac6:	0224      	lsls	r4, r4, #8
 8003ac8:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aca:	4c0e      	ldr	r4, [pc, #56]	; (8003b04 <TIM_OC4_SetConfig+0x54>)
 8003acc:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ace:	688b      	ldr	r3, [r1, #8]
 8003ad0:	031b      	lsls	r3, r3, #12
 8003ad2:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	4c0c      	ldr	r4, [pc, #48]	; (8003b08 <TIM_OC4_SetConfig+0x58>)
 8003ad6:	42a0      	cmp	r0, r4
 8003ad8:	d005      	beq.n	8003ae6 <TIM_OC4_SetConfig+0x36>
 8003ada:	4c0c      	ldr	r4, [pc, #48]	; (8003b0c <TIM_OC4_SetConfig+0x5c>)
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d002      	beq.n	8003ae6 <TIM_OC4_SetConfig+0x36>
 8003ae0:	4c0b      	ldr	r4, [pc, #44]	; (8003b10 <TIM_OC4_SetConfig+0x60>)
 8003ae2:	42a0      	cmp	r0, r4
 8003ae4:	d104      	bne.n	8003af0 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ae6:	4c0b      	ldr	r4, [pc, #44]	; (8003b14 <TIM_OC4_SetConfig+0x64>)
 8003ae8:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003aea:	694c      	ldr	r4, [r1, #20]
 8003aec:	01a4      	lsls	r4, r4, #6
 8003aee:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003af4:	684a      	ldr	r2, [r1, #4]
 8003af6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	6203      	str	r3, [r0, #32]
}
 8003afa:	bd30      	pop	{r4, r5, pc}
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	feff8cff 	.word	0xfeff8cff
 8003b04:	ffffdfff 	.word	0xffffdfff
 8003b08:	40012c00 	.word	0x40012c00
 8003b0c:	40014400 	.word	0x40014400
 8003b10:	40014800 	.word	0x40014800
 8003b14:	ffffbfff 	.word	0xffffbfff

08003b18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b1a:	6a03      	ldr	r3, [r0, #32]
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <TIM_OC5_SetConfig+0x4c>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b24:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b26:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b28:	4d0f      	ldr	r5, [pc, #60]	; (8003b68 <TIM_OC5_SetConfig+0x50>)
 8003b2a:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	680d      	ldr	r5, [r1, #0]
 8003b2e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b30:	4d0e      	ldr	r5, [pc, #56]	; (8003b6c <TIM_OC5_SetConfig+0x54>)
 8003b32:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b34:	688b      	ldr	r3, [r1, #8]
 8003b36:	041b      	lsls	r3, r3, #16
 8003b38:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3a:	4d0d      	ldr	r5, [pc, #52]	; (8003b70 <TIM_OC5_SetConfig+0x58>)
 8003b3c:	42a8      	cmp	r0, r5
 8003b3e:	d005      	beq.n	8003b4c <TIM_OC5_SetConfig+0x34>
 8003b40:	4d0c      	ldr	r5, [pc, #48]	; (8003b74 <TIM_OC5_SetConfig+0x5c>)
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d002      	beq.n	8003b4c <TIM_OC5_SetConfig+0x34>
 8003b46:	4d0c      	ldr	r5, [pc, #48]	; (8003b78 <TIM_OC5_SetConfig+0x60>)
 8003b48:	42a8      	cmp	r0, r5
 8003b4a:	d104      	bne.n	8003b56 <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b4c:	4d05      	ldr	r5, [pc, #20]	; (8003b64 <TIM_OC5_SetConfig+0x4c>)
 8003b4e:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b50:	694d      	ldr	r5, [r1, #20]
 8003b52:	022d      	lsls	r5, r5, #8
 8003b54:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b56:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b58:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b5a:	684a      	ldr	r2, [r1, #4]
 8003b5c:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5e:	6203      	str	r3, [r0, #32]
}
 8003b60:	bd30      	pop	{r4, r5, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	fffeffff 	.word	0xfffeffff
 8003b68:	fffeff8f 	.word	0xfffeff8f
 8003b6c:	fffdffff 	.word	0xfffdffff
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40014400 	.word	0x40014400
 8003b78:	40014800 	.word	0x40014800

08003b7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b7c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b7e:	6a03      	ldr	r3, [r0, #32]
 8003b80:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <TIM_OC6_SetConfig+0x4c>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b8a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b8c:	4c0f      	ldr	r4, [pc, #60]	; (8003bcc <TIM_OC6_SetConfig+0x50>)
 8003b8e:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	680c      	ldr	r4, [r1, #0]
 8003b92:	0224      	lsls	r4, r4, #8
 8003b94:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b96:	4c0e      	ldr	r4, [pc, #56]	; (8003bd0 <TIM_OC6_SetConfig+0x54>)
 8003b98:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b9a:	688b      	ldr	r3, [r1, #8]
 8003b9c:	051b      	lsls	r3, r3, #20
 8003b9e:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	4c0c      	ldr	r4, [pc, #48]	; (8003bd4 <TIM_OC6_SetConfig+0x58>)
 8003ba2:	42a0      	cmp	r0, r4
 8003ba4:	d005      	beq.n	8003bb2 <TIM_OC6_SetConfig+0x36>
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	; (8003bd8 <TIM_OC6_SetConfig+0x5c>)
 8003ba8:	42a0      	cmp	r0, r4
 8003baa:	d002      	beq.n	8003bb2 <TIM_OC6_SetConfig+0x36>
 8003bac:	4c0b      	ldr	r4, [pc, #44]	; (8003bdc <TIM_OC6_SetConfig+0x60>)
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	d104      	bne.n	8003bbc <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bb2:	4c0b      	ldr	r4, [pc, #44]	; (8003be0 <TIM_OC6_SetConfig+0x64>)
 8003bb4:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bb6:	694c      	ldr	r4, [r1, #20]
 8003bb8:	02a4      	lsls	r4, r4, #10
 8003bba:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bbc:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bbe:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc0:	684a      	ldr	r2, [r1, #4]
 8003bc2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc4:	6203      	str	r3, [r0, #32]
}
 8003bc6:	bd30      	pop	{r4, r5, pc}
 8003bc8:	ffefffff 	.word	0xffefffff
 8003bcc:	feff8fff 	.word	0xfeff8fff
 8003bd0:	ffdfffff 	.word	0xffdfffff
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40014400 	.word	0x40014400
 8003bdc:	40014800 	.word	0x40014800
 8003be0:	fffbffff 	.word	0xfffbffff

08003be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be8:	6a04      	ldr	r4, [r0, #32]
 8003bea:	2501      	movs	r5, #1
 8003bec:	43ac      	bics	r4, r5
 8003bee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bf2:	35ef      	adds	r5, #239	; 0xef
 8003bf4:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bfa:	240a      	movs	r4, #10
 8003bfc:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003bfe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c02:	6203      	str	r3, [r0, #32]
}
 8003c04:	bd30      	pop	{r4, r5, pc}
	...

08003c08 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c0a:	6a04      	ldr	r4, [r0, #32]
 8003c0c:	2510      	movs	r5, #16
 8003c0e:	43ac      	bics	r4, r5
 8003c10:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c12:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8003c14:	6a04      	ldr	r4, [r0, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c16:	4e08      	ldr	r6, [pc, #32]	; (8003c38 <TIM_TI2_SetConfig+0x30>)
 8003c18:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c1a:	0212      	lsls	r2, r2, #8
 8003c1c:	432a      	orrs	r2, r5

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c1e:	4d07      	ldr	r5, [pc, #28]	; (8003c3c <TIM_TI2_SetConfig+0x34>)
 8003c20:	402a      	ands	r2, r5
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c22:	071b      	lsls	r3, r3, #28
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c28:	22a0      	movs	r2, #160	; 0xa0
 8003c2a:	4394      	bics	r4, r2
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c2c:	0109      	lsls	r1, r1, #4
 8003c2e:	400a      	ands	r2, r1
 8003c30:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c32:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c34:	6202      	str	r2, [r0, #32]
}
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	fffffcff 	.word	0xfffffcff
 8003c3c:	ffff0fff 	.word	0xffff0fff

08003c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c40:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c42:	6a03      	ldr	r3, [r0, #32]
 8003c44:	2410      	movs	r4, #16
 8003c46:	43a3      	bics	r3, r4
 8003c48:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c4a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003c4c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4e:	4d05      	ldr	r5, [pc, #20]	; (8003c64 <TIM_TI2_ConfigInputStage+0x24>)
 8003c50:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c52:	0312      	lsls	r2, r2, #12
 8003c54:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c56:	24a0      	movs	r4, #160	; 0xa0
 8003c58:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c5a:	0109      	lsls	r1, r1, #4
 8003c5c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003c60:	6201      	str	r1, [r0, #32]
}
 8003c62:	bd30      	pop	{r4, r5, pc}
 8003c64:	ffff0fff 	.word	0xffff0fff

08003c68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c68:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6a:	6a05      	ldr	r5, [r0, #32]
 8003c6c:	4c0b      	ldr	r4, [pc, #44]	; (8003c9c <TIM_TI3_SetConfig+0x34>)
 8003c6e:	4025      	ands	r5, r4
 8003c70:	6205      	str	r5, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c72:	69c4      	ldr	r4, [r0, #28]
  tmpccer = TIMx->CCER;
 8003c74:	6a05      	ldr	r5, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c76:	2603      	movs	r6, #3
 8003c78:	43b4      	bics	r4, r6
  tmpccmr2 |= TIM_ICSelection;
 8003c7a:	4314      	orrs	r4, r2

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c7c:	22f0      	movs	r2, #240	; 0xf0
 8003c7e:	4394      	bics	r4, r2
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c80:	011a      	lsls	r2, r3, #4
 8003c82:	23ff      	movs	r3, #255	; 0xff
 8003c84:	4013      	ands	r3, r2
 8003c86:	431c      	orrs	r4, r3

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c88:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <TIM_TI3_SetConfig+0x38>)
 8003c8a:	401d      	ands	r5, r3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c8c:	0209      	lsls	r1, r1, #8
 8003c8e:	23a0      	movs	r3, #160	; 0xa0
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	4019      	ands	r1, r3
 8003c94:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c96:	61c4      	str	r4, [r0, #28]
  TIMx->CCER = tmpccer;
 8003c98:	6201      	str	r1, [r0, #32]
}
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	fffffeff 	.word	0xfffffeff
 8003ca0:	fffff5ff 	.word	0xfffff5ff

08003ca4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ca4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca6:	6a04      	ldr	r4, [r0, #32]
 8003ca8:	4d0b      	ldr	r5, [pc, #44]	; (8003cd8 <TIM_TI4_SetConfig+0x34>)
 8003caa:	402c      	ands	r4, r5
 8003cac:	6204      	str	r4, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cae:	69c5      	ldr	r5, [r0, #28]
  tmpccer = TIMx->CCER;
 8003cb0:	6a04      	ldr	r4, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cb2:	4e0a      	ldr	r6, [pc, #40]	; (8003cdc <TIM_TI4_SetConfig+0x38>)
 8003cb4:	4035      	ands	r5, r6
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cb6:	0212      	lsls	r2, r2, #8
 8003cb8:	432a      	orrs	r2, r5

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cba:	4d09      	ldr	r5, [pc, #36]	; (8003ce0 <TIM_TI4_SetConfig+0x3c>)
 8003cbc:	402a      	ands	r2, r5
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003cbe:	071b      	lsls	r3, r3, #28
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <TIM_TI4_SetConfig+0x40>)
 8003cc6:	4014      	ands	r4, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003cc8:	0309      	lsls	r1, r1, #12
 8003cca:	22a0      	movs	r2, #160	; 0xa0
 8003ccc:	0212      	lsls	r2, r2, #8
 8003cce:	4011      	ands	r1, r2
 8003cd0:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cd2:	61c3      	str	r3, [r0, #28]
  TIMx->CCER = tmpccer ;
 8003cd4:	6201      	str	r1, [r0, #32]
}
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}
 8003cd8:	ffffefff 	.word	0xffffefff
 8003cdc:	fffffcff 	.word	0xfffffcff
 8003ce0:	ffff0fff 	.word	0xffff0fff
 8003ce4:	ffff5fff 	.word	0xffff5fff

08003ce8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cea:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <TIM_ITRx_SetConfig+0x10>)
 8003cec:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	2107      	movs	r1, #7
 8003cf2:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf4:	6083      	str	r3, [r0, #8]
}
 8003cf6:	4770      	bx	lr
 8003cf8:	ffcfff8f 	.word	0xffcfff8f

08003cfc <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8003cfc:	6803      	ldr	r3, [r0, #0]
 8003cfe:	6a19      	ldr	r1, [r3, #32]
 8003d00:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_TIM_Base_Stop+0x24>)
 8003d02:	4211      	tst	r1, r2
 8003d04:	d107      	bne.n	8003d16 <HAL_TIM_Base_Stop+0x1a>
 8003d06:	6a19      	ldr	r1, [r3, #32]
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_TIM_Base_Stop+0x28>)
 8003d0a:	4211      	tst	r1, r2
 8003d0c:	d103      	bne.n	8003d16 <HAL_TIM_Base_Stop+0x1a>
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	438a      	bics	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003d16:	233d      	movs	r3, #61	; 0x3d
 8003d18:	2201      	movs	r2, #1
 8003d1a:	54c2      	strb	r2, [r0, r3]
}
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	4770      	bx	lr
 8003d20:	00001111 	.word	0x00001111
 8003d24:	00000444 	.word	0x00000444

08003d28 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003d28:	233d      	movs	r3, #61	; 0x3d
 8003d2a:	5cc3      	ldrb	r3, [r0, r3]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d122      	bne.n	8003d76 <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	333c      	adds	r3, #60	; 0x3c
 8003d32:	2202      	movs	r2, #2
 8003d34:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d36:	6802      	ldr	r2, [r0, #0]
 8003d38:	68d3      	ldr	r3, [r2, #12]
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d40:	6803      	ldr	r3, [r0, #0]
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <HAL_TIM_Base_Start_IT+0x5c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d008      	beq.n	8003d5a <HAL_TIM_Base_Start_IT+0x32>
 8003d48:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_TIM_Base_Start_IT+0x60>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d005      	beq.n	8003d5a <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	2101      	movs	r1, #1
 8003d52:	430a      	orrs	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d56:	2000      	movs	r0, #0
 8003d58:	e00e      	b.n	8003d78 <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	490b      	ldr	r1, [pc, #44]	; (8003d8c <HAL_TIM_Base_Start_IT+0x64>)
 8003d5e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	2a06      	cmp	r2, #6
 8003d62:	d00a      	beq.n	8003d7a <HAL_TIM_Base_Start_IT+0x52>
 8003d64:	3907      	subs	r1, #7
 8003d66:	428a      	cmp	r2, r1
 8003d68:	d009      	beq.n	8003d7e <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003d72:	2000      	movs	r0, #0
 8003d74:	e000      	b.n	8003d78 <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
}
 8003d78:	4770      	bx	lr
  return HAL_OK;
 8003d7a:	2000      	movs	r0, #0
 8003d7c:	e7fc      	b.n	8003d78 <HAL_TIM_Base_Start_IT+0x50>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e7fa      	b.n	8003d78 <HAL_TIM_Base_Start_IT+0x50>
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	00010007 	.word	0x00010007

08003d90 <HAL_TIM_PWM_MspInit>:
}
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_IC_MspInit>:
}
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003d94:	4770      	bx	lr

08003d96 <TIM_DMACaptureCplt>:
{
 8003d96:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d98:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d9c:	4283      	cmp	r3, r0
 8003d9e:	d00e      	beq.n	8003dbe <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003da0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003da2:	4283      	cmp	r3, r0
 8003da4:	d016      	beq.n	8003dd4 <TIM_DMACaptureCplt+0x3e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003da8:	4283      	cmp	r3, r0
 8003daa:	d01e      	beq.n	8003dea <TIM_DMACaptureCplt+0x54>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003dac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dae:	4283      	cmp	r3, r0
 8003db0:	d026      	beq.n	8003e00 <TIM_DMACaptureCplt+0x6a>
  HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	0020      	movs	r0, r4
 8003db4:	f7fc ff6e 	bl	8000c94 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db8:	2300      	movs	r3, #0
 8003dba:	7723      	strb	r3, [r4, #28]
}
 8003dbc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003dc2:	69c3      	ldr	r3, [r0, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1f4      	bne.n	8003db2 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	3301      	adds	r3, #1
 8003dca:	223e      	movs	r2, #62	; 0x3e
 8003dcc:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003dce:	3206      	adds	r2, #6
 8003dd0:	54a3      	strb	r3, [r4, r2]
 8003dd2:	e7ee      	b.n	8003db2 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003dd8:	69c3      	ldr	r3, [r0, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e9      	bne.n	8003db2 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	3301      	adds	r3, #1
 8003de0:	223f      	movs	r2, #63	; 0x3f
 8003de2:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003de4:	3206      	adds	r2, #6
 8003de6:	54a3      	strb	r3, [r4, r2]
 8003de8:	e7e3      	b.n	8003db2 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dea:	2304      	movs	r3, #4
 8003dec:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003dee:	69c3      	ldr	r3, [r0, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1de      	bne.n	8003db2 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	3301      	adds	r3, #1
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	3206      	adds	r2, #6
 8003dfc:	54a3      	strb	r3, [r4, r2]
 8003dfe:	e7d8      	b.n	8003db2 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e00:	2308      	movs	r3, #8
 8003e02:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8003e04:	69c3      	ldr	r3, [r0, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1d3      	bne.n	8003db2 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	2241      	movs	r2, #65	; 0x41
 8003e0e:	54a3      	strb	r3, [r4, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	3206      	adds	r2, #6
 8003e12:	54a3      	strb	r3, [r4, r2]
 8003e14:	e7cd      	b.n	8003db2 <TIM_DMACaptureCplt+0x1c>

08003e16 <TIM_DMACaptureHalfCplt>:
{
 8003e16:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e18:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e1c:	4283      	cmp	r3, r0
 8003e1e:	d00b      	beq.n	8003e38 <TIM_DMACaptureHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d010      	beq.n	8003e48 <TIM_DMACaptureHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e28:	4283      	cmp	r3, r0
 8003e2a:	d010      	beq.n	8003e4e <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e2e:	4283      	cmp	r3, r0
 8003e30:	d104      	bne.n	8003e3c <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e32:	2308      	movs	r3, #8
 8003e34:	7723      	strb	r3, [r4, #28]
 8003e36:	e001      	b.n	8003e3c <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003e3c:	0020      	movs	r0, r4
 8003e3e:	f7fc ff37 	bl	8000cb0 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	2300      	movs	r3, #0
 8003e44:	7723      	strb	r3, [r4, #28]
}
 8003e46:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	7723      	strb	r3, [r4, #28]
 8003e4c:	e7f6      	b.n	8003e3c <TIM_DMACaptureHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	2304      	movs	r3, #4
 8003e50:	7723      	strb	r3, [r4, #28]
 8003e52:	e7f3      	b.n	8003e3c <TIM_DMACaptureHalfCplt+0x26>

08003e54 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_TriggerCallback>:
}
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_IRQHandler>:
{
 8003e58:	b510      	push	{r4, lr}
 8003e5a:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e5c:	6803      	ldr	r3, [r0, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	0792      	lsls	r2, r2, #30
 8003e62:	d50f      	bpl.n	8003e84 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	0792      	lsls	r2, r2, #30
 8003e68:	d50c      	bpl.n	8003e84 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	4252      	negs	r2, r2
 8003e6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e74:	6803      	ldr	r3, [r0, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	079b      	lsls	r3, r3, #30
 8003e7a:	d06a      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7c:	f7fc ff0a 	bl	8000c94 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	2300      	movs	r3, #0
 8003e82:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	0752      	lsls	r2, r2, #29
 8003e8a:	d512      	bpl.n	8003eb2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	0752      	lsls	r2, r2, #29
 8003e90:	d50f      	bpl.n	8003eb2 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e92:	2205      	movs	r2, #5
 8003e94:	4252      	negs	r2, r2
 8003e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	23c0      	movs	r3, #192	; 0xc0
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	421a      	tst	r2, r3
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea8:	0020      	movs	r0, r4
 8003eaa:	f7fc fef3 	bl	8000c94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	0712      	lsls	r2, r2, #28
 8003eb8:	d510      	bpl.n	8003edc <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	0712      	lsls	r2, r2, #28
 8003ebe:	d50d      	bpl.n	8003edc <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec0:	2209      	movs	r2, #9
 8003ec2:	4252      	negs	r2, r2
 8003ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	079b      	lsls	r3, r3, #30
 8003ed0:	d04c      	beq.n	8003f6c <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f7fc fede 	bl	8000c94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	06d2      	lsls	r2, r2, #27
 8003ee2:	d512      	bpl.n	8003f0a <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	06d2      	lsls	r2, r2, #27
 8003ee8:	d50f      	bpl.n	8003f0a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eea:	2211      	movs	r2, #17
 8003eec:	4252      	negs	r2, r2
 8003eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ef0:	2308      	movs	r3, #8
 8003ef2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	23c0      	movs	r3, #192	; 0xc0
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	421a      	tst	r2, r3
 8003efe:	d03c      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f00:	0020      	movs	r0, r4
 8003f02:	f7fc fec7 	bl	8000c94 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	2300      	movs	r3, #0
 8003f08:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	07d2      	lsls	r2, r2, #31
 8003f10:	d502      	bpl.n	8003f18 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	07d2      	lsls	r2, r2, #31
 8003f16:	d437      	bmi.n	8003f88 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	0612      	lsls	r2, r2, #24
 8003f1e:	d502      	bpl.n	8003f26 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	0612      	lsls	r2, r2, #24
 8003f24:	d437      	bmi.n	8003f96 <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	05d2      	lsls	r2, r2, #23
 8003f2c:	d502      	bpl.n	8003f34 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	0612      	lsls	r2, r2, #24
 8003f32:	d437      	bmi.n	8003fa4 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	0652      	lsls	r2, r2, #25
 8003f3a:	d502      	bpl.n	8003f42 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	0652      	lsls	r2, r2, #25
 8003f40:	d436      	bmi.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	0692      	lsls	r2, r2, #26
 8003f48:	d502      	bpl.n	8003f50 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	0692      	lsls	r2, r2, #26
 8003f4e:	d436      	bmi.n	8003fbe <HAL_TIM_IRQHandler+0x166>
}
 8003f50:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f52:	f7ff ff1f 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f56:	0020      	movs	r0, r4
 8003f58:	f7ff ff7c 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f5c:	e790      	b.n	8003e80 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	0020      	movs	r0, r4
 8003f60:	f7ff ff18 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	0020      	movs	r0, r4
 8003f66:	f7ff ff75 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f6a:	e7a0      	b.n	8003eae <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6c:	0020      	movs	r0, r4
 8003f6e:	f7ff ff11 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f72:	0020      	movs	r0, r4
 8003f74:	f7ff ff6e 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f78:	e7ae      	b.n	8003ed8 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	f7ff ff0a 	bl	8003d94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	0020      	movs	r0, r4
 8003f82:	f7ff ff67 	bl	8003e54 <HAL_TIM_PWM_PulseFinishedCallback>
 8003f86:	e7be      	b.n	8003f06 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4252      	negs	r2, r2
 8003f8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f8e:	0020      	movs	r0, r4
 8003f90:	f7fc ff5a 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
 8003f94:	e7c0      	b.n	8003f18 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f96:	2281      	movs	r2, #129	; 0x81
 8003f98:	4252      	negs	r2, r2
 8003f9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f9c:	0020      	movs	r0, r4
 8003f9e:	f000 ff04 	bl	8004daa <HAL_TIMEx_BreakCallback>
 8003fa2:	e7c0      	b.n	8003f26 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <HAL_TIM_IRQHandler+0x174>)
 8003fa6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003fa8:	0020      	movs	r0, r4
 8003faa:	f000 feff 	bl	8004dac <HAL_TIMEx_Break2Callback>
 8003fae:	e7c1      	b.n	8003f34 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fb0:	2241      	movs	r2, #65	; 0x41
 8003fb2:	4252      	negs	r2, r2
 8003fb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fb6:	0020      	movs	r0, r4
 8003fb8:	f7ff ff4d 	bl	8003e56 <HAL_TIM_TriggerCallback>
 8003fbc:	e7c1      	b.n	8003f42 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fbe:	2221      	movs	r2, #33	; 0x21
 8003fc0:	4252      	negs	r2, r2
 8003fc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003fc4:	0020      	movs	r0, r4
 8003fc6:	f000 feef 	bl	8004da8 <HAL_TIMEx_CommutCallback>
}
 8003fca:	e7c1      	b.n	8003f50 <HAL_TIM_IRQHandler+0xf8>
 8003fcc:	fffffeff 	.word	0xfffffeff

08003fd0 <HAL_TIM_ErrorCallback>:
}
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_DMAError>:
{
 8003fd2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd4:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	d00c      	beq.n	8003ff6 <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003fde:	4283      	cmp	r3, r0
 8003fe0:	d013      	beq.n	800400a <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fe4:	4283      	cmp	r3, r0
 8003fe6:	d016      	beq.n	8004016 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003fe8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fea:	4283      	cmp	r3, r0
 8003fec:	d019      	beq.n	8004022 <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8003fee:	233d      	movs	r3, #61	; 0x3d
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	54e2      	strb	r2, [r4, r3]
 8003ff4:	e003      	b.n	8003ffe <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ffa:	223e      	movs	r2, #62	; 0x3e
 8003ffc:	54a3      	strb	r3, [r4, r2]
  HAL_TIM_ErrorCallback(htim);
 8003ffe:	0020      	movs	r0, r4
 8004000:	f7ff ffe6 	bl	8003fd0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004004:	2300      	movs	r3, #0
 8004006:	7723      	strb	r3, [r4, #28]
}
 8004008:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800400a:	2302      	movs	r3, #2
 800400c:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	333d      	adds	r3, #61	; 0x3d
 8004010:	2201      	movs	r2, #1
 8004012:	54e2      	strb	r2, [r4, r3]
 8004014:	e7f3      	b.n	8003ffe <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004016:	2304      	movs	r3, #4
 8004018:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	333c      	adds	r3, #60	; 0x3c
 800401c:	2201      	movs	r2, #1
 800401e:	54e2      	strb	r2, [r4, r3]
 8004020:	e7ed      	b.n	8003ffe <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004022:	2308      	movs	r3, #8
 8004024:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004026:	3339      	adds	r3, #57	; 0x39
 8004028:	2201      	movs	r2, #1
 800402a:	54e2      	strb	r2, [r4, r3]
 800402c:	e7e7      	b.n	8003ffe <TIM_DMAError+0x2c>
	...

08004030 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004030:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <TIM_Base_SetConfig+0x6c>)
 8004034:	4290      	cmp	r0, r2
 8004036:	d002      	beq.n	800403e <TIM_Base_SetConfig+0xe>
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_Base_SetConfig+0x70>)
 800403a:	4290      	cmp	r0, r2
 800403c:	d103      	bne.n	8004046 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403e:	2270      	movs	r2, #112	; 0x70
 8004040:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004042:	684a      	ldr	r2, [r1, #4]
 8004044:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <TIM_Base_SetConfig+0x6c>)
 8004048:	4290      	cmp	r0, r2
 800404a:	d00b      	beq.n	8004064 <TIM_Base_SetConfig+0x34>
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <TIM_Base_SetConfig+0x70>)
 800404e:	4290      	cmp	r0, r2
 8004050:	d008      	beq.n	8004064 <TIM_Base_SetConfig+0x34>
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <TIM_Base_SetConfig+0x74>)
 8004054:	4290      	cmp	r0, r2
 8004056:	d005      	beq.n	8004064 <TIM_Base_SetConfig+0x34>
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <TIM_Base_SetConfig+0x78>)
 800405a:	4290      	cmp	r0, r2
 800405c:	d002      	beq.n	8004064 <TIM_Base_SetConfig+0x34>
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <TIM_Base_SetConfig+0x7c>)
 8004060:	4290      	cmp	r0, r2
 8004062:	d103      	bne.n	800406c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <TIM_Base_SetConfig+0x80>)
 8004066:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004068:	68ca      	ldr	r2, [r1, #12]
 800406a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	4393      	bics	r3, r2
 8004070:	694a      	ldr	r2, [r1, #20]
 8004072:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004074:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004076:	688b      	ldr	r3, [r1, #8]
 8004078:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800407a:	680b      	ldr	r3, [r1, #0]
 800407c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <TIM_Base_SetConfig+0x6c>)
 8004080:	4298      	cmp	r0, r3
 8004082:	d005      	beq.n	8004090 <TIM_Base_SetConfig+0x60>
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <TIM_Base_SetConfig+0x78>)
 8004086:	4298      	cmp	r0, r3
 8004088:	d002      	beq.n	8004090 <TIM_Base_SetConfig+0x60>
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <TIM_Base_SetConfig+0x7c>)
 800408c:	4298      	cmp	r0, r3
 800408e:	d101      	bne.n	8004094 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	690b      	ldr	r3, [r1, #16]
 8004092:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004094:	2301      	movs	r3, #1
 8004096:	6143      	str	r3, [r0, #20]
}
 8004098:	4770      	bx	lr
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40002000 	.word	0x40002000
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	fffffcff 	.word	0xfffffcff

080040b4 <HAL_TIM_Base_Init>:
{
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80040b8:	d02a      	beq.n	8004110 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	233d      	movs	r3, #61	; 0x3d
 80040bc:	5cc3      	ldrb	r3, [r0, r3]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d020      	beq.n	8004104 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	253d      	movs	r5, #61	; 0x3d
 80040c4:	2302      	movs	r3, #2
 80040c6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c8:	0021      	movs	r1, r4
 80040ca:	c901      	ldmia	r1!, {r0}
 80040cc:	f7ff ffb0 	bl	8004030 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040d0:	2301      	movs	r3, #1
 80040d2:	2248      	movs	r2, #72	; 0x48
 80040d4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	3a0a      	subs	r2, #10
 80040d8:	54a3      	strb	r3, [r4, r2]
 80040da:	3201      	adds	r2, #1
 80040dc:	54a3      	strb	r3, [r4, r2]
 80040de:	3201      	adds	r2, #1
 80040e0:	54a3      	strb	r3, [r4, r2]
 80040e2:	3201      	adds	r2, #1
 80040e4:	54a3      	strb	r3, [r4, r2]
 80040e6:	3201      	adds	r2, #1
 80040e8:	54a3      	strb	r3, [r4, r2]
 80040ea:	3201      	adds	r2, #1
 80040ec:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	3201      	adds	r2, #1
 80040f0:	54a3      	strb	r3, [r4, r2]
 80040f2:	3201      	adds	r2, #1
 80040f4:	54a3      	strb	r3, [r4, r2]
 80040f6:	3201      	adds	r2, #1
 80040f8:	54a3      	strb	r3, [r4, r2]
 80040fa:	3201      	adds	r2, #1
 80040fc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80040fe:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004100:	2000      	movs	r0, #0
}
 8004102:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004104:	333c      	adds	r3, #60	; 0x3c
 8004106:	2200      	movs	r2, #0
 8004108:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800410a:	f7fd fcc5 	bl	8001a98 <HAL_TIM_Base_MspInit>
 800410e:	e7d8      	b.n	80040c2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004110:	2001      	movs	r0, #1
 8004112:	e7f6      	b.n	8004102 <HAL_TIM_Base_Init+0x4e>

08004114 <HAL_TIM_PWM_Init>:
{
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004118:	d02a      	beq.n	8004170 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800411a:	233d      	movs	r3, #61	; 0x3d
 800411c:	5cc3      	ldrb	r3, [r0, r3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	253d      	movs	r5, #61	; 0x3d
 8004124:	2302      	movs	r3, #2
 8004126:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	0021      	movs	r1, r4
 800412a:	c901      	ldmia	r1!, {r0}
 800412c:	f7ff ff80 	bl	8004030 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	2301      	movs	r3, #1
 8004132:	2248      	movs	r2, #72	; 0x48
 8004134:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	3a0a      	subs	r2, #10
 8004138:	54a3      	strb	r3, [r4, r2]
 800413a:	3201      	adds	r2, #1
 800413c:	54a3      	strb	r3, [r4, r2]
 800413e:	3201      	adds	r2, #1
 8004140:	54a3      	strb	r3, [r4, r2]
 8004142:	3201      	adds	r2, #1
 8004144:	54a3      	strb	r3, [r4, r2]
 8004146:	3201      	adds	r2, #1
 8004148:	54a3      	strb	r3, [r4, r2]
 800414a:	3201      	adds	r2, #1
 800414c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	3201      	adds	r2, #1
 8004150:	54a3      	strb	r3, [r4, r2]
 8004152:	3201      	adds	r2, #1
 8004154:	54a3      	strb	r3, [r4, r2]
 8004156:	3201      	adds	r2, #1
 8004158:	54a3      	strb	r3, [r4, r2]
 800415a:	3201      	adds	r2, #1
 800415c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800415e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004160:	2000      	movs	r0, #0
}
 8004162:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004164:	333c      	adds	r3, #60	; 0x3c
 8004166:	2200      	movs	r2, #0
 8004168:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800416a:	f7ff fe11 	bl	8003d90 <HAL_TIM_PWM_MspInit>
 800416e:	e7d8      	b.n	8004122 <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8004170:	2001      	movs	r0, #1
 8004172:	e7f6      	b.n	8004162 <HAL_TIM_PWM_Init+0x4e>

08004174 <HAL_TIM_IC_Init>:
{
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004178:	d02a      	beq.n	80041d0 <HAL_TIM_IC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	233d      	movs	r3, #61	; 0x3d
 800417c:	5cc3      	ldrb	r3, [r0, r3]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d020      	beq.n	80041c4 <HAL_TIM_IC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004182:	253d      	movs	r5, #61	; 0x3d
 8004184:	2302      	movs	r3, #2
 8004186:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004188:	0021      	movs	r1, r4
 800418a:	c901      	ldmia	r1!, {r0}
 800418c:	f7ff ff50 	bl	8004030 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004190:	2301      	movs	r3, #1
 8004192:	2248      	movs	r2, #72	; 0x48
 8004194:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	3a0a      	subs	r2, #10
 8004198:	54a3      	strb	r3, [r4, r2]
 800419a:	3201      	adds	r2, #1
 800419c:	54a3      	strb	r3, [r4, r2]
 800419e:	3201      	adds	r2, #1
 80041a0:	54a3      	strb	r3, [r4, r2]
 80041a2:	3201      	adds	r2, #1
 80041a4:	54a3      	strb	r3, [r4, r2]
 80041a6:	3201      	adds	r2, #1
 80041a8:	54a3      	strb	r3, [r4, r2]
 80041aa:	3201      	adds	r2, #1
 80041ac:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	3201      	adds	r2, #1
 80041b0:	54a3      	strb	r3, [r4, r2]
 80041b2:	3201      	adds	r2, #1
 80041b4:	54a3      	strb	r3, [r4, r2]
 80041b6:	3201      	adds	r2, #1
 80041b8:	54a3      	strb	r3, [r4, r2]
 80041ba:	3201      	adds	r2, #1
 80041bc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80041be:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80041c0:	2000      	movs	r0, #0
}
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80041c4:	333c      	adds	r3, #60	; 0x3c
 80041c6:	2200      	movs	r2, #0
 80041c8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_IC_MspInit(htim);
 80041ca:	f7ff fde2 	bl	8003d92 <HAL_TIM_IC_MspInit>
 80041ce:	e7d8      	b.n	8004182 <HAL_TIM_IC_Init+0xe>
    return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
 80041d2:	e7f6      	b.n	80041c2 <HAL_TIM_IC_Init+0x4e>

080041d4 <TIM_OC2_SetConfig>:
{
 80041d4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	6a03      	ldr	r3, [r0, #32]
 80041d8:	2210      	movs	r2, #16
 80041da:	4393      	bics	r3, r2
 80041dc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80041de:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041e0:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80041e2:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <TIM_OC2_SetConfig+0x6c>)
 80041e6:	4014      	ands	r4, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	680a      	ldr	r2, [r1, #0]
 80041ea:	0212      	lsls	r2, r2, #8
 80041ec:	4314      	orrs	r4, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80041ee:	2220      	movs	r2, #32
 80041f0:	4393      	bics	r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041f2:	688a      	ldr	r2, [r1, #8]
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <TIM_OC2_SetConfig+0x70>)
 80041fa:	4290      	cmp	r0, r2
 80041fc:	d016      	beq.n	800422c <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041fe:	4a11      	ldr	r2, [pc, #68]	; (8004244 <TIM_OC2_SetConfig+0x70>)
 8004200:	4290      	cmp	r0, r2
 8004202:	d005      	beq.n	8004210 <TIM_OC2_SetConfig+0x3c>
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <TIM_OC2_SetConfig+0x74>)
 8004206:	4290      	cmp	r0, r2
 8004208:	d002      	beq.n	8004210 <TIM_OC2_SetConfig+0x3c>
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <TIM_OC2_SetConfig+0x78>)
 800420c:	4290      	cmp	r0, r2
 800420e:	d107      	bne.n	8004220 <TIM_OC2_SetConfig+0x4c>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004210:	4a0f      	ldr	r2, [pc, #60]	; (8004250 <TIM_OC2_SetConfig+0x7c>)
 8004212:	402a      	ands	r2, r5
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004214:	694d      	ldr	r5, [r1, #20]
 8004216:	00ad      	lsls	r5, r5, #2
 8004218:	4315      	orrs	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800421a:	698a      	ldr	r2, [r1, #24]
 800421c:	0092      	lsls	r2, r2, #2
 800421e:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8004220:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004222:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004224:	684a      	ldr	r2, [r1, #4]
 8004226:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004228:	6203      	str	r3, [r0, #32]
}
 800422a:	bd30      	pop	{r4, r5, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	4393      	bics	r3, r2
 8004230:	001a      	movs	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004232:	68cb      	ldr	r3, [r1, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004238:	2240      	movs	r2, #64	; 0x40
 800423a:	4393      	bics	r3, r2
 800423c:	e7df      	b.n	80041fe <TIM_OC2_SetConfig+0x2a>
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	feff8cff 	.word	0xfeff8cff
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800
 8004250:	fffff3ff 	.word	0xfffff3ff

08004254 <HAL_TIM_PWM_ConfigChannel>:
{
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	0004      	movs	r4, r0
 8004258:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800425a:	233c      	movs	r3, #60	; 0x3c
 800425c:	5cc3      	ldrb	r3, [r0, r3]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d100      	bne.n	8004264 <HAL_TIM_PWM_ConfigChannel+0x10>
 8004262:	e092      	b.n	800438a <HAL_TIM_PWM_ConfigChannel+0x136>
 8004264:	233c      	movs	r3, #60	; 0x3c
 8004266:	2101      	movs	r1, #1
 8004268:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800426a:	2a14      	cmp	r2, #20
 800426c:	d900      	bls.n	8004270 <HAL_TIM_PWM_ConfigChannel+0x1c>
 800426e:	e087      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8004274:	589b      	ldr	r3, [r3, r2]
 8004276:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004278:	0029      	movs	r1, r5
 800427a:	6800      	ldr	r0, [r0, #0]
 800427c:	f7ff fb94 	bl	80039a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	6993      	ldr	r3, [r2, #24]
 8004284:	2108      	movs	r1, #8
 8004286:	430b      	orrs	r3, r1
 8004288:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800428a:	6822      	ldr	r2, [r4, #0]
 800428c:	6993      	ldr	r3, [r2, #24]
 800428e:	3904      	subs	r1, #4
 8004290:	438b      	bics	r3, r1
 8004292:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004294:	6822      	ldr	r2, [r4, #0]
 8004296:	6993      	ldr	r3, [r2, #24]
 8004298:	6929      	ldr	r1, [r5, #16]
 800429a:	430b      	orrs	r3, r1
 800429c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800429e:	2000      	movs	r0, #0
      break;
 80042a0:	e06f      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042a2:	0029      	movs	r1, r5
 80042a4:	6800      	ldr	r0, [r0, #0]
 80042a6:	f7ff ff95 	bl	80041d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	6991      	ldr	r1, [r2, #24]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	430b      	orrs	r3, r1
 80042b4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	6993      	ldr	r3, [r2, #24]
 80042ba:	4936      	ldr	r1, [pc, #216]	; (8004394 <HAL_TIM_PWM_ConfigChannel+0x140>)
 80042bc:	400b      	ands	r3, r1
 80042be:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c0:	6821      	ldr	r1, [r4, #0]
 80042c2:	698b      	ldr	r3, [r1, #24]
 80042c4:	692a      	ldr	r2, [r5, #16]
 80042c6:	0212      	lsls	r2, r2, #8
 80042c8:	4313      	orrs	r3, r2
 80042ca:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80042cc:	2000      	movs	r0, #0
      break;
 80042ce:	e058      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042d0:	0029      	movs	r1, r5
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	f7ff fba6 	bl	8003a24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	69d3      	ldr	r3, [r2, #28]
 80042dc:	2108      	movs	r1, #8
 80042de:	430b      	orrs	r3, r1
 80042e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	69d3      	ldr	r3, [r2, #28]
 80042e6:	3904      	subs	r1, #4
 80042e8:	438b      	bics	r3, r1
 80042ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	69d3      	ldr	r3, [r2, #28]
 80042f0:	6929      	ldr	r1, [r5, #16]
 80042f2:	430b      	orrs	r3, r1
 80042f4:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2000      	movs	r0, #0
      break;
 80042f8:	e043      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fa:	0029      	movs	r1, r5
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f7ff fbd7 	bl	8003ab0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004302:	6822      	ldr	r2, [r4, #0]
 8004304:	69d1      	ldr	r1, [r2, #28]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	430b      	orrs	r3, r1
 800430c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	69d3      	ldr	r3, [r2, #28]
 8004312:	4920      	ldr	r1, [pc, #128]	; (8004394 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8004314:	400b      	ands	r3, r1
 8004316:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	69cb      	ldr	r3, [r1, #28]
 800431c:	692a      	ldr	r2, [r5, #16]
 800431e:	0212      	lsls	r2, r2, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2000      	movs	r0, #0
      break;
 8004326:	e02c      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004328:	0029      	movs	r1, r5
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	f7ff fbf4 	bl	8003b18 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004334:	2108      	movs	r1, #8
 8004336:	430b      	orrs	r3, r1
 8004338:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800433e:	3904      	subs	r1, #4
 8004340:	438b      	bics	r3, r1
 8004342:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004344:	6822      	ldr	r2, [r4, #0]
 8004346:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004348:	6929      	ldr	r1, [r5, #16]
 800434a:	430b      	orrs	r3, r1
 800434c:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2000      	movs	r0, #0
      break;
 8004350:	e017      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004352:	0029      	movs	r1, r5
 8004354:	6800      	ldr	r0, [r0, #0]
 8004356:	f7ff fc11 	bl	8003b7c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	430b      	orrs	r3, r1
 8004364:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800436a:	490a      	ldr	r1, [pc, #40]	; (8004394 <HAL_TIM_PWM_ConfigChannel+0x140>)
 800436c:	400b      	ands	r3, r1
 800436e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004370:	6821      	ldr	r1, [r4, #0]
 8004372:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8004374:	692a      	ldr	r2, [r5, #16]
 8004376:	0212      	lsls	r2, r2, #8
 8004378:	4313      	orrs	r3, r2
 800437a:	654b      	str	r3, [r1, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800437c:	2000      	movs	r0, #0
      break;
 800437e:	e000      	b.n	8004382 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004380:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004382:	233c      	movs	r3, #60	; 0x3c
 8004384:	2200      	movs	r2, #0
 8004386:	54e2      	strb	r2, [r4, r3]
}
 8004388:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800438a:	2002      	movs	r0, #2
 800438c:	e7fc      	b.n	8004388 <HAL_TIM_PWM_ConfigChannel+0x134>
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	08004f64 	.word	0x08004f64
 8004394:	fffffbff 	.word	0xfffffbff

08004398 <TIM_TI1_SetConfig>:
{
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	0017      	movs	r7, r2
 800439c:	001d      	movs	r5, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800439e:	6a03      	ldr	r3, [r0, #32]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4393      	bics	r3, r2
 80043a4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80043a8:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <TIM_TI1_SetConfig+0x44>)
 80043ac:	4298      	cmp	r0, r3
 80043ae:	d005      	beq.n	80043bc <TIM_TI1_SetConfig+0x24>
 80043b0:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <TIM_TI1_SetConfig+0x48>)
 80043b2:	4298      	cmp	r0, r3
 80043b4:	d002      	beq.n	80043bc <TIM_TI1_SetConfig+0x24>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043b6:	2301      	movs	r3, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	e002      	b.n	80043c2 <TIM_TI1_SetConfig+0x2a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043bc:	2303      	movs	r3, #3
 80043be:	439a      	bics	r2, r3
    tmpccmr1 |= TIM_ICSelection;
 80043c0:	433a      	orrs	r2, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c2:	23f0      	movs	r3, #240	; 0xf0
 80043c4:	439a      	bics	r2, r3
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043c6:	012d      	lsls	r5, r5, #4
 80043c8:	24ff      	movs	r4, #255	; 0xff
 80043ca:	402c      	ands	r4, r5
 80043cc:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ce:	3be6      	subs	r3, #230	; 0xe6
 80043d0:	439e      	bics	r6, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043d2:	400b      	ands	r3, r1
 80043d4:	4333      	orrs	r3, r6
  TIMx->CCMR1 = tmpccmr1;
 80043d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80043d8:	6203      	str	r3, [r0, #32]
}
 80043da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40000400 	.word	0x40000400

080043e4 <HAL_TIM_IC_ConfigChannel>:
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	0004      	movs	r4, r0
 80043e8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80043ea:	233c      	movs	r3, #60	; 0x3c
 80043ec:	5cc3      	ldrb	r3, [r0, r3]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d059      	beq.n	80044a6 <HAL_TIM_IC_ConfigChannel+0xc2>
 80043f2:	233c      	movs	r3, #60	; 0x3c
 80043f4:	2101      	movs	r1, #1
 80043f6:	54c1      	strb	r1, [r0, r3]
  if (Channel == TIM_CHANNEL_1)
 80043f8:	2a00      	cmp	r2, #0
 80043fa:	d00a      	beq.n	8004412 <HAL_TIM_IC_ConfigChannel+0x2e>
  else if (Channel == TIM_CHANNEL_2)
 80043fc:	2a04      	cmp	r2, #4
 80043fe:	d01a      	beq.n	8004436 <HAL_TIM_IC_ConfigChannel+0x52>
  else if (Channel == TIM_CHANNEL_3)
 8004400:	2a08      	cmp	r2, #8
 8004402:	d02b      	beq.n	800445c <HAL_TIM_IC_ConfigChannel+0x78>
  else if (Channel == TIM_CHANNEL_4)
 8004404:	2a0c      	cmp	r2, #12
 8004406:	d03b      	beq.n	8004480 <HAL_TIM_IC_ConfigChannel+0x9c>
    status = HAL_ERROR;
 8004408:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800440a:	233c      	movs	r3, #60	; 0x3c
 800440c:	2200      	movs	r2, #0
 800440e:	54e2      	strb	r2, [r4, r3]
}
 8004410:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004412:	68eb      	ldr	r3, [r5, #12]
 8004414:	686a      	ldr	r2, [r5, #4]
 8004416:	6829      	ldr	r1, [r5, #0]
 8004418:	6800      	ldr	r0, [r0, #0]
 800441a:	f7ff ffbd 	bl	8004398 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	6993      	ldr	r3, [r2, #24]
 8004422:	210c      	movs	r1, #12
 8004424:	438b      	bics	r3, r1
 8004426:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004428:	6822      	ldr	r2, [r4, #0]
 800442a:	6993      	ldr	r3, [r2, #24]
 800442c:	68a9      	ldr	r1, [r5, #8]
 800442e:	430b      	orrs	r3, r1
 8004430:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2000      	movs	r0, #0
 8004434:	e7e9      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x26>
    TIM_TI2_SetConfig(htim->Instance,
 8004436:	68eb      	ldr	r3, [r5, #12]
 8004438:	686a      	ldr	r2, [r5, #4]
 800443a:	6829      	ldr	r1, [r5, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f7ff fbe3 	bl	8003c08 <TIM_TI2_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	6993      	ldr	r3, [r2, #24]
 8004446:	4919      	ldr	r1, [pc, #100]	; (80044ac <HAL_TIM_IC_ConfigChannel+0xc8>)
 8004448:	400b      	ands	r3, r1
 800444a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	698b      	ldr	r3, [r1, #24]
 8004450:	68aa      	ldr	r2, [r5, #8]
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	4313      	orrs	r3, r2
 8004456:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2000      	movs	r0, #0
 800445a:	e7d6      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x26>
    TIM_TI3_SetConfig(htim->Instance,
 800445c:	68eb      	ldr	r3, [r5, #12]
 800445e:	686a      	ldr	r2, [r5, #4]
 8004460:	6829      	ldr	r1, [r5, #0]
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	f7ff fc00 	bl	8003c68 <TIM_TI3_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004468:	6822      	ldr	r2, [r4, #0]
 800446a:	69d3      	ldr	r3, [r2, #28]
 800446c:	210c      	movs	r1, #12
 800446e:	438b      	bics	r3, r1
 8004470:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	69d3      	ldr	r3, [r2, #28]
 8004476:	68a9      	ldr	r1, [r5, #8]
 8004478:	430b      	orrs	r3, r1
 800447a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800447c:	2000      	movs	r0, #0
 800447e:	e7c4      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x26>
    TIM_TI4_SetConfig(htim->Instance,
 8004480:	68eb      	ldr	r3, [r5, #12]
 8004482:	686a      	ldr	r2, [r5, #4]
 8004484:	6829      	ldr	r1, [r5, #0]
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	f7ff fc0c 	bl	8003ca4 <TIM_TI4_SetConfig>
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800448c:	6822      	ldr	r2, [r4, #0]
 800448e:	69d3      	ldr	r3, [r2, #28]
 8004490:	4906      	ldr	r1, [pc, #24]	; (80044ac <HAL_TIM_IC_ConfigChannel+0xc8>)
 8004492:	400b      	ands	r3, r1
 8004494:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004496:	6821      	ldr	r1, [r4, #0]
 8004498:	69cb      	ldr	r3, [r1, #28]
 800449a:	68aa      	ldr	r2, [r5, #8]
 800449c:	0212      	lsls	r2, r2, #8
 800449e:	4313      	orrs	r3, r2
 80044a0:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2000      	movs	r0, #0
 80044a4:	e7b1      	b.n	800440a <HAL_TIM_IC_ConfigChannel+0x26>
  __HAL_LOCK(htim);
 80044a6:	2002      	movs	r0, #2
 80044a8:	e7b2      	b.n	8004410 <HAL_TIM_IC_ConfigChannel+0x2c>
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	fffff3ff 	.word	0xfffff3ff

080044b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044b0:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044b2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b4:	4d03      	ldr	r5, [pc, #12]	; (80044c4 <TIM_ETR_SetConfig+0x14>)
 80044b6:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4313      	orrs	r3, r2
 80044bc:	430b      	orrs	r3, r1
 80044be:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c0:	6083      	str	r3, [r0, #8]
}
 80044c2:	bd30      	pop	{r4, r5, pc}
 80044c4:	ffff00ff 	.word	0xffff00ff

080044c8 <HAL_TIM_ConfigClockSource>:
{
 80044c8:	b510      	push	{r4, lr}
 80044ca:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80044cc:	233c      	movs	r3, #60	; 0x3c
 80044ce:	5cc3      	ldrb	r3, [r0, r3]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d100      	bne.n	80044d6 <HAL_TIM_ConfigClockSource+0xe>
 80044d4:	e078      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x100>
 80044d6:	233c      	movs	r3, #60	; 0x3c
 80044d8:	2201      	movs	r2, #1
 80044da:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	3301      	adds	r3, #1
 80044de:	3201      	adds	r2, #1
 80044e0:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80044e2:	6802      	ldr	r2, [r0, #0]
 80044e4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e6:	4839      	ldr	r0, [pc, #228]	; (80045cc <HAL_TIM_ConfigClockSource+0x104>)
 80044e8:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80044ea:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80044ec:	680b      	ldr	r3, [r1, #0]
 80044ee:	2b60      	cmp	r3, #96	; 0x60
 80044f0:	d050      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0xcc>
 80044f2:	d82a      	bhi.n	800454a <HAL_TIM_ConfigClockSource+0x82>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d058      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xe2>
 80044f8:	d90c      	bls.n	8004514 <HAL_TIM_ConfigClockSource+0x4c>
 80044fa:	2b50      	cmp	r3, #80	; 0x50
 80044fc:	d123      	bne.n	8004546 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	68ca      	ldr	r2, [r1, #12]
 8004500:	6849      	ldr	r1, [r1, #4]
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	f7ff fb6e 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004508:	2150      	movs	r1, #80	; 0x50
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	f7ff fbec 	bl	8003ce8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2000      	movs	r0, #0
      break;
 8004512:	e005      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004514:	2b20      	cmp	r3, #32
 8004516:	d00e      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x6e>
 8004518:	d909      	bls.n	800452e <HAL_TIM_ConfigClockSource+0x66>
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d00b      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800451e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004520:	233d      	movs	r3, #61	; 0x3d
 8004522:	2201      	movs	r2, #1
 8004524:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8004526:	3b01      	subs	r3, #1
 8004528:	2200      	movs	r2, #0
 800452a:	54e2      	strb	r2, [r4, r3]
}
 800452c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x6e>
 8004532:	2b10      	cmp	r3, #16
 8004534:	d105      	bne.n	8004542 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004536:	0019      	movs	r1, r3
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	f7ff fbd5 	bl	8003ce8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2000      	movs	r0, #0
      break;
 8004540:	e7ee      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8004542:	2001      	movs	r0, #1
 8004544:	e7ec      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
 8004546:	2001      	movs	r0, #1
 8004548:	e7ea      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	0152      	lsls	r2, r2, #5
 800454e:	4293      	cmp	r3, r2
 8004550:	d036      	beq.n	80045c0 <HAL_TIM_ConfigClockSource+0xf8>
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	0192      	lsls	r2, r2, #6
 8004556:	4293      	cmp	r3, r2
 8004558:	d10d      	bne.n	8004576 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 800455a:	68cb      	ldr	r3, [r1, #12]
 800455c:	684a      	ldr	r2, [r1, #4]
 800455e:	6889      	ldr	r1, [r1, #8]
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	f7ff ffa5 	bl	80044b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	6891      	ldr	r1, [r2, #8]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	430b      	orrs	r3, r1
 8004570:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2000      	movs	r0, #0
      break;
 8004574:	e7d4      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8004576:	2b70      	cmp	r3, #112	; 0x70
 8004578:	d124      	bne.n	80045c4 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 800457a:	68cb      	ldr	r3, [r1, #12]
 800457c:	684a      	ldr	r2, [r1, #4]
 800457e:	6889      	ldr	r1, [r1, #8]
 8004580:	6820      	ldr	r0, [r4, #0]
 8004582:	f7ff ff95 	bl	80044b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800458a:	2177      	movs	r1, #119	; 0x77
 800458c:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800458e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2000      	movs	r0, #0
      break;
 8004592:	e7c5      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004594:	68ca      	ldr	r2, [r1, #12]
 8004596:	6849      	ldr	r1, [r1, #4]
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	f7ff fb51 	bl	8003c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800459e:	2160      	movs	r1, #96	; 0x60
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	f7ff fba1 	bl	8003ce8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2000      	movs	r0, #0
      break;
 80045a8:	e7ba      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	68ca      	ldr	r2, [r1, #12]
 80045ac:	6849      	ldr	r1, [r1, #4]
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	f7ff fb18 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b4:	2140      	movs	r1, #64	; 0x40
 80045b6:	6820      	ldr	r0, [r4, #0]
 80045b8:	f7ff fb96 	bl	8003ce8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045bc:	2000      	movs	r0, #0
      break;
 80045be:	e7af      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80045c0:	2000      	movs	r0, #0
 80045c2:	e7ad      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80045c4:	2001      	movs	r0, #1
 80045c6:	e7ab      	b.n	8004520 <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80045c8:	2002      	movs	r0, #2
 80045ca:	e7af      	b.n	800452c <HAL_TIM_ConfigClockSource+0x64>
 80045cc:	ffce0088 	.word	0xffce0088

080045d0 <TIM_SlaveTimer_SetConfig>:
{
 80045d0:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr = htim->Instance->SMCR;
 80045d2:	6802      	ldr	r2, [r0, #0]
 80045d4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045d6:	4c2d      	ldr	r4, [pc, #180]	; (800468c <TIM_SlaveTimer_SetConfig+0xbc>)
 80045d8:	4023      	ands	r3, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045da:	684c      	ldr	r4, [r1, #4]
 80045dc:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045de:	4c2c      	ldr	r4, [pc, #176]	; (8004690 <TIM_SlaveTimer_SetConfig+0xc0>)
 80045e0:	4023      	ands	r3, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045e2:	680c      	ldr	r4, [r1, #0]
 80045e4:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80045e6:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 80045e8:	684b      	ldr	r3, [r1, #4]
 80045ea:	2b50      	cmp	r3, #80	; 0x50
 80045ec:	d033      	beq.n	8004656 <TIM_SlaveTimer_SetConfig+0x86>
 80045ee:	d90b      	bls.n	8004608 <TIM_SlaveTimer_SetConfig+0x38>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d037      	beq.n	8004664 <TIM_SlaveTimer_SetConfig+0x94>
 80045f4:	2b70      	cmp	r3, #112	; 0x70
 80045f6:	d144      	bne.n	8004682 <TIM_SlaveTimer_SetConfig+0xb2>
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	690b      	ldr	r3, [r1, #16]
 80045fa:	688a      	ldr	r2, [r1, #8]
 80045fc:	68c9      	ldr	r1, [r1, #12]
 80045fe:	6800      	ldr	r0, [r0, #0]
 8004600:	f7ff ff56 	bl	80044b0 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004604:	2000      	movs	r0, #0
      break;
 8004606:	e010      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
  switch (sSlaveConfig->InputTrigger)
 8004608:	2b40      	cmp	r3, #64	; 0x40
 800460a:	d00f      	beq.n	800462c <TIM_SlaveTimer_SetConfig+0x5c>
 800460c:	d901      	bls.n	8004612 <TIM_SlaveTimer_SetConfig+0x42>
      status = HAL_ERROR;
 800460e:	2001      	movs	r0, #1
 8004610:	e00b      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
  switch (sSlaveConfig->InputTrigger)
 8004612:	2b20      	cmp	r3, #32
 8004614:	d02d      	beq.n	8004672 <TIM_SlaveTimer_SetConfig+0xa2>
 8004616:	d903      	bls.n	8004620 <TIM_SlaveTimer_SetConfig+0x50>
 8004618:	2b30      	cmp	r3, #48	; 0x30
 800461a:	d130      	bne.n	800467e <TIM_SlaveTimer_SetConfig+0xae>
 800461c:	2000      	movs	r0, #0
 800461e:	e004      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d028      	beq.n	8004676 <TIM_SlaveTimer_SetConfig+0xa6>
 8004624:	2b10      	cmp	r3, #16
 8004626:	d128      	bne.n	800467a <TIM_SlaveTimer_SetConfig+0xaa>
 8004628:	2000      	movs	r0, #0
}
 800462a:	bd70      	pop	{r4, r5, r6, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800462c:	680b      	ldr	r3, [r1, #0]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d029      	beq.n	8004686 <TIM_SlaveTimer_SetConfig+0xb6>
      tmpccer = htim->Instance->CCER;
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	6a1e      	ldr	r6, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	2401      	movs	r4, #1
 800463a:	43a2      	bics	r2, r4
 800463c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800463e:	6805      	ldr	r5, [r0, #0]
 8004640:	69ac      	ldr	r4, [r5, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004642:	22f0      	movs	r2, #240	; 0xf0
 8004644:	4394      	bics	r4, r2
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004646:	690b      	ldr	r3, [r1, #16]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	4323      	orrs	r3, r4
      htim->Instance->CCMR1 = tmpccmr1;
 800464c:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCER = tmpccer;
 800464e:	6803      	ldr	r3, [r0, #0]
 8004650:	621e      	str	r6, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2000      	movs	r0, #0
      break;
 8004654:	e7e9      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004656:	690a      	ldr	r2, [r1, #16]
 8004658:	6889      	ldr	r1, [r1, #8]
 800465a:	6800      	ldr	r0, [r0, #0]
 800465c:	f7ff fac2 	bl	8003be4 <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2000      	movs	r0, #0
      break;
 8004662:	e7e2      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004664:	690a      	ldr	r2, [r1, #16]
 8004666:	6889      	ldr	r1, [r1, #8]
 8004668:	6800      	ldr	r0, [r0, #0]
 800466a:	f7ff fae9 	bl	8003c40 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2000      	movs	r0, #0
      break;
 8004670:	e7db      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
  switch (sSlaveConfig->InputTrigger)
 8004672:	2000      	movs	r0, #0
 8004674:	e7d9      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
 8004676:	2000      	movs	r0, #0
 8004678:	e7d7      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
      status = HAL_ERROR;
 800467a:	2001      	movs	r0, #1
 800467c:	e7d5      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
 800467e:	2001      	movs	r0, #1
 8004680:	e7d3      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
 8004682:	2001      	movs	r0, #1
 8004684:	e7d1      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
        return HAL_ERROR;
 8004686:	2001      	movs	r0, #1
 8004688:	e7cf      	b.n	800462a <TIM_SlaveTimer_SetConfig+0x5a>
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	ffcfff8f 	.word	0xffcfff8f
 8004690:	fffefff8 	.word	0xfffefff8

08004694 <HAL_TIM_SlaveConfigSynchro>:
{
 8004694:	b510      	push	{r4, lr}
 8004696:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004698:	233c      	movs	r3, #60	; 0x3c
 800469a:	5cc3      	ldrb	r3, [r0, r3]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d022      	beq.n	80046e6 <HAL_TIM_SlaveConfigSynchro+0x52>
 80046a0:	233c      	movs	r3, #60	; 0x3c
 80046a2:	2201      	movs	r2, #1
 80046a4:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80046a6:	3301      	adds	r3, #1
 80046a8:	3201      	adds	r2, #1
 80046aa:	54c2      	strb	r2, [r0, r3]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80046ac:	f7ff ff90 	bl	80045d0 <TIM_SlaveTimer_SetConfig>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d110      	bne.n	80046d6 <HAL_TIM_SlaveConfigSynchro+0x42>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80046b4:	6822      	ldr	r2, [r4, #0]
 80046b6:	68d3      	ldr	r3, [r2, #12]
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	438b      	bics	r3, r1
 80046bc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	68d3      	ldr	r3, [r2, #12]
 80046c2:	490a      	ldr	r1, [pc, #40]	; (80046ec <HAL_TIM_SlaveConfigSynchro+0x58>)
 80046c4:	400b      	ands	r3, r1
 80046c6:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	233d      	movs	r3, #61	; 0x3d
 80046ca:	2201      	movs	r2, #1
 80046cc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2200      	movs	r2, #0
 80046d2:	54e2      	strb	r2, [r4, r3]
}
 80046d4:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80046d6:	233d      	movs	r3, #61	; 0x3d
 80046d8:	2201      	movs	r2, #1
 80046da:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(htim);
 80046dc:	3b01      	subs	r3, #1
 80046de:	2200      	movs	r2, #0
 80046e0:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80046e2:	2001      	movs	r0, #1
 80046e4:	e7f6      	b.n	80046d4 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 80046e6:	2002      	movs	r0, #2
 80046e8:	e7f4      	b.n	80046d4 <HAL_TIM_SlaveConfigSynchro+0x40>
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	ffffbfff 	.word	0xffffbfff

080046f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046f0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f2:	231f      	movs	r3, #31
 80046f4:	4019      	ands	r1, r3
 80046f6:	2401      	movs	r4, #1
 80046f8:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046fa:	6a03      	ldr	r3, [r0, #32]
 80046fc:	43a3      	bics	r3, r4
 80046fe:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004700:	6a03      	ldr	r3, [r0, #32]
 8004702:	408a      	lsls	r2, r1
 8004704:	4313      	orrs	r3, r2
 8004706:	6203      	str	r3, [r0, #32]
}
 8004708:	bd10      	pop	{r4, pc}
	...

0800470c <HAL_TIM_PWM_Start>:
{
 800470c:	b510      	push	{r4, lr}
 800470e:	0004      	movs	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004710:	2900      	cmp	r1, #0
 8004712:	d12c      	bne.n	800476e <HAL_TIM_PWM_Start+0x62>
 8004714:	233e      	movs	r3, #62	; 0x3e
 8004716:	5cc3      	ldrb	r3, [r0, r3]
 8004718:	3b01      	subs	r3, #1
 800471a:	1e5a      	subs	r2, r3, #1
 800471c:	4193      	sbcs	r3, r2
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d179      	bne.n	8004818 <HAL_TIM_PWM_Start+0x10c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004724:	2900      	cmp	r1, #0
 8004726:	d14d      	bne.n	80047c4 <HAL_TIM_PWM_Start+0xb8>
 8004728:	333e      	adds	r3, #62	; 0x3e
 800472a:	2202      	movs	r2, #2
 800472c:	54e2      	strb	r2, [r4, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800472e:	2201      	movs	r2, #1
 8004730:	6820      	ldr	r0, [r4, #0]
 8004732:	f7ff ffdd 	bl	80046f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <HAL_TIM_PWM_Start+0x118>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d005      	beq.n	800474a <HAL_TIM_PWM_Start+0x3e>
 800473e:	4a3a      	ldr	r2, [pc, #232]	; (8004828 <HAL_TIM_PWM_Start+0x11c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d002      	beq.n	800474a <HAL_TIM_PWM_Start+0x3e>
 8004744:	4a39      	ldr	r2, [pc, #228]	; (800482c <HAL_TIM_PWM_Start+0x120>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d104      	bne.n	8004754 <HAL_TIM_PWM_Start+0x48>
    __HAL_TIM_MOE_ENABLE(htim);
 800474a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	0212      	lsls	r2, r2, #8
 8004750:	430a      	orrs	r2, r1
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	4a33      	ldr	r2, [pc, #204]	; (8004824 <HAL_TIM_PWM_Start+0x118>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d04f      	beq.n	80047fc <HAL_TIM_PWM_Start+0xf0>
 800475c:	4a34      	ldr	r2, [pc, #208]	; (8004830 <HAL_TIM_PWM_Start+0x124>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04c      	beq.n	80047fc <HAL_TIM_PWM_Start+0xf0>
    __HAL_TIM_ENABLE(htim);
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800476a:	2000      	movs	r0, #0
 800476c:	e055      	b.n	800481a <HAL_TIM_PWM_Start+0x10e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800476e:	2904      	cmp	r1, #4
 8004770:	d00c      	beq.n	800478c <HAL_TIM_PWM_Start+0x80>
 8004772:	2908      	cmp	r1, #8
 8004774:	d011      	beq.n	800479a <HAL_TIM_PWM_Start+0x8e>
 8004776:	290c      	cmp	r1, #12
 8004778:	d016      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x9c>
 800477a:	2910      	cmp	r1, #16
 800477c:	d01b      	beq.n	80047b6 <HAL_TIM_PWM_Start+0xaa>
 800477e:	2343      	movs	r3, #67	; 0x43
 8004780:	5cc3      	ldrb	r3, [r0, r3]
 8004782:	3b01      	subs	r3, #1
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	4193      	sbcs	r3, r2
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e7c9      	b.n	8004720 <HAL_TIM_PWM_Start+0x14>
 800478c:	233f      	movs	r3, #63	; 0x3f
 800478e:	5cc3      	ldrb	r3, [r0, r3]
 8004790:	3b01      	subs	r3, #1
 8004792:	1e5a      	subs	r2, r3, #1
 8004794:	4193      	sbcs	r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e7c2      	b.n	8004720 <HAL_TIM_PWM_Start+0x14>
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	5cc3      	ldrb	r3, [r0, r3]
 800479e:	3b01      	subs	r3, #1
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	4193      	sbcs	r3, r2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e7bb      	b.n	8004720 <HAL_TIM_PWM_Start+0x14>
 80047a8:	2341      	movs	r3, #65	; 0x41
 80047aa:	5cc3      	ldrb	r3, [r0, r3]
 80047ac:	3b01      	subs	r3, #1
 80047ae:	1e5a      	subs	r2, r3, #1
 80047b0:	4193      	sbcs	r3, r2
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e7b4      	b.n	8004720 <HAL_TIM_PWM_Start+0x14>
 80047b6:	2342      	movs	r3, #66	; 0x42
 80047b8:	5cc3      	ldrb	r3, [r0, r3]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	4193      	sbcs	r3, r2
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e7ad      	b.n	8004720 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c4:	2904      	cmp	r1, #4
 80047c6:	d009      	beq.n	80047dc <HAL_TIM_PWM_Start+0xd0>
 80047c8:	2908      	cmp	r1, #8
 80047ca:	d00b      	beq.n	80047e4 <HAL_TIM_PWM_Start+0xd8>
 80047cc:	290c      	cmp	r1, #12
 80047ce:	d00d      	beq.n	80047ec <HAL_TIM_PWM_Start+0xe0>
 80047d0:	2910      	cmp	r1, #16
 80047d2:	d00f      	beq.n	80047f4 <HAL_TIM_PWM_Start+0xe8>
 80047d4:	2343      	movs	r3, #67	; 0x43
 80047d6:	2202      	movs	r2, #2
 80047d8:	54e2      	strb	r2, [r4, r3]
 80047da:	e7a8      	b.n	800472e <HAL_TIM_PWM_Start+0x22>
 80047dc:	233f      	movs	r3, #63	; 0x3f
 80047de:	2202      	movs	r2, #2
 80047e0:	54e2      	strb	r2, [r4, r3]
 80047e2:	e7a4      	b.n	800472e <HAL_TIM_PWM_Start+0x22>
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	2202      	movs	r2, #2
 80047e8:	54e2      	strb	r2, [r4, r3]
 80047ea:	e7a0      	b.n	800472e <HAL_TIM_PWM_Start+0x22>
 80047ec:	2341      	movs	r3, #65	; 0x41
 80047ee:	2202      	movs	r2, #2
 80047f0:	54e2      	strb	r2, [r4, r3]
 80047f2:	e79c      	b.n	800472e <HAL_TIM_PWM_Start+0x22>
 80047f4:	2342      	movs	r3, #66	; 0x42
 80047f6:	2202      	movs	r2, #2
 80047f8:	54e2      	strb	r2, [r4, r3]
 80047fa:	e798      	b.n	800472e <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	490d      	ldr	r1, [pc, #52]	; (8004834 <HAL_TIM_PWM_Start+0x128>)
 8004800:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004802:	2a06      	cmp	r2, #6
 8004804:	d00a      	beq.n	800481c <HAL_TIM_PWM_Start+0x110>
 8004806:	3907      	subs	r1, #7
 8004808:	428a      	cmp	r2, r1
 800480a:	d009      	beq.n	8004820 <HAL_TIM_PWM_Start+0x114>
      __HAL_TIM_ENABLE(htim);
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004814:	2000      	movs	r0, #0
 8004816:	e000      	b.n	800481a <HAL_TIM_PWM_Start+0x10e>
    return HAL_ERROR;
 8004818:	2001      	movs	r0, #1
}
 800481a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800481c:	2000      	movs	r0, #0
 800481e:	e7fc      	b.n	800481a <HAL_TIM_PWM_Start+0x10e>
 8004820:	2000      	movs	r0, #0
 8004822:	e7fa      	b.n	800481a <HAL_TIM_PWM_Start+0x10e>
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800
 8004830:	40000400 	.word	0x40000400
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_PWM_Stop>:
{
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	0004      	movs	r4, r0
 800483c:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800483e:	2200      	movs	r2, #0
 8004840:	6800      	ldr	r0, [r0, #0]
 8004842:	f7ff ff55 	bl	80046f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	4a22      	ldr	r2, [pc, #136]	; (80048d4 <HAL_TIM_PWM_Stop+0x9c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d019      	beq.n	8004882 <HAL_TIM_PWM_Stop+0x4a>
 800484e:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_TIM_PWM_Stop+0xa0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d016      	beq.n	8004882 <HAL_TIM_PWM_Stop+0x4a>
 8004854:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_TIM_PWM_Stop+0xa4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	6a19      	ldr	r1, [r3, #32]
 800485e:	4a20      	ldr	r2, [pc, #128]	; (80048e0 <HAL_TIM_PWM_Stop+0xa8>)
 8004860:	4211      	tst	r1, r2
 8004862:	d107      	bne.n	8004874 <HAL_TIM_PWM_Stop+0x3c>
 8004864:	6a19      	ldr	r1, [r3, #32]
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_TIM_PWM_Stop+0xac>)
 8004868:	4211      	tst	r1, r2
 800486a:	d103      	bne.n	8004874 <HAL_TIM_PWM_Stop+0x3c>
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	2d00      	cmp	r5, #0
 8004876:	d111      	bne.n	800489c <HAL_TIM_PWM_Stop+0x64>
 8004878:	233e      	movs	r3, #62	; 0x3e
 800487a:	2201      	movs	r2, #1
 800487c:	54e2      	strb	r2, [r4, r3]
}
 800487e:	2000      	movs	r0, #0
 8004880:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004882:	6a19      	ldr	r1, [r3, #32]
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <HAL_TIM_PWM_Stop+0xa8>)
 8004886:	4211      	tst	r1, r2
 8004888:	d1e7      	bne.n	800485a <HAL_TIM_PWM_Stop+0x22>
 800488a:	6a19      	ldr	r1, [r3, #32]
 800488c:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <HAL_TIM_PWM_Stop+0xac>)
 800488e:	4211      	tst	r1, r2
 8004890:	d1e3      	bne.n	800485a <HAL_TIM_PWM_Stop+0x22>
 8004892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004894:	4914      	ldr	r1, [pc, #80]	; (80048e8 <HAL_TIM_PWM_Stop+0xb0>)
 8004896:	400a      	ands	r2, r1
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
 800489a:	e7de      	b.n	800485a <HAL_TIM_PWM_Stop+0x22>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	2d04      	cmp	r5, #4
 800489e:	d009      	beq.n	80048b4 <HAL_TIM_PWM_Stop+0x7c>
 80048a0:	2d08      	cmp	r5, #8
 80048a2:	d00b      	beq.n	80048bc <HAL_TIM_PWM_Stop+0x84>
 80048a4:	2d0c      	cmp	r5, #12
 80048a6:	d00d      	beq.n	80048c4 <HAL_TIM_PWM_Stop+0x8c>
 80048a8:	2d10      	cmp	r5, #16
 80048aa:	d00f      	beq.n	80048cc <HAL_TIM_PWM_Stop+0x94>
 80048ac:	2343      	movs	r3, #67	; 0x43
 80048ae:	2201      	movs	r2, #1
 80048b0:	54e2      	strb	r2, [r4, r3]
 80048b2:	e7e4      	b.n	800487e <HAL_TIM_PWM_Stop+0x46>
 80048b4:	233f      	movs	r3, #63	; 0x3f
 80048b6:	2201      	movs	r2, #1
 80048b8:	54e2      	strb	r2, [r4, r3]
 80048ba:	e7e0      	b.n	800487e <HAL_TIM_PWM_Stop+0x46>
 80048bc:	2340      	movs	r3, #64	; 0x40
 80048be:	2201      	movs	r2, #1
 80048c0:	54e2      	strb	r2, [r4, r3]
 80048c2:	e7dc      	b.n	800487e <HAL_TIM_PWM_Stop+0x46>
 80048c4:	2341      	movs	r3, #65	; 0x41
 80048c6:	2201      	movs	r2, #1
 80048c8:	54e2      	strb	r2, [r4, r3]
 80048ca:	e7d8      	b.n	800487e <HAL_TIM_PWM_Stop+0x46>
 80048cc:	2342      	movs	r3, #66	; 0x42
 80048ce:	2201      	movs	r2, #1
 80048d0:	54e2      	strb	r2, [r4, r3]
 80048d2:	e7d4      	b.n	800487e <HAL_TIM_PWM_Stop+0x46>
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800
 80048e0:	00001111 	.word	0x00001111
 80048e4:	00000444 	.word	0x00000444
 80048e8:	ffff7fff 	.word	0xffff7fff

080048ec <HAL_TIM_IC_Start_DMA>:
{
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b083      	sub	sp, #12
 80048f0:	0007      	movs	r7, r0
 80048f2:	000c      	movs	r4, r1
 80048f4:	0015      	movs	r5, r2
 80048f6:	9301      	str	r3, [sp, #4]
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d14c      	bne.n	8004996 <HAL_TIM_IC_Start_DMA+0xaa>
 80048fc:	233e      	movs	r3, #62	; 0x3e
 80048fe:	5cc0      	ldrb	r0, [r0, r3]
 8004900:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004902:	2c00      	cmp	r4, #0
 8004904:	d163      	bne.n	80049ce <HAL_TIM_IC_Start_DMA+0xe2>
 8004906:	2344      	movs	r3, #68	; 0x44
 8004908:	5cfe      	ldrb	r6, [r7, r3]
 800490a:	b2f6      	uxtb	r6, r6
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800490c:	2802      	cmp	r0, #2
 800490e:	d100      	bne.n	8004912 <HAL_TIM_IC_Start_DMA+0x26>
 8004910:	e105      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004912:	2e02      	cmp	r6, #2
 8004914:	d100      	bne.n	8004918 <HAL_TIM_IC_Start_DMA+0x2c>
 8004916:	e0ff      	b.n	8004b18 <HAL_TIM_IC_Start_DMA+0x22c>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004918:	2801      	cmp	r0, #1
 800491a:	d000      	beq.n	800491e <HAL_TIM_IC_Start_DMA+0x32>
 800491c:	e0fe      	b.n	8004b1c <HAL_TIM_IC_Start_DMA+0x230>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800491e:	2e01      	cmp	r6, #1
 8004920:	d000      	beq.n	8004924 <HAL_TIM_IC_Start_DMA+0x38>
 8004922:	e0fc      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
    if ((pData == NULL) || (Length == 0U))
 8004924:	2d00      	cmp	r5, #0
 8004926:	d100      	bne.n	800492a <HAL_TIM_IC_Start_DMA+0x3e>
 8004928:	e0fb      	b.n	8004b22 <HAL_TIM_IC_Start_DMA+0x236>
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d100      	bne.n	8004932 <HAL_TIM_IC_Start_DMA+0x46>
 8004930:	e0f9      	b.n	8004b26 <HAL_TIM_IC_Start_DMA+0x23a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004932:	2c00      	cmp	r4, #0
 8004934:	d15b      	bne.n	80049ee <HAL_TIM_IC_Start_DMA+0x102>
 8004936:	233e      	movs	r3, #62	; 0x3e
 8004938:	2202      	movs	r2, #2
 800493a:	54fa      	strb	r2, [r7, r3]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493c:	2c00      	cmp	r4, #0
 800493e:	d172      	bne.n	8004a26 <HAL_TIM_IC_Start_DMA+0x13a>
 8004940:	2344      	movs	r3, #68	; 0x44
 8004942:	2202      	movs	r2, #2
 8004944:	54fa      	strb	r2, [r7, r3]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004946:	2201      	movs	r2, #1
 8004948:	0021      	movs	r1, r4
 800494a:	6838      	ldr	r0, [r7, #0]
 800494c:	f7ff fed0 	bl	80046f0 <TIM_CCxChannelCmd>
  switch (Channel)
 8004950:	2c08      	cmp	r4, #8
 8004952:	d100      	bne.n	8004956 <HAL_TIM_IC_Start_DMA+0x6a>
 8004954:	e0ba      	b.n	8004acc <HAL_TIM_IC_Start_DMA+0x1e0>
 8004956:	d878      	bhi.n	8004a4a <HAL_TIM_IC_Start_DMA+0x15e>
 8004958:	2c00      	cmp	r4, #0
 800495a:	d100      	bne.n	800495e <HAL_TIM_IC_Start_DMA+0x72>
 800495c:	e09d      	b.n	8004a9a <HAL_TIM_IC_Start_DMA+0x1ae>
 800495e:	2c04      	cmp	r4, #4
 8004960:	d171      	bne.n	8004a46 <HAL_TIM_IC_Start_DMA+0x15a>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_TIM_IC_Start_DMA+0x250>)
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	4a75      	ldr	r2, [pc, #468]	; (8004b40 <HAL_TIM_IC_Start_DMA+0x254>)
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	4a74      	ldr	r2, [pc, #464]	; (8004b44 <HAL_TIM_IC_Start_DMA+0x258>)
 8004972:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	3138      	adds	r1, #56	; 0x38
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	002a      	movs	r2, r5
 800497c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497e:	f7fd fb43 	bl	8002008 <HAL_DMA_Start_IT>
 8004982:	2800      	cmp	r0, #0
 8004984:	d000      	beq.n	8004988 <HAL_TIM_IC_Start_DMA+0x9c>
 8004986:	e0d2      	b.n	8004b2e <HAL_TIM_IC_Start_DMA+0x242>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	68d1      	ldr	r1, [r2, #12]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	430b      	orrs	r3, r1
 8004992:	60d3      	str	r3, [r2, #12]
      break;
 8004994:	e075      	b.n	8004a82 <HAL_TIM_IC_Start_DMA+0x196>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004996:	2904      	cmp	r1, #4
 8004998:	d009      	beq.n	80049ae <HAL_TIM_IC_Start_DMA+0xc2>
 800499a:	2908      	cmp	r1, #8
 800499c:	d00b      	beq.n	80049b6 <HAL_TIM_IC_Start_DMA+0xca>
 800499e:	290c      	cmp	r1, #12
 80049a0:	d00d      	beq.n	80049be <HAL_TIM_IC_Start_DMA+0xd2>
 80049a2:	2910      	cmp	r1, #16
 80049a4:	d00f      	beq.n	80049c6 <HAL_TIM_IC_Start_DMA+0xda>
 80049a6:	2343      	movs	r3, #67	; 0x43
 80049a8:	5cc0      	ldrb	r0, [r0, r3]
 80049aa:	b2c0      	uxtb	r0, r0
 80049ac:	e7a9      	b.n	8004902 <HAL_TIM_IC_Start_DMA+0x16>
 80049ae:	233f      	movs	r3, #63	; 0x3f
 80049b0:	5cc0      	ldrb	r0, [r0, r3]
 80049b2:	b2c0      	uxtb	r0, r0
 80049b4:	e7a5      	b.n	8004902 <HAL_TIM_IC_Start_DMA+0x16>
 80049b6:	2340      	movs	r3, #64	; 0x40
 80049b8:	5cc0      	ldrb	r0, [r0, r3]
 80049ba:	b2c0      	uxtb	r0, r0
 80049bc:	e7a1      	b.n	8004902 <HAL_TIM_IC_Start_DMA+0x16>
 80049be:	2341      	movs	r3, #65	; 0x41
 80049c0:	5cc0      	ldrb	r0, [r0, r3]
 80049c2:	b2c0      	uxtb	r0, r0
 80049c4:	e79d      	b.n	8004902 <HAL_TIM_IC_Start_DMA+0x16>
 80049c6:	2342      	movs	r3, #66	; 0x42
 80049c8:	5cc0      	ldrb	r0, [r0, r3]
 80049ca:	b2c0      	uxtb	r0, r0
 80049cc:	e799      	b.n	8004902 <HAL_TIM_IC_Start_DMA+0x16>
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80049ce:	2c04      	cmp	r4, #4
 80049d0:	d005      	beq.n	80049de <HAL_TIM_IC_Start_DMA+0xf2>
 80049d2:	2c08      	cmp	r4, #8
 80049d4:	d007      	beq.n	80049e6 <HAL_TIM_IC_Start_DMA+0xfa>
 80049d6:	2347      	movs	r3, #71	; 0x47
 80049d8:	5cfe      	ldrb	r6, [r7, r3]
 80049da:	b2f6      	uxtb	r6, r6
 80049dc:	e796      	b.n	800490c <HAL_TIM_IC_Start_DMA+0x20>
 80049de:	2345      	movs	r3, #69	; 0x45
 80049e0:	5cfe      	ldrb	r6, [r7, r3]
 80049e2:	b2f6      	uxtb	r6, r6
 80049e4:	e792      	b.n	800490c <HAL_TIM_IC_Start_DMA+0x20>
 80049e6:	2346      	movs	r3, #70	; 0x46
 80049e8:	5cfe      	ldrb	r6, [r7, r3]
 80049ea:	b2f6      	uxtb	r6, r6
 80049ec:	e78e      	b.n	800490c <HAL_TIM_IC_Start_DMA+0x20>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ee:	2c04      	cmp	r4, #4
 80049f0:	d009      	beq.n	8004a06 <HAL_TIM_IC_Start_DMA+0x11a>
 80049f2:	2c08      	cmp	r4, #8
 80049f4:	d00b      	beq.n	8004a0e <HAL_TIM_IC_Start_DMA+0x122>
 80049f6:	2c0c      	cmp	r4, #12
 80049f8:	d00d      	beq.n	8004a16 <HAL_TIM_IC_Start_DMA+0x12a>
 80049fa:	2c10      	cmp	r4, #16
 80049fc:	d00f      	beq.n	8004a1e <HAL_TIM_IC_Start_DMA+0x132>
 80049fe:	2343      	movs	r3, #67	; 0x43
 8004a00:	2202      	movs	r2, #2
 8004a02:	54fa      	strb	r2, [r7, r3]
 8004a04:	e79a      	b.n	800493c <HAL_TIM_IC_Start_DMA+0x50>
 8004a06:	233f      	movs	r3, #63	; 0x3f
 8004a08:	2202      	movs	r2, #2
 8004a0a:	54fa      	strb	r2, [r7, r3]
 8004a0c:	e796      	b.n	800493c <HAL_TIM_IC_Start_DMA+0x50>
 8004a0e:	2340      	movs	r3, #64	; 0x40
 8004a10:	2202      	movs	r2, #2
 8004a12:	54fa      	strb	r2, [r7, r3]
 8004a14:	e792      	b.n	800493c <HAL_TIM_IC_Start_DMA+0x50>
 8004a16:	2341      	movs	r3, #65	; 0x41
 8004a18:	2202      	movs	r2, #2
 8004a1a:	54fa      	strb	r2, [r7, r3]
 8004a1c:	e78e      	b.n	800493c <HAL_TIM_IC_Start_DMA+0x50>
 8004a1e:	2342      	movs	r3, #66	; 0x42
 8004a20:	2202      	movs	r2, #2
 8004a22:	54fa      	strb	r2, [r7, r3]
 8004a24:	e78a      	b.n	800493c <HAL_TIM_IC_Start_DMA+0x50>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	2c04      	cmp	r4, #4
 8004a28:	d005      	beq.n	8004a36 <HAL_TIM_IC_Start_DMA+0x14a>
 8004a2a:	2c08      	cmp	r4, #8
 8004a2c:	d007      	beq.n	8004a3e <HAL_TIM_IC_Start_DMA+0x152>
 8004a2e:	2347      	movs	r3, #71	; 0x47
 8004a30:	2202      	movs	r2, #2
 8004a32:	54fa      	strb	r2, [r7, r3]
 8004a34:	e787      	b.n	8004946 <HAL_TIM_IC_Start_DMA+0x5a>
 8004a36:	2345      	movs	r3, #69	; 0x45
 8004a38:	2202      	movs	r2, #2
 8004a3a:	54fa      	strb	r2, [r7, r3]
 8004a3c:	e783      	b.n	8004946 <HAL_TIM_IC_Start_DMA+0x5a>
 8004a3e:	2346      	movs	r3, #70	; 0x46
 8004a40:	2202      	movs	r2, #2
 8004a42:	54fa      	strb	r2, [r7, r3]
 8004a44:	e77f      	b.n	8004946 <HAL_TIM_IC_Start_DMA+0x5a>
  switch (Channel)
 8004a46:	0030      	movs	r0, r6
 8004a48:	e01b      	b.n	8004a82 <HAL_TIM_IC_Start_DMA+0x196>
 8004a4a:	2c0c      	cmp	r4, #12
 8004a4c:	d118      	bne.n	8004a80 <HAL_TIM_IC_Start_DMA+0x194>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	4a3a      	ldr	r2, [pc, #232]	; (8004b3c <HAL_TIM_IC_Start_DMA+0x250>)
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	4a3a      	ldr	r2, [pc, #232]	; (8004b40 <HAL_TIM_IC_Start_DMA+0x254>)
 8004a58:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	4a39      	ldr	r2, [pc, #228]	; (8004b44 <HAL_TIM_IC_Start_DMA+0x258>)
 8004a5e:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	3140      	adds	r1, #64	; 0x40
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	002a      	movs	r2, r5
 8004a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6a:	f7fd facd 	bl	8002008 <HAL_DMA_Start_IT>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d161      	bne.n	8004b36 <HAL_TIM_IC_Start_DMA+0x24a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68d1      	ldr	r1, [r2, #12]
 8004a76:	2380      	movs	r3, #128	; 0x80
 8004a78:	015b      	lsls	r3, r3, #5
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	60d3      	str	r3, [r2, #12]
      break;
 8004a7e:	e000      	b.n	8004a82 <HAL_TIM_IC_Start_DMA+0x196>
  switch (Channel)
 8004a80:	0030      	movs	r0, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	4a30      	ldr	r2, [pc, #192]	; (8004b48 <HAL_TIM_IC_Start_DMA+0x25c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d039      	beq.n	8004afe <HAL_TIM_IC_Start_DMA+0x212>
 8004a8a:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_TIM_IC_Start_DMA+0x260>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d036      	beq.n	8004afe <HAL_TIM_IC_Start_DMA+0x212>
    __HAL_TIM_ENABLE(htim);
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2101      	movs	r1, #1
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <HAL_TIM_IC_Start_DMA+0x250>)
 8004a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <HAL_TIM_IC_Start_DMA+0x254>)
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	4a26      	ldr	r2, [pc, #152]	; (8004b44 <HAL_TIM_IC_Start_DMA+0x258>)
 8004aaa:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	3134      	adds	r1, #52	; 0x34
 8004ab0:	9b01      	ldr	r3, [sp, #4]
 8004ab2:	002a      	movs	r2, r5
 8004ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab6:	f7fd faa7 	bl	8002008 <HAL_DMA_Start_IT>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d135      	bne.n	8004b2a <HAL_TIM_IC_Start_DMA+0x23e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	68d1      	ldr	r1, [r2, #12]
 8004ac2:	2380      	movs	r3, #128	; 0x80
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	60d3      	str	r3, [r2, #12]
      break;
 8004aca:	e7da      	b.n	8004a82 <HAL_TIM_IC_Start_DMA+0x196>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	4a1b      	ldr	r2, [pc, #108]	; (8004b3c <HAL_TIM_IC_Start_DMA+0x250>)
 8004ad0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <HAL_TIM_IC_Start_DMA+0x254>)
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	4a1a      	ldr	r2, [pc, #104]	; (8004b44 <HAL_TIM_IC_Start_DMA+0x258>)
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8004ade:	6839      	ldr	r1, [r7, #0]
 8004ae0:	313c      	adds	r1, #60	; 0x3c
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	002a      	movs	r2, r5
 8004ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ae8:	f7fd fa8e 	bl	8002008 <HAL_DMA_Start_IT>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d120      	bne.n	8004b32 <HAL_TIM_IC_Start_DMA+0x246>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	68d1      	ldr	r1, [r2, #12]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	430b      	orrs	r3, r1
 8004afa:	60d3      	str	r3, [r2, #12]
      break;
 8004afc:	e7c1      	b.n	8004a82 <HAL_TIM_IC_Start_DMA+0x196>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	4913      	ldr	r1, [pc, #76]	; (8004b50 <HAL_TIM_IC_Start_DMA+0x264>)
 8004b02:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	2a06      	cmp	r2, #6
 8004b06:	d00a      	beq.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
 8004b08:	3907      	subs	r1, #7
 8004b0a:	428a      	cmp	r2, r1
 8004b0c:	d007      	beq.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
      __HAL_TIM_ENABLE(htim);
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	2101      	movs	r1, #1
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
    return HAL_BUSY;
 8004b18:	0030      	movs	r0, r6
 8004b1a:	e000      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
    return HAL_ERROR;
 8004b1c:	2001      	movs	r0, #1
}
 8004b1e:	b003      	add	sp, #12
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004b22:	0030      	movs	r0, r6
 8004b24:	e7fb      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
 8004b26:	0030      	movs	r0, r6
 8004b28:	e7f9      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
        return HAL_ERROR;
 8004b2a:	0030      	movs	r0, r6
 8004b2c:	e7f7      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
        return HAL_ERROR;
 8004b2e:	0030      	movs	r0, r6
 8004b30:	e7f5      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
        return HAL_ERROR;
 8004b32:	0030      	movs	r0, r6
 8004b34:	e7f3      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
        return HAL_ERROR;
 8004b36:	0030      	movs	r0, r6
 8004b38:	e7f1      	b.n	8004b1e <HAL_TIM_IC_Start_DMA+0x232>
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	08003d97 	.word	0x08003d97
 8004b40:	08003e17 	.word	0x08003e17
 8004b44:	08003fd3 	.word	0x08003fd3
 8004b48:	40012c00 	.word	0x40012c00
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	00010007 	.word	0x00010007

08004b54 <HAL_TIM_IC_Stop_DMA>:
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	0005      	movs	r5, r0
 8004b58:	000c      	movs	r4, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	6800      	ldr	r0, [r0, #0]
 8004b5e:	f7ff fdc7 	bl	80046f0 <TIM_CCxChannelCmd>
  switch (Channel)
 8004b62:	2c08      	cmp	r4, #8
 8004b64:	d03d      	beq.n	8004be2 <HAL_TIM_IC_Stop_DMA+0x8e>
 8004b66:	d80e      	bhi.n	8004b86 <HAL_TIM_IC_Stop_DMA+0x32>
 8004b68:	2c00      	cmp	r4, #0
 8004b6a:	d019      	beq.n	8004ba0 <HAL_TIM_IC_Stop_DMA+0x4c>
 8004b6c:	2c04      	cmp	r4, #4
 8004b6e:	d108      	bne.n	8004b82 <HAL_TIM_IC_Stop_DMA+0x2e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b70:	682a      	ldr	r2, [r5, #0]
 8004b72:	68d3      	ldr	r3, [r2, #12]
 8004b74:	4937      	ldr	r1, [pc, #220]	; (8004c54 <HAL_TIM_IC_Stop_DMA+0x100>)
 8004b76:	400b      	ands	r3, r1
 8004b78:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004b7c:	f7fd fa92 	bl	80020a4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8004b80:	e016      	b.n	8004bb0 <HAL_TIM_IC_Stop_DMA+0x5c>
  switch (Channel)
 8004b82:	2001      	movs	r0, #1
 8004b84:	e02c      	b.n	8004be0 <HAL_TIM_IC_Stop_DMA+0x8c>
 8004b86:	2c0c      	cmp	r4, #12
 8004b88:	d108      	bne.n	8004b9c <HAL_TIM_IC_Stop_DMA+0x48>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b8a:	682a      	ldr	r2, [r5, #0]
 8004b8c:	68d3      	ldr	r3, [r2, #12]
 8004b8e:	4932      	ldr	r1, [pc, #200]	; (8004c58 <HAL_TIM_IC_Stop_DMA+0x104>)
 8004b90:	400b      	ands	r3, r1
 8004b92:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004b94:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004b96:	f7fd fa85 	bl	80020a4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8004b9a:	e009      	b.n	8004bb0 <HAL_TIM_IC_Stop_DMA+0x5c>
  switch (Channel)
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e01f      	b.n	8004be0 <HAL_TIM_IC_Stop_DMA+0x8c>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004ba0:	682a      	ldr	r2, [r5, #0]
 8004ba2:	68d3      	ldr	r3, [r2, #12]
 8004ba4:	492d      	ldr	r1, [pc, #180]	; (8004c5c <HAL_TIM_IC_Stop_DMA+0x108>)
 8004ba6:	400b      	ands	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004baa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004bac:	f7fd fa7a 	bl	80020a4 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	6a19      	ldr	r1, [r3, #32]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <HAL_TIM_IC_Stop_DMA+0x10c>)
 8004bb6:	4211      	tst	r1, r2
 8004bb8:	d107      	bne.n	8004bca <HAL_TIM_IC_Stop_DMA+0x76>
 8004bba:	6a19      	ldr	r1, [r3, #32]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <HAL_TIM_IC_Stop_DMA+0x110>)
 8004bbe:	4211      	tst	r1, r2
 8004bc0:	d103      	bne.n	8004bca <HAL_TIM_IC_Stop_DMA+0x76>
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	438a      	bics	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	2c00      	cmp	r4, #0
 8004bcc:	d112      	bne.n	8004bf4 <HAL_TIM_IC_Stop_DMA+0xa0>
 8004bce:	233e      	movs	r3, #62	; 0x3e
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	54ea      	strb	r2, [r5, r3]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	2c00      	cmp	r4, #0
 8004bd6:	d129      	bne.n	8004c2c <HAL_TIM_IC_Stop_DMA+0xd8>
 8004bd8:	2344      	movs	r3, #68	; 0x44
 8004bda:	2201      	movs	r2, #1
 8004bdc:	54ea      	strb	r2, [r5, r3]
 8004bde:	2000      	movs	r0, #0
}
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004be2:	682a      	ldr	r2, [r5, #0]
 8004be4:	68d3      	ldr	r3, [r2, #12]
 8004be6:	4920      	ldr	r1, [pc, #128]	; (8004c68 <HAL_TIM_IC_Stop_DMA+0x114>)
 8004be8:	400b      	ands	r3, r1
 8004bea:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004bec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004bee:	f7fd fa59 	bl	80020a4 <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8004bf2:	e7dd      	b.n	8004bb0 <HAL_TIM_IC_Stop_DMA+0x5c>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	2c04      	cmp	r4, #4
 8004bf6:	d009      	beq.n	8004c0c <HAL_TIM_IC_Stop_DMA+0xb8>
 8004bf8:	2c08      	cmp	r4, #8
 8004bfa:	d00b      	beq.n	8004c14 <HAL_TIM_IC_Stop_DMA+0xc0>
 8004bfc:	2c0c      	cmp	r4, #12
 8004bfe:	d00d      	beq.n	8004c1c <HAL_TIM_IC_Stop_DMA+0xc8>
 8004c00:	2c10      	cmp	r4, #16
 8004c02:	d00f      	beq.n	8004c24 <HAL_TIM_IC_Stop_DMA+0xd0>
 8004c04:	2343      	movs	r3, #67	; 0x43
 8004c06:	2201      	movs	r2, #1
 8004c08:	54ea      	strb	r2, [r5, r3]
 8004c0a:	e7e3      	b.n	8004bd4 <HAL_TIM_IC_Stop_DMA+0x80>
 8004c0c:	233f      	movs	r3, #63	; 0x3f
 8004c0e:	2201      	movs	r2, #1
 8004c10:	54ea      	strb	r2, [r5, r3]
 8004c12:	e7df      	b.n	8004bd4 <HAL_TIM_IC_Stop_DMA+0x80>
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	2201      	movs	r2, #1
 8004c18:	54ea      	strb	r2, [r5, r3]
 8004c1a:	e7db      	b.n	8004bd4 <HAL_TIM_IC_Stop_DMA+0x80>
 8004c1c:	2341      	movs	r3, #65	; 0x41
 8004c1e:	2201      	movs	r2, #1
 8004c20:	54ea      	strb	r2, [r5, r3]
 8004c22:	e7d7      	b.n	8004bd4 <HAL_TIM_IC_Stop_DMA+0x80>
 8004c24:	2342      	movs	r3, #66	; 0x42
 8004c26:	2201      	movs	r2, #1
 8004c28:	54ea      	strb	r2, [r5, r3]
 8004c2a:	e7d3      	b.n	8004bd4 <HAL_TIM_IC_Stop_DMA+0x80>
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c2c:	2c04      	cmp	r4, #4
 8004c2e:	d006      	beq.n	8004c3e <HAL_TIM_IC_Stop_DMA+0xea>
 8004c30:	2c08      	cmp	r4, #8
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_IC_Stop_DMA+0xf4>
 8004c34:	2347      	movs	r3, #71	; 0x47
 8004c36:	2201      	movs	r2, #1
 8004c38:	54ea      	strb	r2, [r5, r3]
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e7d0      	b.n	8004be0 <HAL_TIM_IC_Stop_DMA+0x8c>
 8004c3e:	2345      	movs	r3, #69	; 0x45
 8004c40:	2201      	movs	r2, #1
 8004c42:	54ea      	strb	r2, [r5, r3]
 8004c44:	2000      	movs	r0, #0
 8004c46:	e7cb      	b.n	8004be0 <HAL_TIM_IC_Stop_DMA+0x8c>
 8004c48:	2346      	movs	r3, #70	; 0x46
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	54ea      	strb	r2, [r5, r3]
 8004c4e:	2000      	movs	r0, #0
 8004c50:	e7c6      	b.n	8004be0 <HAL_TIM_IC_Stop_DMA+0x8c>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	fffffbff 	.word	0xfffffbff
 8004c58:	ffffefff 	.word	0xffffefff
 8004c5c:	fffffdff 	.word	0xfffffdff
 8004c60:	00001111 	.word	0x00001111
 8004c64:	00000444 	.word	0x00000444
 8004c68:	fffff7ff 	.word	0xfffff7ff

08004c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c6c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6e:	233c      	movs	r3, #60	; 0x3c
 8004c70:	5cc3      	ldrb	r3, [r0, r3]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d029      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004c76:	233c      	movs	r3, #60	; 0x3c
 8004c78:	2201      	movs	r2, #1
 8004c7a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	3201      	adds	r2, #1
 8004c80:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c82:	6802      	ldr	r2, [r0, #0]
 8004c84:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c86:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c88:	4d11      	ldr	r5, [pc, #68]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004c8a:	42aa      	cmp	r2, r5
 8004c8c:	d018      	beq.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c8e:	2570      	movs	r5, #112	; 0x70
 8004c90:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c92:	680d      	ldr	r5, [r1, #0]
 8004c94:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c96:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	6803      	ldr	r3, [r0, #0]
 8004c9a:	4a0d      	ldr	r2, [pc, #52]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d002      	beq.n	8004ca6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d104      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004caa:	688a      	ldr	r2, [r1, #8]
 8004cac:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cae:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	233d      	movs	r3, #61	; 0x3d
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	2200      	movs	r2, #0
 8004cba:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cc0:	4d05      	ldr	r5, [pc, #20]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004cc2:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cc4:	684d      	ldr	r5, [r1, #4]
 8004cc6:	432b      	orrs	r3, r5
 8004cc8:	e7e1      	b.n	8004c8e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8004cca:	2002      	movs	r0, #2
 8004ccc:	e7f7      	b.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	ff0fffff 	.word	0xff0fffff

08004cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cdc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cde:	233c      	movs	r3, #60	; 0x3c
 8004ce0:	5cc3      	ldrb	r3, [r0, r3]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d044      	beq.n	8004d70 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8004ce6:	233c      	movs	r3, #60	; 0x3c
 8004ce8:	2201      	movs	r2, #1
 8004cea:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cec:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004cee:	68ca      	ldr	r2, [r1, #12]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	688a      	ldr	r2, [r1, #8]
 8004cf4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cf6:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	684a      	ldr	r2, [r1, #4]
 8004cfc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cfe:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	680a      	ldr	r2, [r1, #0]
 8004d04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d06:	4a1e      	ldr	r2, [pc, #120]	; (8004d80 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	690a      	ldr	r2, [r1, #16]
 8004d0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	694a      	ldr	r2, [r1, #20]
 8004d14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004d1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	698a      	ldr	r2, [r1, #24]
 8004d24:	0412      	lsls	r2, r2, #16
 8004d26:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d28:	6802      	ldr	r2, [r0, #0]
 8004d2a:	4c19      	ldr	r4, [pc, #100]	; (8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004d2c:	42a2      	cmp	r2, r4
 8004d2e:	d008      	beq.n	8004d42 <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d30:	4c17      	ldr	r4, [pc, #92]	; (8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004d32:	42a2      	cmp	r2, r4
 8004d34:	d00a      	beq.n	8004d4c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d36:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d38:	233c      	movs	r3, #60	; 0x3c
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004d3e:	2000      	movs	r0, #0
}
 8004d40:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004d42:	4c14      	ldr	r4, [pc, #80]	; (8004d94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004d44:	4023      	ands	r3, r4
 8004d46:	69cc      	ldr	r4, [r1, #28]
 8004d48:	4323      	orrs	r3, r4
 8004d4a:	e7f1      	b.n	8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d4c:	4c12      	ldr	r4, [pc, #72]	; (8004d98 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8004d4e:	4023      	ands	r3, r4
 8004d50:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004d52:	0524      	lsls	r4, r4, #20
 8004d54:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d56:	4c11      	ldr	r4, [pc, #68]	; (8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8004d58:	4023      	ands	r3, r4
 8004d5a:	6a0c      	ldr	r4, [r1, #32]
 8004d5c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d5e:	4c10      	ldr	r4, [pc, #64]	; (8004da0 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 8004d60:	4023      	ands	r3, r4
 8004d62:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004d64:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d66:	4c0f      	ldr	r4, [pc, #60]	; (8004da4 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 8004d68:	4023      	ands	r3, r4
 8004d6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	e7e2      	b.n	8004d36 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8004d70:	2002      	movs	r0, #2
 8004d72:	e7e5      	b.n	8004d40 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8004d74:	fffffcff 	.word	0xfffffcff
 8004d78:	fffffbff 	.word	0xfffffbff
 8004d7c:	fffff7ff 	.word	0xfffff7ff
 8004d80:	ffffefff 	.word	0xffffefff
 8004d84:	ffffdfff 	.word	0xffffdfff
 8004d88:	ffffbfff 	.word	0xffffbfff
 8004d8c:	fff0ffff 	.word	0xfff0ffff
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	efffffff 	.word	0xefffffff
 8004d98:	ff0fffff 	.word	0xff0fffff
 8004d9c:	feffffff 	.word	0xfeffffff
 8004da0:	fdffffff 	.word	0xfdffffff
 8004da4:	dfffffff 	.word	0xdfffffff

08004da8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	4770      	bx	lr

08004daa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dac:	4770      	bx	lr
	...

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	2600      	movs	r6, #0
 8004db4:	4d0c      	ldr	r5, [pc, #48]	; (8004de8 <__libc_init_array+0x38>)
 8004db6:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db8:	1b64      	subs	r4, r4, r5
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	2600      	movs	r6, #0
 8004dc2:	f000 f821 	bl	8004e08 <_init>
 8004dc6:	4d0a      	ldr	r5, [pc, #40]	; (8004df0 <__libc_init_array+0x40>)
 8004dc8:	4c0a      	ldr	r4, [pc, #40]	; (8004df4 <__libc_init_array+0x44>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	00b3      	lsls	r3, r6, #2
 8004dd6:	58eb      	ldr	r3, [r5, r3]
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	00b3      	lsls	r3, r6, #2
 8004de0:	58eb      	ldr	r3, [r5, r3]
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08004fb8 	.word	0x08004fb8
 8004dec:	08004fb8 	.word	0x08004fb8
 8004df0:	08004fb8 	.word	0x08004fb8
 8004df4:	08004fbc 	.word	0x08004fbc

08004df8 <memset>:
 8004df8:	0003      	movs	r3, r0
 8004dfa:	1882      	adds	r2, r0, r2
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d100      	bne.n	8004e02 <memset+0xa>
 8004e00:	4770      	bx	lr
 8004e02:	7019      	strb	r1, [r3, #0]
 8004e04:	3301      	adds	r3, #1
 8004e06:	e7f9      	b.n	8004dfc <memset+0x4>

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
